// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "Colossus_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Make_Groups
void Make_Groups(const int& ntime, const MatrixXd& df_m, IntegerMatrix& RiskFail, vector<string>& RiskGroup, NumericVector& tu, const int& nthreads, bool debugging);
RcppExport SEXP _Colossus_Make_Groups(SEXP ntimeSEXP, SEXP df_mSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP tuSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df_m(df_mSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Make_Groups(ntime, df_m, RiskFail, RiskGroup, tu, nthreads, debugging);
    return R_NilValue;
END_RCPP
}
// Make_Groups_CR
void Make_Groups_CR(const int& ntime, const MatrixXd& df_m, IntegerMatrix& RiskFail, vector<string>& RiskGroup, NumericVector& tu, const VectorXd& cens_weight, const int& nthreads, bool debugging);
RcppExport SEXP _Colossus_Make_Groups_CR(SEXP ntimeSEXP, SEXP df_mSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP tuSEXP, SEXP cens_weightSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df_m(df_mSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Make_Groups_CR(ntime, df_m, RiskFail, RiskGroup, tu, cens_weight, nthreads, debugging);
    return R_NilValue;
END_RCPP
}
// Make_Groups_STRATA
void Make_Groups_STRATA(const int& ntime, const MatrixXd& df_m, IntegerMatrix& RiskFail, StringMatrix& RiskGroup, NumericVector& tu, const int& nthreads, bool debugging, NumericVector& STRATA_vals);
RcppExport SEXP _Colossus_Make_Groups_STRATA(SEXP ntimeSEXP, SEXP df_mSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP tuSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP STRATA_valsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df_m(df_mSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Make_Groups_STRATA(ntime, df_m, RiskFail, RiskGroup, tu, nthreads, debugging, STRATA_vals);
    return R_NilValue;
END_RCPP
}
// Make_Groups_STRATA_CR
void Make_Groups_STRATA_CR(const int& ntime, const MatrixXd& df_m, IntegerMatrix& RiskFail, StringMatrix& RiskGroup, NumericVector& tu, const int& nthreads, bool debugging, NumericVector& STRATA_vals, const VectorXd& cens_weight);
RcppExport SEXP _Colossus_Make_Groups_STRATA_CR(SEXP ntimeSEXP, SEXP df_mSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP tuSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP STRATA_valsSEXP, SEXP cens_weightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df_m(df_mSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Make_Groups_STRATA_CR(ntime, df_m, RiskFail, RiskGroup, tu, nthreads, debugging, STRATA_vals, cens_weight);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides
void Calculate_Sides(const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, MatrixXd& Rls1, MatrixXd& Rls2, MatrixXd& Rls3, MatrixXd& Lls1, MatrixXd& Lls2, MatrixXd& Lls3, const int& nthreads, bool debugging, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calculate_Sides(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calculate_Sides(RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, nthreads, debugging, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides_CR
void Calculate_Sides_CR(const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, MatrixXd& Rls1, MatrixXd& Rls2, MatrixXd& Rls3, MatrixXd& Lls1, MatrixXd& Lls2, MatrixXd& Lls3, const VectorXd& cens_weight, const int& nthreads, bool debugging, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calculate_Sides_CR(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP cens_weightSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calculate_Sides_CR(RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, cens_weight, nthreads, debugging, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides_CR_SINGLE
void Calculate_Sides_CR_SINGLE(const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, MatrixXd& Rls1, MatrixXd& Lls1, const VectorXd& cens_weight, const int& nthreads, bool debugging, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calculate_Sides_CR_SINGLE(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP cens_weightSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calculate_Sides_CR_SINGLE(RiskFail, RiskGroup, totalnum, ntime, R, Rls1, Lls1, cens_weight, nthreads, debugging, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides_Single
void Calculate_Sides_Single(const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, MatrixXd& Rls1, MatrixXd& Lls1, const int& nthreads, bool debugging);
RcppExport SEXP _Colossus_Calculate_Sides_Single(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Calculate_Sides_Single(RiskFail, RiskGroup, totalnum, ntime, R, Rls1, Lls1, nthreads, debugging);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides_STRATA
void Calculate_Sides_STRATA(const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, MatrixXd& Rls1, MatrixXd& Rls2, MatrixXd& Rls3, MatrixXd& Lls1, MatrixXd& Lls2, MatrixXd& Lls3, const int& nthreads, bool debugging, NumericVector& STRATA_vals, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calculate_Sides_STRATA(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP STRATA_valsSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calculate_Sides_STRATA(RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, nthreads, debugging, STRATA_vals, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides_STRATA_Single
void Calculate_Sides_STRATA_Single(const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, MatrixXd& Rls1, MatrixXd& Lls1, const int& nthreads, bool debugging, NumericVector& STRATA_vals, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calculate_Sides_STRATA_Single(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP STRATA_valsSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calculate_Sides_STRATA_Single(RiskFail, RiskGroup, totalnum, ntime, R, Rls1, Lls1, nthreads, debugging, STRATA_vals, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides_STRATA_CR
void Calculate_Sides_STRATA_CR(const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, MatrixXd& Rls1, MatrixXd& Rls2, MatrixXd& Rls3, MatrixXd& Lls1, MatrixXd& Lls2, MatrixXd& Lls3, const VectorXd& cens_weight, const int& nthreads, bool debugging, NumericVector& STRATA_vals, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calculate_Sides_STRATA_CR(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP cens_weightSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP STRATA_valsSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calculate_Sides_STRATA_CR(RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, cens_weight, nthreads, debugging, STRATA_vals, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides_STRATA_Single_CR
void Calculate_Sides_STRATA_Single_CR(const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, MatrixXd& Rls1, MatrixXd& Lls1, const VectorXd& cens_weight, const int& nthreads, bool debugging, NumericVector& STRATA_vals, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calculate_Sides_STRATA_Single_CR(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP cens_weightSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP STRATA_valsSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calculate_Sides_STRATA_Single_CR(RiskFail, RiskGroup, totalnum, ntime, R, Rls1, Lls1, cens_weight, nthreads, debugging, STRATA_vals, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calc_LogLik
void Calc_LogLik(const int& nthreads, const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, const MatrixXd& RdR, const MatrixXd& RddR, const MatrixXd& Rls1, const MatrixXd& Rls2, const MatrixXd& Rls3, const MatrixXd& Lls1, const MatrixXd& Lls2, const MatrixXd& Lls3, vector<double>& Ll, vector<double>& Lld, vector<double>& Lldd, bool debugging, string ties_method, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calc_LogLik(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP RdRSEXP, SEXP RddRSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP debuggingSEXP, SEXP ties_methodSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calc_LogLik(nthreads, RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, RdR, RddR, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, Ll, Lld, Lldd, debugging, ties_method, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calc_LogLik_Basic
void Calc_LogLik_Basic(const int& nthreads, const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, const MatrixXd& RdR, const MatrixXd& Rls1, const MatrixXd& Rls2, const MatrixXd& Rls3, const MatrixXd& Lls1, const MatrixXd& Lls2, const MatrixXd& Lls3, vector<double>& Ll, vector<double>& Lld, vector<double>& Lldd, bool debugging, string ties_method, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calc_LogLik_Basic(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP RdRSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP debuggingSEXP, SEXP ties_methodSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calc_LogLik_Basic(nthreads, RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, RdR, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, Ll, Lld, Lldd, debugging, ties_method, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calc_LogLik_Basic_Single
void Calc_LogLik_Basic_Single(const int& nthreads, const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rls1, const MatrixXd& Lls1, vector<double>& Ll, bool debugging, string ties_method, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calc_LogLik_Basic_Single(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP LlSEXP, SEXP debuggingSEXP, SEXP ties_methodSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calc_LogLik_Basic_Single(nthreads, RiskFail, RiskGroup, totalnum, ntime, R, Rls1, Lls1, Ll, debugging, ties_method, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calc_LogLik_Single
void Calc_LogLik_Single(const int& nthreads, const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rls1, const MatrixXd& Lls1, vector<double>& Ll, bool debugging, string ties_method);
RcppExport SEXP _Colossus_Calc_LogLik_Single(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP LlSEXP, SEXP debuggingSEXP, SEXP ties_methodSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Calc_LogLik_Single(nthreads, RiskFail, RiskGroup, totalnum, ntime, R, Rls1, Lls1, Ll, debugging, ties_method);
    return R_NilValue;
END_RCPP
}
// Calc_LogLik_STRATA
void Calc_LogLik_STRATA(const int& nthreads, const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, const MatrixXd& RdR, const MatrixXd& RddR, const MatrixXd& Rls1, const MatrixXd& Rls2, const MatrixXd& Rls3, const MatrixXd& Lls1, const MatrixXd& Lls2, const MatrixXd& Lls3, vector<double>& Ll, vector<double>& Lld, vector<double>& Lldd, bool debugging, string ties_method, NumericVector& STRATA_vals, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calc_LogLik_STRATA(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP RdRSEXP, SEXP RddRSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP debuggingSEXP, SEXP ties_methodSEXP, SEXP STRATA_valsSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calc_LogLik_STRATA(nthreads, RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, RdR, RddR, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, Ll, Lld, Lldd, debugging, ties_method, STRATA_vals, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calc_LogLik_STRATA_SINGLE
void Calc_LogLik_STRATA_SINGLE(const int& nthreads, const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rls1, const MatrixXd& Lls1, vector<double>& Ll, bool debugging, string ties_method, NumericVector& STRATA_vals, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calc_LogLik_STRATA_SINGLE(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP LlSEXP, SEXP debuggingSEXP, SEXP ties_methodSEXP, SEXP STRATA_valsSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calc_LogLik_STRATA_SINGLE(nthreads, RiskFail, RiskGroup, totalnum, ntime, R, Rls1, Lls1, Ll, debugging, ties_method, STRATA_vals, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calc_LogLik_STRATA_BASIC
void Calc_LogLik_STRATA_BASIC(const int& nthreads, const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, const MatrixXd& RdR, const MatrixXd& Rls1, const MatrixXd& Rls2, const MatrixXd& Rls3, const MatrixXd& Lls1, const MatrixXd& Lls2, const MatrixXd& Lls3, vector<double>& Ll, vector<double>& Lld, vector<double>& Lldd, bool debugging, string ties_method, NumericVector& STRATA_vals, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calc_LogLik_STRATA_BASIC(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP RdRSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP debuggingSEXP, SEXP ties_methodSEXP, SEXP STRATA_valsSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calc_LogLik_STRATA_BASIC(nthreads, RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, RdR, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, Ll, Lld, Lldd, debugging, ties_method, STRATA_vals, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calc_LogLik_STRATA_BASIC_SINGLE
void Calc_LogLik_STRATA_BASIC_SINGLE(const int& nthreads, const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rls1, const MatrixXd& Lls1, vector<double>& Ll, bool debugging, string ties_method, NumericVector& STRATA_vals, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calc_LogLik_STRATA_BASIC_SINGLE(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP LlSEXP, SEXP debuggingSEXP, SEXP ties_methodSEXP, SEXP STRATA_valsSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calc_LogLik_STRATA_BASIC_SINGLE(nthreads, RiskFail, RiskGroup, totalnum, ntime, R, Rls1, Lls1, Ll, debugging, ties_method, STRATA_vals, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Poisson_LogLik
void Poisson_LogLik(const int& nthreads, const int& totalnum, const MatrixXd& PyrC, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, const MatrixXd& RdR, const MatrixXd& RddR, vector<double>& Ll, vector<double>& Lld, vector<double>& Lldd, bool debugging, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Poisson_LogLik(SEXP nthreadsSEXP, SEXP totalnumSEXP, SEXP PyrCSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP RdRSEXP, SEXP RddRSEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Poisson_LogLik(nthreads, totalnum, PyrC, R, Rd, Rdd, RdR, RddR, Ll, Lld, Lldd, debugging, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Poisson_LogLik_Single
void Poisson_LogLik_Single(const int& nthreads, const int& totalnum, const MatrixXd& PyrC, const MatrixXd& R, vector<double>& Ll, bool debugging);
RcppExport SEXP _Colossus_Poisson_LogLik_Single(SEXP nthreadsSEXP, SEXP totalnumSEXP, SEXP PyrCSEXP, SEXP RSEXP, SEXP LlSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Poisson_LogLik_Single(nthreads, totalnum, PyrC, R, Ll, debugging);
    return R_NilValue;
END_RCPP
}
// Calculate_Null_Sides
void Calculate_Null_Sides(const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& ntime, const MatrixXd& R, MatrixXd& Rls1, MatrixXd& Lls1, const int& nthreads);
RcppExport SEXP _Colossus_Calculate_Null_Sides(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Calculate_Null_Sides(RiskFail, RiskGroup, ntime, R, Rls1, Lls1, nthreads);
    return R_NilValue;
END_RCPP
}
// Calc_Null_LogLik
void Calc_Null_LogLik(const int& nthreads, const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& ntime, const MatrixXd& R, const MatrixXd& Rls1, const MatrixXd& Lls1, vector<double>& Ll, string ties_method);
RcppExport SEXP _Colossus_Calc_Null_LogLik(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP LlSEXP, SEXP ties_methodSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Calc_Null_LogLik(nthreads, RiskFail, RiskGroup, ntime, R, Rls1, Lls1, Ll, ties_method);
    return R_NilValue;
END_RCPP
}
// Calculate_Null_Sides_STRATA
void Calculate_Null_Sides_STRATA(const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& ntime, const MatrixXd& R, MatrixXd& Rls1, MatrixXd& Lls1, NumericVector& STRATA_vals, const int& nthreads);
RcppExport SEXP _Colossus_Calculate_Null_Sides_STRATA(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP STRATA_valsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Calculate_Null_Sides_STRATA(RiskFail, RiskGroup, ntime, R, Rls1, Lls1, STRATA_vals, nthreads);
    return R_NilValue;
END_RCPP
}
// Calc_Null_LogLik_STRATA
void Calc_Null_LogLik_STRATA(const int& nthreads, const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& ntime, const MatrixXd& R, const MatrixXd& Rls1, const MatrixXd& Lls1, NumericVector& STRATA_vals, vector<double>& Ll, string ties_method);
RcppExport SEXP _Colossus_Calc_Null_LogLik_STRATA(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP STRATA_valsSEXP, SEXP LlSEXP, SEXP ties_methodSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Calc_Null_LogLik_STRATA(nthreads, RiskFail, RiskGroup, ntime, R, Rls1, Lls1, STRATA_vals, Ll, ties_method);
    return R_NilValue;
END_RCPP
}
// Check_Risk
bool Check_Risk(IntegerVector term_n, StringVector tform, NumericVector a_n, NumericMatrix& x_all, IntegerVector dfc, int fir, string modelform, int verbose, bool debugging, IntegerVector KeepConstant, int term_tot, int nthreads, const double gmix_theta, const IntegerVector gmix_term);
RcppExport SEXP _Colossus_Check_Risk(SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP nthreadsSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type gmix_term(gmix_termSEXP);
    rcpp_result_gen = Rcpp::wrap(Check_Risk(term_n, tform, a_n, x_all, dfc, fir, modelform, verbose, debugging, KeepConstant, term_tot, nthreads, gmix_theta, gmix_term));
    return rcpp_result_gen;
END_RCPP
}
// LogLik_Cox_PH_Omnibus
List LogLik_Cox_PH_Omnibus(IntegerVector term_n, StringVector tform, NumericMatrix& a_ns, NumericMatrix& x_all, IntegerVector dfc, int fir, int der_iden, string modelform, double lr, NumericVector maxiters, int guesses, int halfmax, double epsilon, double abs_max, double dose_abs_max, double deriv_epsilon, NumericMatrix df_groups, NumericVector tu, int double_step, bool change_all, int verbose, bool debugging, IntegerVector KeepConstant, int term_tot, string ties_method, int nthreads, NumericVector& STRATA_vals, const VectorXd& cens_weight, bool strata_bool, bool basic_bool, bool null_bool, bool CR_bool, bool single_bool, bool constraint_bool, const double gmix_theta, const IntegerVector gmix_term, const MatrixXd Lin_Sys, const VectorXd Lin_Res);
RcppExport SEXP _Colossus_LogLik_Cox_PH_Omnibus(SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nsSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP lrSEXP, SEXP maxitersSEXP, SEXP guessesSEXP, SEXP halfmaxSEXP, SEXP epsilonSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP deriv_epsilonSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP double_stepSEXP, SEXP change_allSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP ties_methodSEXP, SEXP nthreadsSEXP, SEXP STRATA_valsSEXP, SEXP cens_weightSEXP, SEXP strata_boolSEXP, SEXP basic_boolSEXP, SEXP null_boolSEXP, SEXP CR_boolSEXP, SEXP single_boolSEXP, SEXP constraint_boolSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP, SEXP Lin_SysSEXP, SEXP Lin_ResSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type a_ns(a_nsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxiters(maxitersSEXP);
    Rcpp::traits::input_parameter< int >::type guesses(guessesSEXP);
    Rcpp::traits::input_parameter< int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type deriv_epsilon(deriv_epsilonSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< int >::type double_step(double_stepSEXP);
    Rcpp::traits::input_parameter< bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< bool >::type strata_bool(strata_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type basic_bool(basic_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type null_bool(null_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type CR_bool(CR_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type single_bool(single_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type constraint_bool(constraint_boolSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type gmix_term(gmix_termSEXP);
    Rcpp::traits::input_parameter< const MatrixXd >::type Lin_Sys(Lin_SysSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type Lin_Res(Lin_ResSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Cox_PH_Omnibus(term_n, tform, a_ns, x_all, dfc, fir, der_iden, modelform, lr, maxiters, guesses, halfmax, epsilon, abs_max, dose_abs_max, deriv_epsilon, df_groups, tu, double_step, change_all, verbose, debugging, KeepConstant, term_tot, ties_method, nthreads, STRATA_vals, cens_weight, strata_bool, basic_bool, null_bool, CR_bool, single_bool, constraint_bool, gmix_theta, gmix_term, Lin_Sys, Lin_Res));
    return rcpp_result_gen;
END_RCPP
}
// LogLik_Pois_Omnibus
List LogLik_Pois_Omnibus(const MatrixXd& PyrC, IntegerVector term_n, StringVector tform, NumericMatrix& a_ns, NumericMatrix& x_all, IntegerVector dfc, int fir, int der_iden, string modelform, double lr, NumericVector maxiters, int guesses, int halfmax, double epsilon, double abs_max, double dose_abs_max, double deriv_epsilon, int double_step, bool change_all, int verbose, bool debugging, IntegerVector KeepConstant, int term_tot, int nthreads, const MatrixXd& dfs, bool strata_bool, bool single_bool, bool constraint_bool, const double gmix_theta, const IntegerVector gmix_term, const MatrixXd Lin_Sys, const VectorXd Lin_Res);
RcppExport SEXP _Colossus_LogLik_Pois_Omnibus(SEXP PyrCSEXP, SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nsSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP lrSEXP, SEXP maxitersSEXP, SEXP guessesSEXP, SEXP halfmaxSEXP, SEXP epsilonSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP deriv_epsilonSEXP, SEXP double_stepSEXP, SEXP change_allSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP nthreadsSEXP, SEXP dfsSEXP, SEXP strata_boolSEXP, SEXP single_boolSEXP, SEXP constraint_boolSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP, SEXP Lin_SysSEXP, SEXP Lin_ResSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type a_ns(a_nsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxiters(maxitersSEXP);
    Rcpp::traits::input_parameter< int >::type guesses(guessesSEXP);
    Rcpp::traits::input_parameter< int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type deriv_epsilon(deriv_epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type double_step(double_stepSEXP);
    Rcpp::traits::input_parameter< bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type dfs(dfsSEXP);
    Rcpp::traits::input_parameter< bool >::type strata_bool(strata_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type single_bool(single_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type constraint_bool(constraint_boolSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type gmix_term(gmix_termSEXP);
    Rcpp::traits::input_parameter< const MatrixXd >::type Lin_Sys(Lin_SysSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type Lin_Res(Lin_ResSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Pois_Omnibus(PyrC, term_n, tform, a_ns, x_all, dfc, fir, der_iden, modelform, lr, maxiters, guesses, halfmax, epsilon, abs_max, dose_abs_max, deriv_epsilon, double_step, change_all, verbose, debugging, KeepConstant, term_tot, nthreads, dfs, strata_bool, single_bool, constraint_bool, gmix_theta, gmix_term, Lin_Sys, Lin_Res));
    return rcpp_result_gen;
END_RCPP
}
// LogLik_Cox_PH_Omnibus_Log_Bound
List LogLik_Cox_PH_Omnibus_Log_Bound(IntegerVector term_n, StringVector tform, NumericVector a_n, NumericMatrix& x_all, IntegerVector dfc, int fir, string modelform, double lr, NumericVector maxiters, int guesses, int halfmax, double epsilon, double abs_max, double dose_abs_max, double deriv_epsilon, NumericMatrix df_groups, NumericVector tu, int verbose, bool debugging, IntegerVector KeepConstant, int term_tot, string ties_method, int nthreads, NumericVector& STRATA_vals, const VectorXd& cens_weight, bool strata_bool, bool basic_bool, bool null_bool, bool CR_bool, bool single_bool, bool constraint_bool, const double gmix_theta, const IntegerVector gmix_term, const MatrixXd Lin_Sys, const VectorXd Lin_Res, double qchi, int para_number, int maxstep, double mult);
RcppExport SEXP _Colossus_LogLik_Cox_PH_Omnibus_Log_Bound(SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP lrSEXP, SEXP maxitersSEXP, SEXP guessesSEXP, SEXP halfmaxSEXP, SEXP epsilonSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP deriv_epsilonSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP ties_methodSEXP, SEXP nthreadsSEXP, SEXP STRATA_valsSEXP, SEXP cens_weightSEXP, SEXP strata_boolSEXP, SEXP basic_boolSEXP, SEXP null_boolSEXP, SEXP CR_boolSEXP, SEXP single_boolSEXP, SEXP constraint_boolSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP, SEXP Lin_SysSEXP, SEXP Lin_ResSEXP, SEXP qchiSEXP, SEXP para_numberSEXP, SEXP maxstepSEXP, SEXP multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxiters(maxitersSEXP);
    Rcpp::traits::input_parameter< int >::type guesses(guessesSEXP);
    Rcpp::traits::input_parameter< int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type deriv_epsilon(deriv_epsilonSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< bool >::type strata_bool(strata_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type basic_bool(basic_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type null_bool(null_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type CR_bool(CR_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type single_bool(single_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type constraint_bool(constraint_boolSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type gmix_term(gmix_termSEXP);
    Rcpp::traits::input_parameter< const MatrixXd >::type Lin_Sys(Lin_SysSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type Lin_Res(Lin_ResSEXP);
    Rcpp::traits::input_parameter< double >::type qchi(qchiSEXP);
    Rcpp::traits::input_parameter< int >::type para_number(para_numberSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< double >::type mult(multSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Cox_PH_Omnibus_Log_Bound(term_n, tform, a_n, x_all, dfc, fir, modelform, lr, maxiters, guesses, halfmax, epsilon, abs_max, dose_abs_max, deriv_epsilon, df_groups, tu, verbose, debugging, KeepConstant, term_tot, ties_method, nthreads, STRATA_vals, cens_weight, strata_bool, basic_bool, null_bool, CR_bool, single_bool, constraint_bool, gmix_theta, gmix_term, Lin_Sys, Lin_Res, qchi, para_number, maxstep, mult));
    return rcpp_result_gen;
END_RCPP
}
// LogLik_Cox_PH_Omnibus_Log_Bound_Search
List LogLik_Cox_PH_Omnibus_Log_Bound_Search(IntegerVector term_n, StringVector tform, NumericVector a_n, NumericMatrix& x_all, IntegerVector dfc, int fir, string modelform, double lr, NumericVector maxiters, int guesses, int halfmax, double epsilon, double abs_max, double dose_abs_max, double deriv_epsilon, NumericMatrix df_groups, NumericVector tu, int verbose, bool debugging, IntegerVector KeepConstant, int term_tot, string ties_method, int nthreads, NumericVector& STRATA_vals, const VectorXd& cens_weight, bool strata_bool, bool basic_bool, bool null_bool, bool CR_bool, bool single_bool, bool constraint_bool, const double gmix_theta, const IntegerVector gmix_term, const MatrixXd Lin_Sys, const VectorXd Lin_Res, double qchi, int para_number, int maxstep, double mult);
RcppExport SEXP _Colossus_LogLik_Cox_PH_Omnibus_Log_Bound_Search(SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP lrSEXP, SEXP maxitersSEXP, SEXP guessesSEXP, SEXP halfmaxSEXP, SEXP epsilonSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP deriv_epsilonSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP ties_methodSEXP, SEXP nthreadsSEXP, SEXP STRATA_valsSEXP, SEXP cens_weightSEXP, SEXP strata_boolSEXP, SEXP basic_boolSEXP, SEXP null_boolSEXP, SEXP CR_boolSEXP, SEXP single_boolSEXP, SEXP constraint_boolSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP, SEXP Lin_SysSEXP, SEXP Lin_ResSEXP, SEXP qchiSEXP, SEXP para_numberSEXP, SEXP maxstepSEXP, SEXP multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxiters(maxitersSEXP);
    Rcpp::traits::input_parameter< int >::type guesses(guessesSEXP);
    Rcpp::traits::input_parameter< int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type deriv_epsilon(deriv_epsilonSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< bool >::type strata_bool(strata_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type basic_bool(basic_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type null_bool(null_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type CR_bool(CR_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type single_bool(single_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type constraint_bool(constraint_boolSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type gmix_term(gmix_termSEXP);
    Rcpp::traits::input_parameter< const MatrixXd >::type Lin_Sys(Lin_SysSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type Lin_Res(Lin_ResSEXP);
    Rcpp::traits::input_parameter< double >::type qchi(qchiSEXP);
    Rcpp::traits::input_parameter< int >::type para_number(para_numberSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< double >::type mult(multSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Cox_PH_Omnibus_Log_Bound_Search(term_n, tform, a_n, x_all, dfc, fir, modelform, lr, maxiters, guesses, halfmax, epsilon, abs_max, dose_abs_max, deriv_epsilon, df_groups, tu, verbose, debugging, KeepConstant, term_tot, ties_method, nthreads, STRATA_vals, cens_weight, strata_bool, basic_bool, null_bool, CR_bool, single_bool, constraint_bool, gmix_theta, gmix_term, Lin_Sys, Lin_Res, qchi, para_number, maxstep, mult));
    return rcpp_result_gen;
END_RCPP
}
// LogLik_Poisson_Omnibus_Log_Bound
List LogLik_Poisson_Omnibus_Log_Bound(const MatrixXd& PyrC, const MatrixXd& dfs, IntegerVector term_n, StringVector tform, NumericVector a_n, NumericMatrix& x_all, IntegerVector dfc, int fir, string modelform, double lr, NumericVector maxiters, int guesses, int halfmax, double epsilon, double abs_max, double dose_abs_max, double deriv_epsilon, int verbose, bool debugging, IntegerVector KeepConstant, int term_tot, int nthreads, bool strata_bool, bool single_bool, bool constraint_bool, const double gmix_theta, const IntegerVector gmix_term, const MatrixXd Lin_Sys, const VectorXd Lin_Res, double qchi, int para_number, int maxstep, double mult);
RcppExport SEXP _Colossus_LogLik_Poisson_Omnibus_Log_Bound(SEXP PyrCSEXP, SEXP dfsSEXP, SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP lrSEXP, SEXP maxitersSEXP, SEXP guessesSEXP, SEXP halfmaxSEXP, SEXP epsilonSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP deriv_epsilonSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP nthreadsSEXP, SEXP strata_boolSEXP, SEXP single_boolSEXP, SEXP constraint_boolSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP, SEXP Lin_SysSEXP, SEXP Lin_ResSEXP, SEXP qchiSEXP, SEXP para_numberSEXP, SEXP maxstepSEXP, SEXP multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type dfs(dfsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxiters(maxitersSEXP);
    Rcpp::traits::input_parameter< int >::type guesses(guessesSEXP);
    Rcpp::traits::input_parameter< int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type deriv_epsilon(deriv_epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type strata_bool(strata_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type single_bool(single_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type constraint_bool(constraint_boolSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type gmix_term(gmix_termSEXP);
    Rcpp::traits::input_parameter< const MatrixXd >::type Lin_Sys(Lin_SysSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type Lin_Res(Lin_ResSEXP);
    Rcpp::traits::input_parameter< double >::type qchi(qchiSEXP);
    Rcpp::traits::input_parameter< int >::type para_number(para_numberSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< double >::type mult(multSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Poisson_Omnibus_Log_Bound(PyrC, dfs, term_n, tform, a_n, x_all, dfc, fir, modelform, lr, maxiters, guesses, halfmax, epsilon, abs_max, dose_abs_max, deriv_epsilon, verbose, debugging, KeepConstant, term_tot, nthreads, strata_bool, single_bool, constraint_bool, gmix_theta, gmix_term, Lin_Sys, Lin_Res, qchi, para_number, maxstep, mult));
    return rcpp_result_gen;
END_RCPP
}
// LogLik_Poisson_Omnibus_Log_Bound_Search
List LogLik_Poisson_Omnibus_Log_Bound_Search(const MatrixXd& PyrC, const MatrixXd& dfs, IntegerVector term_n, StringVector tform, NumericVector a_n, NumericMatrix& x_all, IntegerVector dfc, int fir, string modelform, double lr, NumericVector maxiters, int guesses, int halfmax, double epsilon, double abs_max, double dose_abs_max, double deriv_epsilon, int verbose, bool debugging, IntegerVector KeepConstant, int term_tot, int nthreads, bool strata_bool, bool single_bool, bool constraint_bool, const double gmix_theta, const IntegerVector gmix_term, const MatrixXd Lin_Sys, const VectorXd Lin_Res, double qchi, int para_number, int maxstep, double mult);
RcppExport SEXP _Colossus_LogLik_Poisson_Omnibus_Log_Bound_Search(SEXP PyrCSEXP, SEXP dfsSEXP, SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP lrSEXP, SEXP maxitersSEXP, SEXP guessesSEXP, SEXP halfmaxSEXP, SEXP epsilonSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP deriv_epsilonSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP nthreadsSEXP, SEXP strata_boolSEXP, SEXP single_boolSEXP, SEXP constraint_boolSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP, SEXP Lin_SysSEXP, SEXP Lin_ResSEXP, SEXP qchiSEXP, SEXP para_numberSEXP, SEXP maxstepSEXP, SEXP multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type dfs(dfsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxiters(maxitersSEXP);
    Rcpp::traits::input_parameter< int >::type guesses(guessesSEXP);
    Rcpp::traits::input_parameter< int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type deriv_epsilon(deriv_epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type strata_bool(strata_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type single_bool(single_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type constraint_bool(constraint_boolSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type gmix_term(gmix_termSEXP);
    Rcpp::traits::input_parameter< const MatrixXd >::type Lin_Sys(Lin_SysSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type Lin_Res(Lin_ResSEXP);
    Rcpp::traits::input_parameter< double >::type qchi(qchiSEXP);
    Rcpp::traits::input_parameter< int >::type para_number(para_numberSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< double >::type mult(multSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Poisson_Omnibus_Log_Bound_Search(PyrC, dfs, term_n, tform, a_n, x_all, dfc, fir, modelform, lr, maxiters, guesses, halfmax, epsilon, abs_max, dose_abs_max, deriv_epsilon, verbose, debugging, KeepConstant, term_tot, nthreads, strata_bool, single_bool, constraint_bool, gmix_theta, gmix_term, Lin_Sys, Lin_Res, qchi, para_number, maxstep, mult));
    return rcpp_result_gen;
END_RCPP
}
// LogLik_Cox_PH_Multidose_Omnibus
List LogLik_Cox_PH_Multidose_Omnibus(IntegerVector term_n, StringVector tform, NumericVector a_n, NumericMatrix& x_all, IntegerMatrix dose_cols, IntegerVector dose_index, IntegerVector dfc, int fir, int der_iden, string modelform, double lr, int maxiter, int halfmax, double epsilon, double abs_max, double dose_abs_max, double deriv_epsilon, NumericMatrix df_groups, NumericVector tu, int double_step, bool change_all, int verbose, bool debugging, IntegerVector KeepConstant, int term_tot, string ties_method, int nthreads, NumericVector& STRATA_vals, const VectorXd& cens_weight, bool strata_bool, bool basic_bool, bool null_bool, bool CR_bool, bool single_bool, bool constraint_bool, const double gmix_theta, const IntegerVector gmix_term, const MatrixXd Lin_Sys, const VectorXd Lin_Res);
RcppExport SEXP _Colossus_LogLik_Cox_PH_Multidose_Omnibus(SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dose_colsSEXP, SEXP dose_indexSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP lrSEXP, SEXP maxiterSEXP, SEXP halfmaxSEXP, SEXP epsilonSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP deriv_epsilonSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP double_stepSEXP, SEXP change_allSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP ties_methodSEXP, SEXP nthreadsSEXP, SEXP STRATA_valsSEXP, SEXP cens_weightSEXP, SEXP strata_boolSEXP, SEXP basic_boolSEXP, SEXP null_boolSEXP, SEXP CR_boolSEXP, SEXP single_boolSEXP, SEXP constraint_boolSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP, SEXP Lin_SysSEXP, SEXP Lin_ResSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type dose_cols(dose_colsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dose_index(dose_indexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type deriv_epsilon(deriv_epsilonSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< int >::type double_step(double_stepSEXP);
    Rcpp::traits::input_parameter< bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< bool >::type strata_bool(strata_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type basic_bool(basic_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type null_bool(null_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type CR_bool(CR_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type single_bool(single_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type constraint_bool(constraint_boolSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type gmix_term(gmix_termSEXP);
    Rcpp::traits::input_parameter< const MatrixXd >::type Lin_Sys(Lin_SysSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type Lin_Res(Lin_ResSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Cox_PH_Multidose_Omnibus(term_n, tform, a_n, x_all, dose_cols, dose_index, dfc, fir, der_iden, modelform, lr, maxiter, halfmax, epsilon, abs_max, dose_abs_max, deriv_epsilon, df_groups, tu, double_step, change_all, verbose, debugging, KeepConstant, term_tot, ties_method, nthreads, STRATA_vals, cens_weight, strata_bool, basic_bool, null_bool, CR_bool, single_bool, constraint_bool, gmix_theta, gmix_term, Lin_Sys, Lin_Res));
    return rcpp_result_gen;
END_RCPP
}
// Cox_Refresh_R_TERM
void Cox_Refresh_R_TERM(const int& totalnum, const int& reqrdnum, const int& term_tot, double& dint, double& dslp, double& dose_abs_max, double& abs_max, const MatrixXd& df0, MatrixXd& T0, MatrixXd& Td0, MatrixXd& Tdd0, MatrixXd& Te, MatrixXd& R, MatrixXd& Rd, MatrixXd& Rdd, MatrixXd& Dose, MatrixXd& nonDose, MatrixXd& TTerm, MatrixXd& nonDose_LIN, MatrixXd& nonDose_PLIN, MatrixXd& nonDose_LOGLIN, MatrixXd& RdR, MatrixXd& RddR, bool basic_bool, bool single_bool);
RcppExport SEXP _Colossus_Cox_Refresh_R_TERM(SEXP totalnumSEXP, SEXP reqrdnumSEXP, SEXP term_totSEXP, SEXP dintSEXP, SEXP dslpSEXP, SEXP dose_abs_maxSEXP, SEXP abs_maxSEXP, SEXP df0SEXP, SEXP T0SEXP, SEXP Td0SEXP, SEXP Tdd0SEXP, SEXP TeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP DoseSEXP, SEXP nonDoseSEXP, SEXP TTermSEXP, SEXP nonDose_LINSEXP, SEXP nonDose_PLINSEXP, SEXP nonDose_LOGLINSEXP, SEXP RdRSEXP, SEXP RddRSEXP, SEXP basic_boolSEXP, SEXP single_boolSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type reqrdnum(reqrdnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< double& >::type dint(dintSEXP);
    Rcpp::traits::input_parameter< double& >::type dslp(dslpSEXP);
    Rcpp::traits::input_parameter< double& >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double& >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Td0(Td0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Tdd0(Tdd0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Te(TeSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose(nonDoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LIN(nonDose_LINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_PLIN(nonDose_PLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LOGLIN(nonDose_LOGLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< bool >::type basic_bool(basic_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type single_bool(single_boolSEXP);
    Cox_Refresh_R_TERM(totalnum, reqrdnum, term_tot, dint, dslp, dose_abs_max, abs_max, df0, T0, Td0, Tdd0, Te, R, Rd, Rdd, Dose, nonDose, TTerm, nonDose_LIN, nonDose_PLIN, nonDose_LOGLIN, RdR, RddR, basic_bool, single_bool);
    return R_NilValue;
END_RCPP
}
// Cox_Refresh_R_SIDES
void Cox_Refresh_R_SIDES(const int& reqrdnum, const int& ntime, MatrixXd& Rls1, MatrixXd& Rls2, MatrixXd& Rls3, MatrixXd& Lls1, MatrixXd& Lls2, MatrixXd& Lls3, NumericVector& STRATA_vals, bool strata_bool, bool single_bool);
RcppExport SEXP _Colossus_Cox_Refresh_R_SIDES(SEXP reqrdnumSEXP, SEXP ntimeSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP STRATA_valsSEXP, SEXP strata_boolSEXP, SEXP single_boolSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type reqrdnum(reqrdnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< bool >::type strata_bool(strata_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type single_bool(single_boolSEXP);
    Cox_Refresh_R_SIDES(reqrdnum, ntime, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, STRATA_vals, strata_bool, single_bool);
    return R_NilValue;
END_RCPP
}
// Cox_Term_Risk_Calc
void Cox_Term_Risk_Calc(string modelform, const StringVector& tform, const IntegerVector& term_n, const int& totalnum, const int& fir, const IntegerVector& dfc, int term_tot, MatrixXd& T0, MatrixXd& Td0, MatrixXd& Tdd0, MatrixXd& Te, MatrixXd& R, MatrixXd& Rd, MatrixXd& Rdd, MatrixXd& Dose, MatrixXd& nonDose, VectorXd beta_0, const MatrixXd& df0, const double& dint, const double& dslp, MatrixXd& TTerm, MatrixXd& nonDose_LIN, MatrixXd& nonDose_PLIN, MatrixXd& nonDose_LOGLIN, MatrixXd& RdR, MatrixXd& RddR, const int& nthreads, bool debugging, const IntegerVector& KeepConstant, int verbose, bool basic_bool, bool single_bool, const double gmix_theta, const IntegerVector& gmix_term);
RcppExport SEXP _Colossus_Cox_Term_Risk_Calc(SEXP modelformSEXP, SEXP tformSEXP, SEXP term_nSEXP, SEXP totalnumSEXP, SEXP firSEXP, SEXP dfcSEXP, SEXP term_totSEXP, SEXP T0SEXP, SEXP Td0SEXP, SEXP Tdd0SEXP, SEXP TeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP DoseSEXP, SEXP nonDoseSEXP, SEXP beta_0SEXP, SEXP df0SEXP, SEXP dintSEXP, SEXP dslpSEXP, SEXP TTermSEXP, SEXP nonDose_LINSEXP, SEXP nonDose_PLINSEXP, SEXP nonDose_LOGLINSEXP, SEXP RdRSEXP, SEXP RddRSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP verboseSEXP, SEXP basic_boolSEXP, SEXP single_boolSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Td0(Td0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Tdd0(Tdd0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Te(TeSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose(nonDoseSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dint(dintSEXP);
    Rcpp::traits::input_parameter< const double& >::type dslp(dslpSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LIN(nonDose_LINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_PLIN(nonDose_PLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LOGLIN(nonDose_LOGLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type basic_bool(basic_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type single_bool(single_boolSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gmix_term(gmix_termSEXP);
    Cox_Term_Risk_Calc(modelform, tform, term_n, totalnum, fir, dfc, term_tot, T0, Td0, Tdd0, Te, R, Rd, Rdd, Dose, nonDose, beta_0, df0, dint, dslp, TTerm, nonDose_LIN, nonDose_PLIN, nonDose_LOGLIN, RdR, RddR, nthreads, debugging, KeepConstant, verbose, basic_bool, single_bool, gmix_theta, gmix_term);
    return R_NilValue;
END_RCPP
}
// Cox_Side_LL_Calc
void Cox_Side_LL_Calc(const int& reqrdnum, const int& ntime, const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup_Strata, const vector<string>& RiskGroup, const int& totalnum, const int& fir, MatrixXd& R, MatrixXd& Rd, MatrixXd& Rdd, MatrixXd& Rls1, MatrixXd& Rls2, MatrixXd& Rls3, MatrixXd& Lls1, MatrixXd& Lls2, MatrixXd& Lls3, const VectorXd& cens_weight, NumericVector& STRATA_vals, VectorXd beta_0, MatrixXd& RdR, MatrixXd& RddR, vector<double>& Ll, vector<double>& Lld, vector<double>& Lldd, const int& nthreads, bool debugging, const IntegerVector& KeepConstant, string ties_method, int verbose, bool strata_bool, bool CR_bool, bool basic_bool, bool single_bool, int iter_stop);
RcppExport SEXP _Colossus_Cox_Side_LL_Calc(SEXP reqrdnumSEXP, SEXP ntimeSEXP, SEXP RiskFailSEXP, SEXP RiskGroup_StrataSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP firSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP cens_weightSEXP, SEXP STRATA_valsSEXP, SEXP beta_0SEXP, SEXP RdRSEXP, SEXP RddRSEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP ties_methodSEXP, SEXP verboseSEXP, SEXP strata_boolSEXP, SEXP CR_boolSEXP, SEXP basic_boolSEXP, SEXP single_boolSEXP, SEXP iter_stopSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type reqrdnum(reqrdnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup_Strata(RiskGroup_StrataSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type strata_bool(strata_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type CR_bool(CR_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type basic_bool(basic_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type single_bool(single_boolSEXP);
    Rcpp::traits::input_parameter< int >::type iter_stop(iter_stopSEXP);
    Cox_Side_LL_Calc(reqrdnum, ntime, RiskFail, RiskGroup_Strata, RiskGroup, totalnum, fir, R, Rd, Rdd, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, cens_weight, STRATA_vals, beta_0, RdR, RddR, Ll, Lld, Lldd, nthreads, debugging, KeepConstant, ties_method, verbose, strata_bool, CR_bool, basic_bool, single_bool, iter_stop);
    return R_NilValue;
END_RCPP
}
// Pois_Term_Risk_Calc
void Pois_Term_Risk_Calc(string modelform, const StringVector& tform, const IntegerVector& term_n, const int& totalnum, const int& fir, const IntegerVector& dfc, int term_tot, MatrixXd& T0, MatrixXd& Td0, MatrixXd& Tdd0, MatrixXd& Te, MatrixXd& R, MatrixXd& Rd, MatrixXd& Rdd, MatrixXd& Dose, MatrixXd& nonDose, VectorXd beta_0, const MatrixXd& df0, const double& dint, const double& dslp, MatrixXd& TTerm, MatrixXd& nonDose_LIN, MatrixXd& nonDose_PLIN, MatrixXd& nonDose_LOGLIN, MatrixXd& RdR, MatrixXd& RddR, const MatrixXd& s_weights, const int& nthreads, bool debugging, const IntegerVector& KeepConstant, int verbose, bool strata_bool, bool single_bool, const double gmix_theta, const IntegerVector& gmix_term);
RcppExport SEXP _Colossus_Pois_Term_Risk_Calc(SEXP modelformSEXP, SEXP tformSEXP, SEXP term_nSEXP, SEXP totalnumSEXP, SEXP firSEXP, SEXP dfcSEXP, SEXP term_totSEXP, SEXP T0SEXP, SEXP Td0SEXP, SEXP Tdd0SEXP, SEXP TeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP DoseSEXP, SEXP nonDoseSEXP, SEXP beta_0SEXP, SEXP df0SEXP, SEXP dintSEXP, SEXP dslpSEXP, SEXP TTermSEXP, SEXP nonDose_LINSEXP, SEXP nonDose_PLINSEXP, SEXP nonDose_LOGLINSEXP, SEXP RdRSEXP, SEXP RddRSEXP, SEXP s_weightsSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP verboseSEXP, SEXP strata_boolSEXP, SEXP single_boolSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Td0(Td0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Tdd0(Tdd0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Te(TeSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose(nonDoseSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dint(dintSEXP);
    Rcpp::traits::input_parameter< const double& >::type dslp(dslpSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LIN(nonDose_LINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_PLIN(nonDose_PLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LOGLIN(nonDose_LOGLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type s_weights(s_weightsSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type strata_bool(strata_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type single_bool(single_boolSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gmix_term(gmix_termSEXP);
    Pois_Term_Risk_Calc(modelform, tform, term_n, totalnum, fir, dfc, term_tot, T0, Td0, Tdd0, Te, R, Rd, Rdd, Dose, nonDose, beta_0, df0, dint, dslp, TTerm, nonDose_LIN, nonDose_PLIN, nonDose_LOGLIN, RdR, RddR, s_weights, nthreads, debugging, KeepConstant, verbose, strata_bool, single_bool, gmix_theta, gmix_term);
    return R_NilValue;
END_RCPP
}
// Pois_Dev_LL_Calc
void Pois_Dev_LL_Calc(const int& reqrdnum, const int& totalnum, const int& fir, MatrixXd& R, MatrixXd& Rd, MatrixXd& Rdd, VectorXd beta_0, MatrixXd& RdR, MatrixXd& RddR, vector<double>& Ll, vector<double>& Lld, vector<double>& Lldd, const MatrixXd& PyrC, MatrixXd& dev_temp, const int& nthreads, bool debugging, const IntegerVector& KeepConstant, int verbose, bool single_bool, int iter_stop, double& dev);
RcppExport SEXP _Colossus_Pois_Dev_LL_Calc(SEXP reqrdnumSEXP, SEXP totalnumSEXP, SEXP firSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP beta_0SEXP, SEXP RdRSEXP, SEXP RddRSEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP PyrCSEXP, SEXP dev_tempSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP verboseSEXP, SEXP single_boolSEXP, SEXP iter_stopSEXP, SEXP devSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type reqrdnum(reqrdnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type dev_temp(dev_tempSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type single_bool(single_boolSEXP);
    Rcpp::traits::input_parameter< int >::type iter_stop(iter_stopSEXP);
    Rcpp::traits::input_parameter< double& >::type dev(devSEXP);
    Pois_Dev_LL_Calc(reqrdnum, totalnum, fir, R, Rd, Rdd, beta_0, RdR, RddR, Ll, Lld, Lldd, PyrC, dev_temp, nthreads, debugging, KeepConstant, verbose, single_bool, iter_stop, dev);
    return R_NilValue;
END_RCPP
}
// Cox_Pois_Check_Continue
void Cox_Pois_Check_Continue(const bool basic_bool, VectorXd beta_0, vector<double>& beta_best, vector<double>& beta_c, const VectorXd& cens_weight, const bool change_all, const bool cox_bool, const bool CR_bool, vector<double>& dbeta, const bool debugging, double& dev, MatrixXd& dev_temp, const int fir, const int halfmax, double& halves, int& ind0, int& iter_stop, const IntegerVector& KeepConstant, vector<double>& Ll, double& Ll_abs_best, vector<double>& Lld, vector<double>& Lldd, MatrixXd& Lls1, MatrixXd& Lls2, MatrixXd& Lls3, const bool log_bound_bool, const double& Lstar, const int& nthreads, const int& ntime, const MatrixXd& PyrC, MatrixXd& R, MatrixXd& Rd, MatrixXd& Rdd, MatrixXd& RddR, MatrixXd& RdR, const int& reqrdnum, const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const StringMatrix& RiskGroup_Strata, MatrixXd& Rls1, MatrixXd& Rls2, MatrixXd& Rls3, const bool single_bool, const bool strata_bool, NumericVector& STRATA_vals, const IntegerVector& term_n, const string ties_method, const int totalnum, MatrixXd& TTerm, const int verbose);
RcppExport SEXP _Colossus_Cox_Pois_Check_Continue(SEXP basic_boolSEXP, SEXP beta_0SEXP, SEXP beta_bestSEXP, SEXP beta_cSEXP, SEXP cens_weightSEXP, SEXP change_allSEXP, SEXP cox_boolSEXP, SEXP CR_boolSEXP, SEXP dbetaSEXP, SEXP debuggingSEXP, SEXP devSEXP, SEXP dev_tempSEXP, SEXP firSEXP, SEXP halfmaxSEXP, SEXP halvesSEXP, SEXP ind0SEXP, SEXP iter_stopSEXP, SEXP KeepConstantSEXP, SEXP LlSEXP, SEXP Ll_abs_bestSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP log_bound_boolSEXP, SEXP LstarSEXP, SEXP nthreadsSEXP, SEXP ntimeSEXP, SEXP PyrCSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP RddRSEXP, SEXP RdRSEXP, SEXP reqrdnumSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP RiskGroup_StrataSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP single_boolSEXP, SEXP strata_boolSEXP, SEXP STRATA_valsSEXP, SEXP term_nSEXP, SEXP ties_methodSEXP, SEXP totalnumSEXP, SEXP TTermSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const bool >::type basic_bool(basic_boolSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type beta_best(beta_bestSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type beta_c(beta_cSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< const bool >::type cox_bool(cox_boolSEXP);
    Rcpp::traits::input_parameter< const bool >::type CR_bool(CR_boolSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type dbeta(dbetaSEXP);
    Rcpp::traits::input_parameter< const bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< double& >::type dev(devSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type dev_temp(dev_tempSEXP);
    Rcpp::traits::input_parameter< const int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< const int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double& >::type halves(halvesSEXP);
    Rcpp::traits::input_parameter< int& >::type ind0(ind0SEXP);
    Rcpp::traits::input_parameter< int& >::type iter_stop(iter_stopSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< double& >::type Ll_abs_best(Ll_abs_bestSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< const bool >::type log_bound_bool(log_bound_boolSEXP);
    Rcpp::traits::input_parameter< const double& >::type Lstar(LstarSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< const int& >::type reqrdnum(reqrdnumSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup_Strata(RiskGroup_StrataSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< const bool >::type single_bool(single_boolSEXP);
    Rcpp::traits::input_parameter< const bool >::type strata_bool(strata_boolSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< const string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< const int >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    Cox_Pois_Check_Continue(basic_bool, beta_0, beta_best, beta_c, cens_weight, change_all, cox_bool, CR_bool, dbeta, debugging, dev, dev_temp, fir, halfmax, halves, ind0, iter_stop, KeepConstant, Ll, Ll_abs_best, Lld, Lldd, Lls1, Lls2, Lls3, log_bound_bool, Lstar, nthreads, ntime, PyrC, R, Rd, Rdd, RddR, RdR, reqrdnum, RiskFail, RiskGroup, RiskGroup_Strata, Rls1, Rls2, Rls3, single_bool, strata_bool, STRATA_vals, term_n, ties_method, totalnum, TTerm, verbose);
    return R_NilValue;
END_RCPP
}
// Cox_Pois_Log_Loop
void Cox_Pois_Log_Loop(double& abs_max, const bool basic_bool, VectorXd beta_0, vector<double>& beta_a, vector<double>& beta_c, int& bound_val, const bool cox_bool, vector<double>& dbeta, const bool debugging, const MatrixXd& df0, IntegerVector& dfc, double& dint, MatrixXd& Dose, double& dose_abs_max, double& dslp, const int fir, const IntegerVector& gmix_term, const double& gmix_theta, int& half_check, const int halfmax, const IntegerVector& KeepConstant, vector<bool>& limit_hit, double& lr, string& modelform, MatrixXd& nonDose, MatrixXd& nonDose_LIN, MatrixXd& nonDose_LOGLIN, MatrixXd& nonDose_PLIN, const int& nthreads, MatrixXd& R, MatrixXd& Rd, MatrixXd& Rdd, MatrixXd& RddR, MatrixXd& RdR, VectorXd& s_weights, const bool single_bool, const bool strata_bool, MatrixXd& T0, MatrixXd& Td0, MatrixXd& Tdd0, MatrixXd& Te, const IntegerVector& term_n, int& term_tot, StringVector& tform, const int totalnum, MatrixXd& TTerm, const int verbose);
RcppExport SEXP _Colossus_Cox_Pois_Log_Loop(SEXP abs_maxSEXP, SEXP basic_boolSEXP, SEXP beta_0SEXP, SEXP beta_aSEXP, SEXP beta_cSEXP, SEXP bound_valSEXP, SEXP cox_boolSEXP, SEXP dbetaSEXP, SEXP debuggingSEXP, SEXP df0SEXP, SEXP dfcSEXP, SEXP dintSEXP, SEXP DoseSEXP, SEXP dose_abs_maxSEXP, SEXP dslpSEXP, SEXP firSEXP, SEXP gmix_termSEXP, SEXP gmix_thetaSEXP, SEXP half_checkSEXP, SEXP halfmaxSEXP, SEXP KeepConstantSEXP, SEXP limit_hitSEXP, SEXP lrSEXP, SEXP modelformSEXP, SEXP nonDoseSEXP, SEXP nonDose_LINSEXP, SEXP nonDose_LOGLINSEXP, SEXP nonDose_PLINSEXP, SEXP nthreadsSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP RddRSEXP, SEXP RdRSEXP, SEXP s_weightsSEXP, SEXP single_boolSEXP, SEXP strata_boolSEXP, SEXP T0SEXP, SEXP Td0SEXP, SEXP Tdd0SEXP, SEXP TeSEXP, SEXP term_nSEXP, SEXP term_totSEXP, SEXP tformSEXP, SEXP totalnumSEXP, SEXP TTermSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double& >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< const bool >::type basic_bool(basic_boolSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type beta_a(beta_aSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type beta_c(beta_cSEXP);
    Rcpp::traits::input_parameter< int& >::type bound_val(bound_valSEXP);
    Rcpp::traits::input_parameter< const bool >::type cox_bool(cox_boolSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type dbeta(dbetaSEXP);
    Rcpp::traits::input_parameter< const bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< double& >::type dint(dintSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< double& >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double& >::type dslp(dslpSEXP);
    Rcpp::traits::input_parameter< const int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gmix_term(gmix_termSEXP);
    Rcpp::traits::input_parameter< const double& >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< int& >::type half_check(half_checkSEXP);
    Rcpp::traits::input_parameter< const int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< vector<bool>& >::type limit_hit(limit_hitSEXP);
    Rcpp::traits::input_parameter< double& >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< string& >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose(nonDoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LIN(nonDose_LINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LOGLIN(nonDose_LOGLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_PLIN(nonDose_PLINSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< VectorXd& >::type s_weights(s_weightsSEXP);
    Rcpp::traits::input_parameter< const bool >::type single_bool(single_boolSEXP);
    Rcpp::traits::input_parameter< const bool >::type strata_bool(strata_boolSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Td0(Td0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Tdd0(Tdd0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Te(TeSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< int& >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const int >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    Cox_Pois_Log_Loop(abs_max, basic_bool, beta_0, beta_a, beta_c, bound_val, cox_bool, dbeta, debugging, df0, dfc, dint, Dose, dose_abs_max, dslp, fir, gmix_term, gmix_theta, half_check, halfmax, KeepConstant, limit_hit, lr, modelform, nonDose, nonDose_LIN, nonDose_LOGLIN, nonDose_PLIN, nthreads, R, Rd, Rdd, RddR, RdR, s_weights, single_bool, strata_bool, T0, Td0, Tdd0, Te, term_n, term_tot, tform, totalnum, TTerm, verbose);
    return R_NilValue;
END_RCPP
}
// PLOT_SURV_STRATA
List PLOT_SURV_STRATA(int reqrdnum, MatrixXd& R, MatrixXd& Rd, NumericVector& a_er, NumericMatrix& df_groups, NumericVector& tu, NumericVector& STRATA_vals, int verbose, bool debugging, int nthreads);
RcppExport SEXP _Colossus_PLOT_SURV_STRATA(SEXP reqrdnumSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP a_erSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP STRATA_valsSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type reqrdnum(reqrdnumSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type a_er(a_erSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(PLOT_SURV_STRATA(reqrdnum, R, Rd, a_er, df_groups, tu, STRATA_vals, verbose, debugging, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// PLOT_SURV
List PLOT_SURV(int reqrdnum, MatrixXd& R, MatrixXd& Rd, NumericVector& a_er, NumericMatrix& df_groups, NumericVector& tu, int verbose, bool debugging, int nthreads);
RcppExport SEXP _Colossus_PLOT_SURV(SEXP reqrdnumSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP a_erSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type reqrdnum(reqrdnumSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type a_er(a_erSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(PLOT_SURV(reqrdnum, R, Rd, a_er, df_groups, tu, verbose, debugging, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// Schoenfeld_Calc
List Schoenfeld_Calc(int ntime, int totalnum, const VectorXd& beta_0, const MatrixXd& df0, const MatrixXd& R, MatrixXd& Lldd_inv, const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, IntegerVector& dfc, int verbose, bool debugging, IntegerVector KeepConstant, int nthreads);
RcppExport SEXP _Colossus_Schoenfeld_Calc(SEXP ntimeSEXP, SEXP totalnumSEXP, SEXP beta_0SEXP, SEXP df0SEXP, SEXP RSEXP, SEXP Lldd_invSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP dfcSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< int >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lldd_inv(Lldd_invSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Schoenfeld_Calc(ntime, totalnum, beta_0, df0, R, Lldd_inv, RiskFail, RiskGroup, dfc, verbose, debugging, KeepConstant, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// Plot_Omnibus
List Plot_Omnibus(IntegerVector term_n, StringVector tform, NumericVector a_n, NumericMatrix& x_all, IntegerVector dfc, int fir, int der_iden, string modelform, double abs_max, double dose_abs_max, NumericMatrix& df_groups, NumericVector& tu, int verbose, bool debugging, IntegerVector KeepConstant, int term_tot, string ties_method, int nthreads, NumericVector& STRATA_vals, const VectorXd& cens_weight, int uniq_v, bool strata_bool, bool basic_bool, bool CR_bool, bool Surv_bool, bool Risk_bool, bool Schoenfeld_bool, bool Risk_Sub_bool, const double gmix_theta, const IntegerVector& gmix_term);
RcppExport SEXP _Colossus_Plot_Omnibus(SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP ties_methodSEXP, SEXP nthreadsSEXP, SEXP STRATA_valsSEXP, SEXP cens_weightSEXP, SEXP uniq_vSEXP, SEXP strata_boolSEXP, SEXP basic_boolSEXP, SEXP CR_boolSEXP, SEXP Surv_boolSEXP, SEXP Risk_boolSEXP, SEXP Schoenfeld_boolSEXP, SEXP Risk_Sub_boolSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< int >::type uniq_v(uniq_vSEXP);
    Rcpp::traits::input_parameter< bool >::type strata_bool(strata_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type basic_bool(basic_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type CR_bool(CR_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type Surv_bool(Surv_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type Risk_bool(Risk_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type Schoenfeld_bool(Schoenfeld_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type Risk_Sub_bool(Risk_Sub_boolSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gmix_term(gmix_termSEXP);
    rcpp_result_gen = Rcpp::wrap(Plot_Omnibus(term_n, tform, a_n, x_all, dfc, fir, der_iden, modelform, abs_max, dose_abs_max, df_groups, tu, verbose, debugging, KeepConstant, term_tot, ties_method, nthreads, STRATA_vals, cens_weight, uniq_v, strata_bool, basic_bool, CR_bool, Surv_bool, Risk_bool, Schoenfeld_bool, Risk_Sub_bool, gmix_theta, gmix_term));
    return rcpp_result_gen;
END_RCPP
}
// Assign_Events_Pois
List Assign_Events_Pois(IntegerVector term_n, StringVector tform, NumericVector a_n, NumericMatrix& x_all, IntegerVector dfc, const MatrixXd& PyrC, const MatrixXd& dfs, int fir, string modelform, int verbose, bool debugging, IntegerVector KeepConstant, int term_tot, int nthreads, const double gmix_theta, const IntegerVector gmix_term, const bool strata_bool);
RcppExport SEXP _Colossus_Assign_Events_Pois(SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP PyrCSEXP, SEXP dfsSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP nthreadsSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP, SEXP strata_boolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type dfs(dfsSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type gmix_term(gmix_termSEXP);
    Rcpp::traits::input_parameter< const bool >::type strata_bool(strata_boolSEXP);
    rcpp_result_gen = Rcpp::wrap(Assign_Events_Pois(term_n, tform, a_n, x_all, dfc, PyrC, dfs, fir, modelform, verbose, debugging, KeepConstant, term_tot, nthreads, gmix_theta, gmix_term, strata_bool));
    return rcpp_result_gen;
END_RCPP
}
// Poisson_Residuals
List Poisson_Residuals(const MatrixXd& PyrC, IntegerVector term_n, StringVector tform, NumericVector a_n, NumericMatrix& x_all, IntegerVector dfc, int fir, int der_iden, string modelform, double abs_max, double dose_abs_max, int verbose, bool debugging, IntegerVector KeepConstant, int term_tot, int nthreads, const MatrixXd& dfs, bool strata_bool, const double gmix_theta, const IntegerVector gmix_term, bool Pearson_bool, bool Deviance_bool);
RcppExport SEXP _Colossus_Poisson_Residuals(SEXP PyrCSEXP, SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP nthreadsSEXP, SEXP dfsSEXP, SEXP strata_boolSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP, SEXP Pearson_boolSEXP, SEXP Deviance_boolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type dfs(dfsSEXP);
    Rcpp::traits::input_parameter< bool >::type strata_bool(strata_boolSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type gmix_term(gmix_termSEXP);
    Rcpp::traits::input_parameter< bool >::type Pearson_bool(Pearson_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type Deviance_bool(Deviance_boolSEXP);
    rcpp_result_gen = Rcpp::wrap(Poisson_Residuals(PyrC, term_n, tform, a_n, x_all, dfc, fir, der_iden, modelform, abs_max, dose_abs_max, verbose, debugging, KeepConstant, term_tot, nthreads, dfs, strata_bool, gmix_theta, gmix_term, Pearson_bool, Deviance_bool));
    return rcpp_result_gen;
END_RCPP
}
// cox_ph_Omnibus_transition
List cox_ph_Omnibus_transition(IntegerVector term_n, StringVector tform, NumericMatrix& a_ns, IntegerVector dfc, NumericMatrix& x_all, int fir, int der_iden, string modelform, List Control, NumericMatrix df_groups, NumericVector tu, IntegerVector KeepConstant, int term_tot, NumericVector STRATA_vals, NumericVector cens_vec, List model_control, NumericMatrix Cons_Mat, NumericVector Cons_Vec);
RcppExport SEXP _Colossus_cox_ph_Omnibus_transition(SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nsSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP STRATA_valsSEXP, SEXP cens_vecSEXP, SEXP model_controlSEXP, SEXP Cons_MatSEXP, SEXP Cons_VecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type a_ns(a_nsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cens_vec(cens_vecSEXP);
    Rcpp::traits::input_parameter< List >::type model_control(model_controlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Cons_Mat(Cons_MatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cons_Vec(Cons_VecSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_ph_Omnibus_transition(term_n, tform, a_ns, dfc, x_all, fir, der_iden, modelform, Control, df_groups, tu, KeepConstant, term_tot, STRATA_vals, cens_vec, model_control, Cons_Mat, Cons_Vec));
    return rcpp_result_gen;
END_RCPP
}
// pois_Omnibus_transition
List pois_Omnibus_transition(NumericMatrix dfe, IntegerVector term_n, StringVector tform, NumericMatrix& a_ns, IntegerVector dfc, NumericMatrix& x_all, int fir, int der_iden, string modelform, List Control, IntegerVector KeepConstant, int term_tot, NumericMatrix df0, List model_control, NumericMatrix Cons_Mat, NumericVector Cons_Vec);
RcppExport SEXP _Colossus_pois_Omnibus_transition(SEXP dfeSEXP, SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nsSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP df0SEXP, SEXP model_controlSEXP, SEXP Cons_MatSEXP, SEXP Cons_VecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dfe(dfeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type a_ns(a_nsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< List >::type model_control(model_controlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Cons_Mat(Cons_MatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cons_Vec(Cons_VecSEXP);
    rcpp_result_gen = Rcpp::wrap(pois_Omnibus_transition(dfe, term_n, tform, a_ns, dfc, x_all, fir, der_iden, modelform, Control, KeepConstant, term_tot, df0, model_control, Cons_Mat, Cons_Vec));
    return rcpp_result_gen;
END_RCPP
}
// Assigned_Event_Poisson_transition
List Assigned_Event_Poisson_transition(NumericMatrix dfe, NumericMatrix df0, IntegerVector term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix& x_all, int fir, int der_iden, string modelform, List Control, IntegerVector KeepConstant, int term_tot, List model_control);
RcppExport SEXP _Colossus_Assigned_Event_Poisson_transition(SEXP dfeSEXP, SEXP df0SEXP, SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP model_controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dfe(dfeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< List >::type model_control(model_controlSEXP);
    rcpp_result_gen = Rcpp::wrap(Assigned_Event_Poisson_transition(dfe, df0, term_n, tform, a_n, dfc, x_all, fir, der_iden, modelform, Control, KeepConstant, term_tot, model_control));
    return rcpp_result_gen;
END_RCPP
}
// Plot_Omnibus_transition
List Plot_Omnibus_transition(IntegerVector term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix& x_all, int fir, int der_iden, string modelform, List Control, NumericMatrix df_groups, NumericVector tu, IntegerVector KeepConstant, int term_tot, NumericVector STRATA_vals, NumericVector cens_vec, List model_control);
RcppExport SEXP _Colossus_Plot_Omnibus_transition(SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP STRATA_valsSEXP, SEXP cens_vecSEXP, SEXP model_controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cens_vec(cens_vecSEXP);
    Rcpp::traits::input_parameter< List >::type model_control(model_controlSEXP);
    rcpp_result_gen = Rcpp::wrap(Plot_Omnibus_transition(term_n, tform, a_n, dfc, x_all, fir, der_iden, modelform, Control, df_groups, tu, KeepConstant, term_tot, STRATA_vals, cens_vec, model_control));
    return rcpp_result_gen;
END_RCPP
}
// Write_Time_Dep
void Write_Time_Dep(const NumericMatrix df0_Times, const NumericMatrix df0_dep, const NumericMatrix df0_const, const NumericVector df0_event, double dt, string filename, StringVector tform_tdep, NumericVector tu, bool iscox, int nthreads);
RcppExport SEXP _Colossus_Write_Time_Dep(SEXP df0_TimesSEXP, SEXP df0_depSEXP, SEXP df0_constSEXP, SEXP df0_eventSEXP, SEXP dtSEXP, SEXP filenameSEXP, SEXP tform_tdepSEXP, SEXP tuSEXP, SEXP iscoxSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type df0_Times(df0_TimesSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type df0_dep(df0_depSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type df0_const(df0_constSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type df0_event(df0_eventSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform_tdep(tform_tdepSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< bool >::type iscox(iscoxSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Write_Time_Dep(df0_Times, df0_dep, df0_const, df0_event, dt, filename, tform_tdep, tu, iscox, nthreads);
    return R_NilValue;
END_RCPP
}
// Gen_Fac_Par
NumericMatrix Gen_Fac_Par(const NumericMatrix df0, const NumericVector vals, const NumericVector cols, const int nthreads);
RcppExport SEXP _Colossus_Gen_Fac_Par(SEXP df0SEXP, SEXP valsSEXP, SEXP colsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Gen_Fac_Par(df0, vals, cols, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// risk_check_transition
bool risk_check_transition(IntegerVector term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix& x_all, int fir, string modelform, List Control, List model_control, IntegerVector KeepConstant, int term_tot);
RcppExport SEXP _Colossus_risk_check_transition(SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP model_controlSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< List >::type model_control(model_controlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    rcpp_result_gen = Rcpp::wrap(risk_check_transition(term_n, tform, a_n, dfc, x_all, fir, modelform, Control, model_control, KeepConstant, term_tot));
    return rcpp_result_gen;
END_RCPP
}
// Gen_Strat_Weight
void Gen_Strat_Weight(string modelform, const MatrixXd& dfs, const MatrixXd& PyrC, VectorXd& s_weights, const int nthreads, const StringVector& tform, const IntegerVector& term_n, const int& term_tot);
RcppExport SEXP _Colossus_Gen_Strat_Weight(SEXP modelformSEXP, SEXP dfsSEXP, SEXP PyrCSEXP, SEXP s_weightsSEXP, SEXP nthreadsSEXP, SEXP tformSEXP, SEXP term_nSEXP, SEXP term_totSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type dfs(dfsSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< VectorXd& >::type s_weights(s_weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< const int& >::type term_tot(term_totSEXP);
    Gen_Strat_Weight(modelform, dfs, PyrC, s_weights, nthreads, tform, term_n, term_tot);
    return R_NilValue;
END_RCPP
}
// OMP_Check
bool OMP_Check();
RcppExport SEXP _Colossus_OMP_Check() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(OMP_Check());
    return rcpp_result_gen;
END_RCPP
}
// cox_ph_Omnibus_Bounds_transition
List cox_ph_Omnibus_Bounds_transition(IntegerVector term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix& x_all, int fir, string modelform, List Control, NumericMatrix df_groups, NumericVector tu, IntegerVector KeepConstant, int term_tot, NumericVector STRATA_vals, NumericVector cens_vec, List model_control, NumericMatrix Cons_Mat, NumericVector Cons_Vec);
RcppExport SEXP _Colossus_cox_ph_Omnibus_Bounds_transition(SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP STRATA_valsSEXP, SEXP cens_vecSEXP, SEXP model_controlSEXP, SEXP Cons_MatSEXP, SEXP Cons_VecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cens_vec(cens_vecSEXP);
    Rcpp::traits::input_parameter< List >::type model_control(model_controlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Cons_Mat(Cons_MatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cons_Vec(Cons_VecSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_ph_Omnibus_Bounds_transition(term_n, tform, a_n, dfc, x_all, fir, modelform, Control, df_groups, tu, KeepConstant, term_tot, STRATA_vals, cens_vec, model_control, Cons_Mat, Cons_Vec));
    return rcpp_result_gen;
END_RCPP
}
// pois_Omnibus_Bounds_transition
List pois_Omnibus_Bounds_transition(NumericMatrix dfe, IntegerVector term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix& x_all, int fir, string modelform, List Control, IntegerVector KeepConstant, int term_tot, NumericMatrix df0, List model_control, NumericMatrix Cons_Mat, NumericVector Cons_Vec);
RcppExport SEXP _Colossus_pois_Omnibus_Bounds_transition(SEXP dfeSEXP, SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP df0SEXP, SEXP model_controlSEXP, SEXP Cons_MatSEXP, SEXP Cons_VecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dfe(dfeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< List >::type model_control(model_controlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Cons_Mat(Cons_MatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cons_Vec(Cons_VecSEXP);
    rcpp_result_gen = Rcpp::wrap(pois_Omnibus_Bounds_transition(dfe, term_n, tform, a_n, dfc, x_all, fir, modelform, Control, KeepConstant, term_tot, df0, model_control, Cons_Mat, Cons_Vec));
    return rcpp_result_gen;
END_RCPP
}
// pois_Residual_transition
List pois_Residual_transition(NumericMatrix dfe, IntegerVector term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix& x_all, int fir, int der_iden, string modelform, List Control, IntegerVector KeepConstant, int term_tot, NumericMatrix df0, List model_control);
RcppExport SEXP _Colossus_pois_Residual_transition(SEXP dfeSEXP, SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP df0SEXP, SEXP model_controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dfe(dfeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< List >::type model_control(model_controlSEXP);
    rcpp_result_gen = Rcpp::wrap(pois_Residual_transition(dfe, term_n, tform, a_n, dfc, x_all, fir, der_iden, modelform, Control, KeepConstant, term_tot, df0, model_control));
    return rcpp_result_gen;
END_RCPP
}
// cox_ph_multidose_Omnibus_transition
List cox_ph_multidose_Omnibus_transition(IntegerVector term_n, StringVector tform, NumericVector a_n, IntegerMatrix dose_cols, IntegerVector dose_index, IntegerVector dfc, NumericMatrix& x_all, int fir, int der_iden, string modelform, List Control, NumericMatrix df_groups, NumericVector tu, IntegerVector KeepConstant, int term_tot, NumericVector STRATA_vals, NumericVector cens_vec, List model_control, NumericMatrix Cons_Mat, NumericVector Cons_Vec);
RcppExport SEXP _Colossus_cox_ph_multidose_Omnibus_transition(SEXP term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dose_colsSEXP, SEXP dose_indexSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP STRATA_valsSEXP, SEXP cens_vecSEXP, SEXP model_controlSEXP, SEXP Cons_MatSEXP, SEXP Cons_VecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type dose_cols(dose_colsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dose_index(dose_indexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cens_vec(cens_vecSEXP);
    Rcpp::traits::input_parameter< List >::type model_control(model_controlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Cons_Mat(Cons_MatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cons_Vec(Cons_VecSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_ph_multidose_Omnibus_transition(term_n, tform, a_n, dose_cols, dose_index, dfc, x_all, fir, der_iden, modelform, Control, df_groups, tu, KeepConstant, term_tot, STRATA_vals, cens_vec, model_control, Cons_Mat, Cons_Vec));
    return rcpp_result_gen;
END_RCPP
}
// Intercept_Bound
void Intercept_Bound(const int& nthreads, const int& totalnum, const VectorXd& beta_0, vector<double>& dbeta, const IntegerVector& dfc, const MatrixXd& df0, const IntegerVector& KeepConstant, bool debugging, const StringVector& tform);
RcppExport SEXP _Colossus_Intercept_Bound(SEXP nthreadsSEXP, SEXP totalnumSEXP, SEXP beta_0SEXP, SEXP dbetaSEXP, SEXP dfcSEXP, SEXP df0SEXP, SEXP KeepConstantSEXP, SEXP debuggingSEXP, SEXP tformSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type dbeta(dbetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Intercept_Bound(nthreads, totalnum, beta_0, dbeta, dfc, df0, KeepConstant, debugging, tform);
    return R_NilValue;
END_RCPP
}
// Calc_Change_Cons
void Calc_Change_Cons(const MatrixXd& Lin_Sys, const VectorXd& Lin_Res, const VectorXd& beta_0, const int& nthreads, const int& totalnum, const int& der_iden, const double& dose_abs_max, const double& lr, const double& abs_max, const vector<double>& Ll, const vector<double>& Lld, const vector<double>& Lldd, vector<double>& dbeta, const StringVector& tform, const double& dint, const double& dslp, IntegerVector KeepConstant, bool debugging);
RcppExport SEXP _Colossus_Calc_Change_Cons(SEXP Lin_SysSEXP, SEXP Lin_ResSEXP, SEXP beta_0SEXP, SEXP nthreadsSEXP, SEXP totalnumSEXP, SEXP der_idenSEXP, SEXP dose_abs_maxSEXP, SEXP lrSEXP, SEXP abs_maxSEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP dbetaSEXP, SEXP tformSEXP, SEXP dintSEXP, SEXP dslpSEXP, SEXP KeepConstantSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lin_Sys(Lin_SysSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type Lin_Res(Lin_ResSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< const double& >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< const double& >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type dbeta(dbetaSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const double& >::type dint(dintSEXP);
    Rcpp::traits::input_parameter< const double& >::type dslp(dslpSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Calc_Change_Cons(Lin_Sys, Lin_Res, beta_0, nthreads, totalnum, der_iden, dose_abs_max, lr, abs_max, Ll, Lld, Lldd, dbeta, tform, dint, dslp, KeepConstant, debugging);
    return R_NilValue;
END_RCPP
}
// Calc_Change
void Calc_Change(const int& double_step, const int& nthreads, const int& totalnum, const int& der_iden, const double& dose_abs_max, const double& lr, const double& abs_max, const vector<double>& Ll, const vector<double>& Lld, const vector<double>& Lldd, vector<double>& dbeta, const bool change_all, const StringVector& tform, const double& dint, const double& dslp, IntegerVector KeepConstant, bool debugging);
RcppExport SEXP _Colossus_Calc_Change(SEXP double_stepSEXP, SEXP nthreadsSEXP, SEXP totalnumSEXP, SEXP der_idenSEXP, SEXP dose_abs_maxSEXP, SEXP lrSEXP, SEXP abs_maxSEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP dbetaSEXP, SEXP change_allSEXP, SEXP tformSEXP, SEXP dintSEXP, SEXP dslpSEXP, SEXP KeepConstantSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type double_step(double_stepSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< const double& >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< const double& >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type dbeta(dbetaSEXP);
    Rcpp::traits::input_parameter< const bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const double& >::type dint(dintSEXP);
    Rcpp::traits::input_parameter< const double& >::type dslp(dslpSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Calc_Change(double_step, nthreads, totalnum, der_iden, dose_abs_max, lr, abs_max, Ll, Lld, Lldd, dbeta, change_all, tform, dint, dslp, KeepConstant, debugging);
    return R_NilValue;
END_RCPP
}
// Calc_Change_Basic
void Calc_Change_Basic(const int& double_step, const int& nthreads, const int& totalnum, const int& der_iden, const double& lr, const double& abs_max, const vector<double>& Ll, const vector<double>& Lld, const vector<double>& Lldd, vector<double>& dbeta, const bool change_all, IntegerVector KeepConstant, bool debugging);
RcppExport SEXP _Colossus_Calc_Change_Basic(SEXP double_stepSEXP, SEXP nthreadsSEXP, SEXP totalnumSEXP, SEXP der_idenSEXP, SEXP lrSEXP, SEXP abs_maxSEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP dbetaSEXP, SEXP change_allSEXP, SEXP KeepConstantSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type double_step(double_stepSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< const double& >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< const double& >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type dbeta(dbetaSEXP);
    Rcpp::traits::input_parameter< const bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Calc_Change_Basic(double_step, nthreads, totalnum, der_iden, lr, abs_max, Ll, Lld, Lldd, dbeta, change_all, KeepConstant, debugging);
    return R_NilValue;
END_RCPP
}
// Log_Bound
void Log_Bound(double& deriv_max, const MatrixXd& Lldd_mat, const VectorXd& Lld_vec, const double& Lstar, const double& qchi, const double& L0, const int& para_number, const int& nthreads, const int& totalnum, const int& reqrdnum, IntegerVector KeepConstant, const int& term_tot, const int& step, vector<double>& dbeta, const VectorXd& beta_0, bool upper, bool& trouble, int verbose, double mult);
RcppExport SEXP _Colossus_Log_Bound(SEXP deriv_maxSEXP, SEXP Lldd_matSEXP, SEXP Lld_vecSEXP, SEXP LstarSEXP, SEXP qchiSEXP, SEXP L0SEXP, SEXP para_numberSEXP, SEXP nthreadsSEXP, SEXP totalnumSEXP, SEXP reqrdnumSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP stepSEXP, SEXP dbetaSEXP, SEXP beta_0SEXP, SEXP upperSEXP, SEXP troubleSEXP, SEXP verboseSEXP, SEXP multSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double& >::type deriv_max(deriv_maxSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lldd_mat(Lldd_matSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type Lld_vec(Lld_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type Lstar(LstarSEXP);
    Rcpp::traits::input_parameter< const double& >::type qchi(qchiSEXP);
    Rcpp::traits::input_parameter< const double& >::type L0(L0SEXP);
    Rcpp::traits::input_parameter< const int& >::type para_number(para_numberSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type reqrdnum(reqrdnumSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< const int& >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< const int& >::type step(stepSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type dbeta(dbetaSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool& >::type trouble(troubleSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type mult(multSEXP);
    Log_Bound(deriv_max, Lldd_mat, Lld_vec, Lstar, qchi, L0, para_number, nthreads, totalnum, reqrdnum, KeepConstant, term_tot, step, dbeta, beta_0, upper, trouble, verbose, mult);
    return R_NilValue;
END_RCPP
}
// Calc_Change_trouble
void Calc_Change_trouble(const int& para_number, const int& nthreads, const int& totalnum, const double& dose_abs_max, const double& lr, const double& abs_max, const vector<double>& Ll, const vector<double>& Lld, const vector<double>& Lldd, vector<double>& dbeta, const StringVector& tform, const double& dint, const double& dslp, IntegerVector KeepConstant_trouble, bool debugging);
RcppExport SEXP _Colossus_Calc_Change_trouble(SEXP para_numberSEXP, SEXP nthreadsSEXP, SEXP totalnumSEXP, SEXP dose_abs_maxSEXP, SEXP lrSEXP, SEXP abs_maxSEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP dbetaSEXP, SEXP tformSEXP, SEXP dintSEXP, SEXP dslpSEXP, SEXP KeepConstant_troubleSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type para_number(para_numberSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const double& >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< const double& >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type dbeta(dbetaSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const double& >::type dint(dintSEXP);
    Rcpp::traits::input_parameter< const double& >::type dslp(dslpSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant_trouble(KeepConstant_troubleSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Calc_Change_trouble(para_number, nthreads, totalnum, dose_abs_max, lr, abs_max, Ll, Lld, Lldd, dbeta, tform, dint, dslp, KeepConstant_trouble, debugging);
    return R_NilValue;
END_RCPP
}
// Make_subterms
void Make_subterms(const int& totalnum, const IntegerVector& term_n, const StringVector& tform, const IntegerVector& dfc, const int& fir, MatrixXd& T0, MatrixXd& Td0, MatrixXd& Tdd0, MatrixXd& Dose, MatrixXd& nonDose, MatrixXd& TTerm, MatrixXd& nonDose_LIN, MatrixXd& nonDose_PLIN, MatrixXd& nonDose_LOGLIN, const VectorXd& beta_0, const MatrixXd& df0, const double& dint, const double& dslp, const int& nthreads, bool debugging, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Make_subterms(SEXP totalnumSEXP, SEXP term_nSEXP, SEXP tformSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP T0SEXP, SEXP Td0SEXP, SEXP Tdd0SEXP, SEXP DoseSEXP, SEXP nonDoseSEXP, SEXP TTermSEXP, SEXP nonDose_LINSEXP, SEXP nonDose_PLINSEXP, SEXP nonDose_LOGLINSEXP, SEXP beta_0SEXP, SEXP df0SEXP, SEXP dintSEXP, SEXP dslpSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Td0(Td0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Tdd0(Tdd0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose(nonDoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LIN(nonDose_LINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_PLIN(nonDose_PLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LOGLIN(nonDose_LOGLINSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dint(dintSEXP);
    Rcpp::traits::input_parameter< const double& >::type dslp(dslpSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Make_subterms(totalnum, term_n, tform, dfc, fir, T0, Td0, Tdd0, Dose, nonDose, TTerm, nonDose_LIN, nonDose_PLIN, nonDose_LOGLIN, beta_0, df0, dint, dslp, nthreads, debugging, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Make_subterms_Single
void Make_subterms_Single(const int& totalnum, const IntegerVector& term_n, const StringVector& tform, const IntegerVector& dfc, const int& fir, MatrixXd& T0, MatrixXd& Dose, MatrixXd& nonDose, MatrixXd& TTerm, MatrixXd& nonDose_LIN, MatrixXd& nonDose_PLIN, MatrixXd& nonDose_LOGLIN, const VectorXd& beta_0, const MatrixXd& df0, const int& nthreads, bool debugging, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Make_subterms_Single(SEXP totalnumSEXP, SEXP term_nSEXP, SEXP tformSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP T0SEXP, SEXP DoseSEXP, SEXP nonDoseSEXP, SEXP TTermSEXP, SEXP nonDose_LINSEXP, SEXP nonDose_PLINSEXP, SEXP nonDose_LOGLINSEXP, SEXP beta_0SEXP, SEXP df0SEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose(nonDoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LIN(nonDose_LINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_PLIN(nonDose_PLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LOGLIN(nonDose_LOGLINSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Make_subterms_Single(totalnum, term_n, tform, dfc, fir, T0, Dose, nonDose, TTerm, nonDose_LIN, nonDose_PLIN, nonDose_LOGLIN, beta_0, df0, nthreads, debugging, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Make_subterms_Basic
void Make_subterms_Basic(const int& totalnum, const IntegerVector& dfc, MatrixXd& T0, const VectorXd& beta_0, const MatrixXd& df0, const int& nthreads, bool debugging);
RcppExport SEXP _Colossus_Make_subterms_Basic(SEXP totalnumSEXP, SEXP dfcSEXP, SEXP T0SEXP, SEXP beta_0SEXP, SEXP df0SEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Make_subterms_Basic(totalnum, dfc, T0, beta_0, df0, nthreads, debugging);
    return R_NilValue;
END_RCPP
}
// Make_Risks
void Make_Risks(string modelform, const StringVector& tform, const IntegerVector& term_n, const int& totalnum, const int& fir, const MatrixXd& T0, const MatrixXd& Td0, const MatrixXd& Tdd0, MatrixXd& Te, MatrixXd& R, MatrixXd& Rd, MatrixXd& Rdd, MatrixXd& Dose, MatrixXd& nonDose, MatrixXd& TTerm, MatrixXd& nonDose_LIN, MatrixXd& nonDose_PLIN, MatrixXd& nonDose_LOGLIN, MatrixXd& RdR, MatrixXd& RddR, const int& nthreads, bool debugging, const IntegerVector& KeepConstant, const double gmix_theta, const IntegerVector& gmix_term);
RcppExport SEXP _Colossus_Make_Risks(SEXP modelformSEXP, SEXP tformSEXP, SEXP term_nSEXP, SEXP totalnumSEXP, SEXP firSEXP, SEXP T0SEXP, SEXP Td0SEXP, SEXP Tdd0SEXP, SEXP TeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP DoseSEXP, SEXP nonDoseSEXP, SEXP TTermSEXP, SEXP nonDose_LINSEXP, SEXP nonDose_PLINSEXP, SEXP nonDose_LOGLINSEXP, SEXP RdRSEXP, SEXP RddRSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Td0(Td0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Tdd0(Tdd0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Te(TeSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose(nonDoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LIN(nonDose_LINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_PLIN(nonDose_PLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LOGLIN(nonDose_LOGLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gmix_term(gmix_termSEXP);
    Make_Risks(modelform, tform, term_n, totalnum, fir, T0, Td0, Tdd0, Te, R, Rd, Rdd, Dose, nonDose, TTerm, nonDose_LIN, nonDose_PLIN, nonDose_LOGLIN, RdR, RddR, nthreads, debugging, KeepConstant, gmix_theta, gmix_term);
    return R_NilValue;
END_RCPP
}
// Make_Risks_Weighted
void Make_Risks_Weighted(string modelform, const StringVector& tform, const IntegerVector& term_n, const int& totalnum, const int& fir, const MatrixXd& s_weights, const MatrixXd& T0, const MatrixXd& Td0, const MatrixXd& Tdd0, MatrixXd& Te, MatrixXd& R, MatrixXd& Rd, MatrixXd& Rdd, MatrixXd& Dose, MatrixXd& nonDose, MatrixXd& TTerm, MatrixXd& nonDose_LIN, MatrixXd& nonDose_PLIN, MatrixXd& nonDose_LOGLIN, MatrixXd& RdR, MatrixXd& RddR, const int& nthreads, bool debugging, const IntegerVector& KeepConstant, const double gmix_theta, const IntegerVector& gmix_term);
RcppExport SEXP _Colossus_Make_Risks_Weighted(SEXP modelformSEXP, SEXP tformSEXP, SEXP term_nSEXP, SEXP totalnumSEXP, SEXP firSEXP, SEXP s_weightsSEXP, SEXP T0SEXP, SEXP Td0SEXP, SEXP Tdd0SEXP, SEXP TeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP DoseSEXP, SEXP nonDoseSEXP, SEXP TTermSEXP, SEXP nonDose_LINSEXP, SEXP nonDose_PLINSEXP, SEXP nonDose_LOGLINSEXP, SEXP RdRSEXP, SEXP RddRSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type s_weights(s_weightsSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Td0(Td0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Tdd0(Tdd0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Te(TeSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose(nonDoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LIN(nonDose_LINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_PLIN(nonDose_PLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LOGLIN(nonDose_LOGLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gmix_term(gmix_termSEXP);
    Make_Risks_Weighted(modelform, tform, term_n, totalnum, fir, s_weights, T0, Td0, Tdd0, Te, R, Rd, Rdd, Dose, nonDose, TTerm, nonDose_LIN, nonDose_PLIN, nonDose_LOGLIN, RdR, RddR, nthreads, debugging, KeepConstant, gmix_theta, gmix_term);
    return R_NilValue;
END_RCPP
}
// Make_Risks_Weighted_Single
void Make_Risks_Weighted_Single(string modelform, const StringVector& tform, const IntegerVector& term_n, const int& totalnum, const int& fir, const MatrixXd& s_weights, const MatrixXd& T0, MatrixXd& Te, MatrixXd& R, MatrixXd& Dose, MatrixXd& nonDose, MatrixXd& TTerm, MatrixXd& nonDose_LIN, MatrixXd& nonDose_PLIN, MatrixXd& nonDose_LOGLIN, const int& nthreads, bool debugging, const IntegerVector& KeepConstant, const double gmix_theta, const IntegerVector& gmix_term);
RcppExport SEXP _Colossus_Make_Risks_Weighted_Single(SEXP modelformSEXP, SEXP tformSEXP, SEXP term_nSEXP, SEXP totalnumSEXP, SEXP firSEXP, SEXP s_weightsSEXP, SEXP T0SEXP, SEXP TeSEXP, SEXP RSEXP, SEXP DoseSEXP, SEXP nonDoseSEXP, SEXP TTermSEXP, SEXP nonDose_LINSEXP, SEXP nonDose_PLINSEXP, SEXP nonDose_LOGLINSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type s_weights(s_weightsSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Te(TeSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose(nonDoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LIN(nonDose_LINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_PLIN(nonDose_PLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LOGLIN(nonDose_LOGLINSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gmix_term(gmix_termSEXP);
    Make_Risks_Weighted_Single(modelform, tform, term_n, totalnum, fir, s_weights, T0, Te, R, Dose, nonDose, TTerm, nonDose_LIN, nonDose_PLIN, nonDose_LOGLIN, nthreads, debugging, KeepConstant, gmix_theta, gmix_term);
    return R_NilValue;
END_RCPP
}
// Make_Risks_Single
void Make_Risks_Single(string modelform, const StringVector& tform, const IntegerVector& term_n, const int& totalnum, const int& fir, const MatrixXd& T0, MatrixXd& Te, MatrixXd& R, MatrixXd& Dose, MatrixXd& nonDose, MatrixXd& TTerm, MatrixXd& nonDose_LIN, MatrixXd& nonDose_PLIN, MatrixXd& nonDose_LOGLIN, const int& nthreads, bool debugging, const IntegerVector& KeepConstant, const double gmix_theta, const IntegerVector& gmix_term);
RcppExport SEXP _Colossus_Make_Risks_Single(SEXP modelformSEXP, SEXP tformSEXP, SEXP term_nSEXP, SEXP totalnumSEXP, SEXP firSEXP, SEXP T0SEXP, SEXP TeSEXP, SEXP RSEXP, SEXP DoseSEXP, SEXP nonDoseSEXP, SEXP TTermSEXP, SEXP nonDose_LINSEXP, SEXP nonDose_PLINSEXP, SEXP nonDose_LOGLINSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP gmix_thetaSEXP, SEXP gmix_termSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type term_n(term_nSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Te(TeSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose(nonDoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LIN(nonDose_LINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_PLIN(nonDose_PLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LOGLIN(nonDose_LOGLINSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< const double >::type gmix_theta(gmix_thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gmix_term(gmix_termSEXP);
    Make_Risks_Single(modelform, tform, term_n, totalnum, fir, T0, Te, R, Dose, nonDose, TTerm, nonDose_LIN, nonDose_PLIN, nonDose_LOGLIN, nthreads, debugging, KeepConstant, gmix_theta, gmix_term);
    return R_NilValue;
END_RCPP
}
// Make_Risks_Basic
void Make_Risks_Basic(const int& totalnum, const MatrixXd& T0, MatrixXd& R, MatrixXd& Rd, MatrixXd& Rdd, MatrixXd& RdR, const int& nthreads, bool debugging, const MatrixXd& df0, const IntegerVector& dfc, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Make_Risks_Basic(SEXP totalnumSEXP, SEXP T0SEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP RdRSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP df0SEXP, SEXP dfcSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Make_Risks_Basic(totalnum, T0, R, Rd, Rdd, RdR, nthreads, debugging, df0, dfc, KeepConstant);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Colossus_Make_Groups", (DL_FUNC) &_Colossus_Make_Groups, 7},
    {"_Colossus_Make_Groups_CR", (DL_FUNC) &_Colossus_Make_Groups_CR, 8},
    {"_Colossus_Make_Groups_STRATA", (DL_FUNC) &_Colossus_Make_Groups_STRATA, 8},
    {"_Colossus_Make_Groups_STRATA_CR", (DL_FUNC) &_Colossus_Make_Groups_STRATA_CR, 9},
    {"_Colossus_Calculate_Sides", (DL_FUNC) &_Colossus_Calculate_Sides, 16},
    {"_Colossus_Calculate_Sides_CR", (DL_FUNC) &_Colossus_Calculate_Sides_CR, 17},
    {"_Colossus_Calculate_Sides_CR_SINGLE", (DL_FUNC) &_Colossus_Calculate_Sides_CR_SINGLE, 11},
    {"_Colossus_Calculate_Sides_Single", (DL_FUNC) &_Colossus_Calculate_Sides_Single, 9},
    {"_Colossus_Calculate_Sides_STRATA", (DL_FUNC) &_Colossus_Calculate_Sides_STRATA, 17},
    {"_Colossus_Calculate_Sides_STRATA_Single", (DL_FUNC) &_Colossus_Calculate_Sides_STRATA_Single, 11},
    {"_Colossus_Calculate_Sides_STRATA_CR", (DL_FUNC) &_Colossus_Calculate_Sides_STRATA_CR, 18},
    {"_Colossus_Calculate_Sides_STRATA_Single_CR", (DL_FUNC) &_Colossus_Calculate_Sides_STRATA_Single_CR, 12},
    {"_Colossus_Calc_LogLik", (DL_FUNC) &_Colossus_Calc_LogLik, 22},
    {"_Colossus_Calc_LogLik_Basic", (DL_FUNC) &_Colossus_Calc_LogLik_Basic, 21},
    {"_Colossus_Calc_LogLik_Basic_Single", (DL_FUNC) &_Colossus_Calc_LogLik_Basic_Single, 12},
    {"_Colossus_Calc_LogLik_Single", (DL_FUNC) &_Colossus_Calc_LogLik_Single, 11},
    {"_Colossus_Calc_LogLik_STRATA", (DL_FUNC) &_Colossus_Calc_LogLik_STRATA, 23},
    {"_Colossus_Calc_LogLik_STRATA_SINGLE", (DL_FUNC) &_Colossus_Calc_LogLik_STRATA_SINGLE, 13},
    {"_Colossus_Calc_LogLik_STRATA_BASIC", (DL_FUNC) &_Colossus_Calc_LogLik_STRATA_BASIC, 22},
    {"_Colossus_Calc_LogLik_STRATA_BASIC_SINGLE", (DL_FUNC) &_Colossus_Calc_LogLik_STRATA_BASIC_SINGLE, 13},
    {"_Colossus_Poisson_LogLik", (DL_FUNC) &_Colossus_Poisson_LogLik, 13},
    {"_Colossus_Poisson_LogLik_Single", (DL_FUNC) &_Colossus_Poisson_LogLik_Single, 6},
    {"_Colossus_Calculate_Null_Sides", (DL_FUNC) &_Colossus_Calculate_Null_Sides, 7},
    {"_Colossus_Calc_Null_LogLik", (DL_FUNC) &_Colossus_Calc_Null_LogLik, 9},
    {"_Colossus_Calculate_Null_Sides_STRATA", (DL_FUNC) &_Colossus_Calculate_Null_Sides_STRATA, 8},
    {"_Colossus_Calc_Null_LogLik_STRATA", (DL_FUNC) &_Colossus_Calc_Null_LogLik_STRATA, 10},
    {"_Colossus_Check_Risk", (DL_FUNC) &_Colossus_Check_Risk, 14},
    {"_Colossus_LogLik_Cox_PH_Omnibus", (DL_FUNC) &_Colossus_LogLik_Cox_PH_Omnibus, 38},
    {"_Colossus_LogLik_Pois_Omnibus", (DL_FUNC) &_Colossus_LogLik_Pois_Omnibus, 32},
    {"_Colossus_LogLik_Cox_PH_Omnibus_Log_Bound", (DL_FUNC) &_Colossus_LogLik_Cox_PH_Omnibus_Log_Bound, 39},
    {"_Colossus_LogLik_Cox_PH_Omnibus_Log_Bound_Search", (DL_FUNC) &_Colossus_LogLik_Cox_PH_Omnibus_Log_Bound_Search, 39},
    {"_Colossus_LogLik_Poisson_Omnibus_Log_Bound", (DL_FUNC) &_Colossus_LogLik_Poisson_Omnibus_Log_Bound, 33},
    {"_Colossus_LogLik_Poisson_Omnibus_Log_Bound_Search", (DL_FUNC) &_Colossus_LogLik_Poisson_Omnibus_Log_Bound_Search, 33},
    {"_Colossus_LogLik_Cox_PH_Multidose_Omnibus", (DL_FUNC) &_Colossus_LogLik_Cox_PH_Multidose_Omnibus, 39},
    {"_Colossus_Cox_Refresh_R_TERM", (DL_FUNC) &_Colossus_Cox_Refresh_R_TERM, 25},
    {"_Colossus_Cox_Refresh_R_SIDES", (DL_FUNC) &_Colossus_Cox_Refresh_R_SIDES, 11},
    {"_Colossus_Cox_Term_Risk_Calc", (DL_FUNC) &_Colossus_Cox_Term_Risk_Calc, 34},
    {"_Colossus_Cox_Side_LL_Calc", (DL_FUNC) &_Colossus_Cox_Side_LL_Calc, 34},
    {"_Colossus_Pois_Term_Risk_Calc", (DL_FUNC) &_Colossus_Pois_Term_Risk_Calc, 35},
    {"_Colossus_Pois_Dev_LL_Calc", (DL_FUNC) &_Colossus_Pois_Dev_LL_Calc, 21},
    {"_Colossus_Cox_Pois_Check_Continue", (DL_FUNC) &_Colossus_Cox_Pois_Check_Continue, 50},
    {"_Colossus_Cox_Pois_Log_Loop", (DL_FUNC) &_Colossus_Cox_Pois_Log_Loop, 47},
    {"_Colossus_PLOT_SURV_STRATA", (DL_FUNC) &_Colossus_PLOT_SURV_STRATA, 10},
    {"_Colossus_PLOT_SURV", (DL_FUNC) &_Colossus_PLOT_SURV, 9},
    {"_Colossus_Schoenfeld_Calc", (DL_FUNC) &_Colossus_Schoenfeld_Calc, 13},
    {"_Colossus_Plot_Omnibus", (DL_FUNC) &_Colossus_Plot_Omnibus, 30},
    {"_Colossus_Assign_Events_Pois", (DL_FUNC) &_Colossus_Assign_Events_Pois, 17},
    {"_Colossus_Poisson_Residuals", (DL_FUNC) &_Colossus_Poisson_Residuals, 22},
    {"_Colossus_cox_ph_Omnibus_transition", (DL_FUNC) &_Colossus_cox_ph_Omnibus_transition, 18},
    {"_Colossus_pois_Omnibus_transition", (DL_FUNC) &_Colossus_pois_Omnibus_transition, 16},
    {"_Colossus_Assigned_Event_Poisson_transition", (DL_FUNC) &_Colossus_Assigned_Event_Poisson_transition, 14},
    {"_Colossus_Plot_Omnibus_transition", (DL_FUNC) &_Colossus_Plot_Omnibus_transition, 16},
    {"_Colossus_Write_Time_Dep", (DL_FUNC) &_Colossus_Write_Time_Dep, 10},
    {"_Colossus_Gen_Fac_Par", (DL_FUNC) &_Colossus_Gen_Fac_Par, 4},
    {"_Colossus_risk_check_transition", (DL_FUNC) &_Colossus_risk_check_transition, 11},
    {"_Colossus_Gen_Strat_Weight", (DL_FUNC) &_Colossus_Gen_Strat_Weight, 8},
    {"_Colossus_OMP_Check", (DL_FUNC) &_Colossus_OMP_Check, 0},
    {"_Colossus_cox_ph_Omnibus_Bounds_transition", (DL_FUNC) &_Colossus_cox_ph_Omnibus_Bounds_transition, 17},
    {"_Colossus_pois_Omnibus_Bounds_transition", (DL_FUNC) &_Colossus_pois_Omnibus_Bounds_transition, 15},
    {"_Colossus_pois_Residual_transition", (DL_FUNC) &_Colossus_pois_Residual_transition, 14},
    {"_Colossus_cox_ph_multidose_Omnibus_transition", (DL_FUNC) &_Colossus_cox_ph_multidose_Omnibus_transition, 20},
    {"_Colossus_Intercept_Bound", (DL_FUNC) &_Colossus_Intercept_Bound, 9},
    {"_Colossus_Calc_Change_Cons", (DL_FUNC) &_Colossus_Calc_Change_Cons, 18},
    {"_Colossus_Calc_Change", (DL_FUNC) &_Colossus_Calc_Change, 17},
    {"_Colossus_Calc_Change_Basic", (DL_FUNC) &_Colossus_Calc_Change_Basic, 13},
    {"_Colossus_Log_Bound", (DL_FUNC) &_Colossus_Log_Bound, 19},
    {"_Colossus_Calc_Change_trouble", (DL_FUNC) &_Colossus_Calc_Change_trouble, 15},
    {"_Colossus_Make_subterms", (DL_FUNC) &_Colossus_Make_subterms, 21},
    {"_Colossus_Make_subterms_Single", (DL_FUNC) &_Colossus_Make_subterms_Single, 17},
    {"_Colossus_Make_subterms_Basic", (DL_FUNC) &_Colossus_Make_subterms_Basic, 7},
    {"_Colossus_Make_Risks", (DL_FUNC) &_Colossus_Make_Risks, 25},
    {"_Colossus_Make_Risks_Weighted", (DL_FUNC) &_Colossus_Make_Risks_Weighted, 26},
    {"_Colossus_Make_Risks_Weighted_Single", (DL_FUNC) &_Colossus_Make_Risks_Weighted_Single, 20},
    {"_Colossus_Make_Risks_Single", (DL_FUNC) &_Colossus_Make_Risks_Single, 19},
    {"_Colossus_Make_Risks_Basic", (DL_FUNC) &_Colossus_Make_Risks_Basic, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_Colossus(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
