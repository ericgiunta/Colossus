# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# See https://github.com/r-lib/actions/tree/master/examples#readme for
# additional example workflows available for the R community.

name: OS_Checks

on: [workflow_dispatch, push]

permissions:
  contents: read

jobs:
  mac_OMP_check:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          Ncpus: 2
          remove-openmp-macos: false
      - name: enable homebrew to allow OpenMP
        run: | 
          curl -OL https://mac.r-project.org/openmp/openmp-19.1.0-darwin20-Release.tar.gz
          sudo tar fvxz openmp-19.1.0-darwin20-Release.tar.gz -C /
      - name: move to package and install
        run: |
          export PKG_CPPFLAGS='-Xclang -fopenmp'
          export PKG_LIBS=-lomp
          Rscript -e "install.packages(c('devtools'))"
          Rscript -e "devtools::install_deps(dependencies = TRUE)"
          Rscript -e "devtools::install_dev_deps(dependencies = TRUE)"
          Rscript -e "devtools::install()"
      - name: check detected OS and OpenMP
        run: |
           Rscript -e "a=Colossus::System_Version()
            print(a)
            if (a['OpenMP Enabled']!='TRUE'){
            stop()
            }
            if (a['Operating System']!='osx'){
            stop()
            }
            "
      - name: move to package and build examples
        run: |
          brew install pandoc
          Rscript -e "devtools::check(error_on = c('error'), cran=T)"
  mac_no_OMP_check:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          Ncpus: 2
          remove-openmp-macos: false
      - name: move to package and install
        run: |
          ls
          Rscript -e "install.packages(c('devtools'))"
          Rscript -e "devtools::install_deps(dependencies = TRUE)"
          Rscript -e "devtools::install_dev_deps(dependencies = TRUE)"
          Rscript -e "devtools::install()"
      - name: check detected OS and OpenMP
        run: |
           Rscript -e "a=Colossus::System_Version()
            print(a)
            if (a['OpenMP Enabled']!='FALSE'){
            stop()
            }
            if (a['Operating System']!='osx'){
            stop()
            }
            "
      - name: move to package and test
        run: |
          brew install pandoc
          Rscript -e "devtools::test(stop_on_failure = TRUE)"
          Rscript -e "devtools::check(error_on = c('error'), cran=T)"
  win_check:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          Ncpus: 2
      - name: move to package and check
        run: |
          ls
          Rscript -e "install.packages(c('devtools'))"
          Rscript -e "devtools::install_deps(dependencies = TRUE)"
          Rscript -e "devtools::install_dev_deps(dependencies = TRUE)"
          Rscript -e "devtools::install()"
      - name: check detected OS and OpenMP
        run: |
           Rscript -e "a=Colossus::System_Version()
            print(a)
            if (a['OpenMP Enabled']!='TRUE'){
            stop()
            }
            "
      - name: move to package and test
        run: |
          choco install pandoc
          refreshenv
          Rscript -e "devtools::test(stop_on_failure = TRUE, stop_on_warning = TRUE)"
          Rscript -e "devtools::check(error_on = c('error'), cran=T)"
  ubuntu_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          Ncpus: 2
      - name: install libraries
        run: |
          sudo apt-get install libcurl4-openssl-dev libharfbuzz-dev libfribidi-dev libfontconfig1-dev libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev
      - name: move to package and check
        run: |
          ls
          Rscript -e "install.packages(c('devtools'))"
          Rscript -e "devtools::install_deps(dependencies = TRUE)"
          Rscript -e "devtools::install_dev_deps(dependencies = TRUE)"
          Rscript -e "devtools::install()"
      - name: check detected OS and OpenMP
        run: |
           Rscript -e "a=Colossus::System_Version()
            print(a)
            if (a['OpenMP Enabled']!='TRUE'){
            stop()
            }
            if (a['Operating System']!='linux'){
            stop()
            }
            "
      - name: move to package and test
        run: |
          sudo apt-get install pandoc
          sudo apt-get install texlive
          Rscript -e "devtools::test(stop_on_failure = TRUE, stop_on_warning = TRUE)"
          Rscript -e "devtools::check(error_on = c('error'), cran=T)"
