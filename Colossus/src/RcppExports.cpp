// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "Colossus_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vec_norm
double vec_norm(const vector<double>& x, int totalnum);
RcppExport SEXP _Colossus_vec_norm(SEXP xSEXP, SEXP totalnumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type totalnum(totalnumSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_norm(x, totalnum));
    return rcpp_result_gen;
END_RCPP
}
// removeRow
void removeRow(Eigen::MatrixXd& matrix, unsigned int rowToRemove);
RcppExport SEXP _Colossus_removeRow(SEXP matrixSEXP, SEXP rowToRemoveSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type rowToRemove(rowToRemoveSEXP);
    removeRow(matrix, rowToRemove);
    return R_NilValue;
END_RCPP
}
// removeColumn
void removeColumn(Eigen::MatrixXd& matrix, unsigned int colToRemove);
RcppExport SEXP _Colossus_removeColumn(SEXP matrixSEXP, SEXP colToRemoveSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type colToRemove(colToRemoveSEXP);
    removeColumn(matrix, colToRemove);
    return R_NilValue;
END_RCPP
}
// Make_subterms
void Make_subterms(const int& totalnum, const IntegerVector& Term_n, const StringVector& tform, const IntegerVector& dfc, const int& fir, MatrixXd& T0, MatrixXd& Td0, MatrixXd& Tdd0, MatrixXd& Dose, MatrixXd& nonDose, MatrixXd& TTerm, MatrixXd& nonDose_LIN, MatrixXd& nonDose_PLIN, MatrixXd& nonDose_LOGLIN, const VectorXd& beta_0, const MatrixXd& df0, const double& dint, const double& dslp, const int& nthreads, bool debugging, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Make_subterms(SEXP totalnumSEXP, SEXP Term_nSEXP, SEXP tformSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP T0SEXP, SEXP Td0SEXP, SEXP Tdd0SEXP, SEXP DoseSEXP, SEXP nonDoseSEXP, SEXP TTermSEXP, SEXP nonDose_LINSEXP, SEXP nonDose_PLINSEXP, SEXP nonDose_LOGLINSEXP, SEXP beta_0SEXP, SEXP df0SEXP, SEXP dintSEXP, SEXP dslpSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Td0(Td0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Tdd0(Tdd0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose(nonDoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LIN(nonDose_LINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_PLIN(nonDose_PLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LOGLIN(nonDose_LOGLINSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const double& >::type dint(dintSEXP);
    Rcpp::traits::input_parameter< const double& >::type dslp(dslpSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Make_subterms(totalnum, Term_n, tform, dfc, fir, T0, Td0, Tdd0, Dose, nonDose, TTerm, nonDose_LIN, nonDose_PLIN, nonDose_LOGLIN, beta_0, df0, dint, dslp, nthreads, debugging, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Make_subterms_Single
void Make_subterms_Single(const int& totalnum, const IntegerVector& Term_n, const StringVector& tform, const IntegerVector& dfc, const int& fir, MatrixXd& T0, MatrixXd& Dose, MatrixXd& nonDose, MatrixXd& TTerm, MatrixXd& nonDose_LIN, MatrixXd& nonDose_PLIN, MatrixXd& nonDose_LOGLIN, const VectorXd& beta_0, const MatrixXd& df0, const int& nthreads, bool debugging, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Make_subterms_Single(SEXP totalnumSEXP, SEXP Term_nSEXP, SEXP tformSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP T0SEXP, SEXP DoseSEXP, SEXP nonDoseSEXP, SEXP TTermSEXP, SEXP nonDose_LINSEXP, SEXP nonDose_PLINSEXP, SEXP nonDose_LOGLINSEXP, SEXP beta_0SEXP, SEXP df0SEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose(nonDoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LIN(nonDose_LINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_PLIN(nonDose_PLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LOGLIN(nonDose_LOGLINSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Make_subterms_Single(totalnum, Term_n, tform, dfc, fir, T0, Dose, nonDose, TTerm, nonDose_LIN, nonDose_PLIN, nonDose_LOGLIN, beta_0, df0, nthreads, debugging, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Make_subterms_Basic
void Make_subterms_Basic(const int& totalnum, const IntegerVector& dfc, MatrixXd& T0, const VectorXd& beta_0, const MatrixXd& df0, const int& nthreads, bool debugging);
RcppExport SEXP _Colossus_Make_subterms_Basic(SEXP totalnumSEXP, SEXP dfcSEXP, SEXP T0SEXP, SEXP beta_0SEXP, SEXP df0SEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Make_subterms_Basic(totalnum, dfc, T0, beta_0, df0, nthreads, debugging);
    return R_NilValue;
END_RCPP
}
// Prep_Basic
void Prep_Basic(const int& totalnum, const IntegerVector& dfc, VectorXd& T0, MatrixXd& Td0, MatrixXd& Tdd0, const VectorXd& beta_0, const MatrixXd& df0, const int& nthreads, bool debugging, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Prep_Basic(SEXP totalnumSEXP, SEXP dfcSEXP, SEXP T0SEXP, SEXP Td0SEXP, SEXP Tdd0SEXP, SEXP beta_0SEXP, SEXP df0SEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< VectorXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Td0(Td0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Tdd0(Tdd0SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Prep_Basic(totalnum, dfc, T0, Td0, Tdd0, beta_0, df0, nthreads, debugging, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Make_Risks
void Make_Risks(string modelform, const StringVector& tform, const IntegerVector& Term_n, const int& totalnum, const int& fir, const MatrixXd& T0, const MatrixXd& Td0, const MatrixXd& Tdd0, MatrixXd& Te, MatrixXd& R, MatrixXd& Rd, MatrixXd& Rdd, MatrixXd& Dose, MatrixXd& nonDose, MatrixXd& TTerm, MatrixXd& nonDose_LIN, MatrixXd& nonDose_PLIN, MatrixXd& nonDose_LOGLIN, MatrixXd& RdR, MatrixXd& RddR, const int& nthreads, bool debugging, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Make_Risks(SEXP modelformSEXP, SEXP tformSEXP, SEXP Term_nSEXP, SEXP totalnumSEXP, SEXP firSEXP, SEXP T0SEXP, SEXP Td0SEXP, SEXP Tdd0SEXP, SEXP TeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP DoseSEXP, SEXP nonDoseSEXP, SEXP TTermSEXP, SEXP nonDose_LINSEXP, SEXP nonDose_PLINSEXP, SEXP nonDose_LOGLINSEXP, SEXP RdRSEXP, SEXP RddRSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Td0(Td0SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Tdd0(Tdd0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Te(TeSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose(nonDoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LIN(nonDose_LINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_PLIN(nonDose_PLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LOGLIN(nonDose_LOGLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Make_Risks(modelform, tform, Term_n, totalnum, fir, T0, Td0, Tdd0, Te, R, Rd, Rdd, Dose, nonDose, TTerm, nonDose_LIN, nonDose_PLIN, nonDose_LOGLIN, RdR, RddR, nthreads, debugging, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Make_Risks_Single
void Make_Risks_Single(string modelform, const StringVector& tform, const IntegerVector& Term_n, const int& totalnum, const int& fir, const MatrixXd& T0, MatrixXd& Te, MatrixXd& R, MatrixXd& Dose, MatrixXd& nonDose, MatrixXd& TTerm, MatrixXd& nonDose_LIN, MatrixXd& nonDose_PLIN, MatrixXd& nonDose_LOGLIN, const int& nthreads, bool debugging, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Make_Risks_Single(SEXP modelformSEXP, SEXP tformSEXP, SEXP Term_nSEXP, SEXP totalnumSEXP, SEXP firSEXP, SEXP T0SEXP, SEXP TeSEXP, SEXP RSEXP, SEXP DoseSEXP, SEXP nonDoseSEXP, SEXP TTermSEXP, SEXP nonDose_LINSEXP, SEXP nonDose_PLINSEXP, SEXP nonDose_LOGLINSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Te(TeSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose(nonDoseSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type TTerm(TTermSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LIN(nonDose_LINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_PLIN(nonDose_PLINSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type nonDose_LOGLIN(nonDose_LOGLINSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Make_Risks_Single(modelform, tform, Term_n, totalnum, fir, T0, Te, R, Dose, nonDose, TTerm, nonDose_LIN, nonDose_PLIN, nonDose_LOGLIN, nthreads, debugging, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Make_Risks_Basic
void Make_Risks_Basic(const int& totalnum, const MatrixXd& T0, MatrixXd& R, MatrixXd& Rd, MatrixXd& Rdd, MatrixXd& RdR, const int& nthreads, bool debugging, const MatrixXd& df0, const IntegerVector& dfc, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Make_Risks_Basic(SEXP totalnumSEXP, SEXP T0SEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP RdRSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP df0SEXP, SEXP dfcSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Make_Risks_Basic(totalnum, T0, R, Rd, Rdd, RdR, nthreads, debugging, df0, dfc, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Make_Groups
void Make_Groups(const int& ntime, const MatrixXd& df_m, IntegerMatrix& RiskFail, vector<string>& RiskGroup, NumericVector& tu, const int& nthreads, bool debugging);
RcppExport SEXP _Colossus_Make_Groups(SEXP ntimeSEXP, SEXP df_mSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP tuSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df_m(df_mSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Make_Groups(ntime, df_m, RiskFail, RiskGroup, tu, nthreads, debugging);
    return R_NilValue;
END_RCPP
}
// Make_Groups_CR
void Make_Groups_CR(const int& ntime, const MatrixXd& df_m, IntegerMatrix& RiskFail, vector<string>& RiskGroup, NumericVector& tu, const VectorXd& cens_weight, const double cens_cutoff, const int& nthreads, bool debugging);
RcppExport SEXP _Colossus_Make_Groups_CR(SEXP ntimeSEXP, SEXP df_mSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP tuSEXP, SEXP cens_weightSEXP, SEXP cens_cutoffSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df_m(df_mSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type cens_cutoff(cens_cutoffSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Make_Groups_CR(ntime, df_m, RiskFail, RiskGroup, tu, cens_weight, cens_cutoff, nthreads, debugging);
    return R_NilValue;
END_RCPP
}
// Make_Groups_STRATA
void Make_Groups_STRATA(const int& ntime, const MatrixXd& df_m, IntegerMatrix& RiskFail, StringMatrix& RiskGroup, NumericVector& tu, const int& nthreads, bool debugging, IntegerVector& STRATA_vals);
RcppExport SEXP _Colossus_Make_Groups_STRATA(SEXP ntimeSEXP, SEXP df_mSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP tuSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP STRATA_valsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df_m(df_mSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type STRATA_vals(STRATA_valsSEXP);
    Make_Groups_STRATA(ntime, df_m, RiskFail, RiskGroup, tu, nthreads, debugging, STRATA_vals);
    return R_NilValue;
END_RCPP
}
// Make_Groups_STRATA_CR
void Make_Groups_STRATA_CR(const int& ntime, const MatrixXd& df_m, IntegerMatrix& RiskFail, StringMatrix& RiskGroup, NumericVector& tu, const int& nthreads, bool debugging, IntegerVector& STRATA_vals, const VectorXd& cens_weight, const double cens_cutoff);
RcppExport SEXP _Colossus_Make_Groups_STRATA_CR(SEXP ntimeSEXP, SEXP df_mSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP tuSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP STRATA_valsSEXP, SEXP cens_weightSEXP, SEXP cens_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df_m(df_mSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type cens_cutoff(cens_cutoffSEXP);
    Make_Groups_STRATA_CR(ntime, df_m, RiskFail, RiskGroup, tu, nthreads, debugging, STRATA_vals, cens_weight, cens_cutoff);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides
void Calculate_Sides(const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, MatrixXd& Rls1, MatrixXd& Rls2, MatrixXd& Rls3, MatrixXd& Lls1, MatrixXd& Lls2, MatrixXd& Lls3, const int& nthreads, bool debugging, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calculate_Sides(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calculate_Sides(RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, nthreads, debugging, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides_CR
void Calculate_Sides_CR(const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, MatrixXd& Rls1, MatrixXd& Rls2, MatrixXd& Rls3, MatrixXd& Lls1, MatrixXd& Lls2, MatrixXd& Lls3, const VectorXd& cens_weight, const int& nthreads, bool debugging, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calculate_Sides_CR(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP cens_weightSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calculate_Sides_CR(RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, cens_weight, nthreads, debugging, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides_Single
void Calculate_Sides_Single(const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, MatrixXd& Rls1, MatrixXd& Lls1, const int& nthreads, bool debugging);
RcppExport SEXP _Colossus_Calculate_Sides_Single(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Calculate_Sides_Single(RiskFail, RiskGroup, totalnum, ntime, R, Rls1, Lls1, nthreads, debugging);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides_Single_CR
void Calculate_Sides_Single_CR(const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, MatrixXd& Rls1, MatrixXd& Lls1, const VectorXd& cens_weight, const int& nthreads, bool debugging);
RcppExport SEXP _Colossus_Calculate_Sides_Single_CR(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP cens_weightSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Calculate_Sides_Single_CR(RiskFail, RiskGroup, totalnum, ntime, R, Rls1, Lls1, cens_weight, nthreads, debugging);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides_STRATA
void Calculate_Sides_STRATA(const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, MatrixXd& Rls1, MatrixXd& Rls2, MatrixXd& Rls3, MatrixXd& Lls1, MatrixXd& Lls2, MatrixXd& Lls3, const int& nthreads, bool debugging, IntegerVector& STRATA_vals, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calculate_Sides_STRATA(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP STRATA_valsSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calculate_Sides_STRATA(RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, nthreads, debugging, STRATA_vals, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides_STRATA_Single
void Calculate_Sides_STRATA_Single(const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, MatrixXd& Rls1, MatrixXd& Lls1, const int& nthreads, bool debugging, IntegerVector& STRATA_vals, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calculate_Sides_STRATA_Single(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP STRATA_valsSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calculate_Sides_STRATA_Single(RiskFail, RiskGroup, totalnum, ntime, R, Rls1, Lls1, nthreads, debugging, STRATA_vals, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides_STRATA_CR
void Calculate_Sides_STRATA_CR(const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, MatrixXd& Rls1, MatrixXd& Rls2, MatrixXd& Rls3, MatrixXd& Lls1, MatrixXd& Lls2, MatrixXd& Lls3, const VectorXd& cens_weight, const int& nthreads, bool debugging, IntegerVector& STRATA_vals, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calculate_Sides_STRATA_CR(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP cens_weightSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP STRATA_valsSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calculate_Sides_STRATA_CR(RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, cens_weight, nthreads, debugging, STRATA_vals, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calculate_Sides_STRATA_Single_CR
void Calculate_Sides_STRATA_Single_CR(const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, MatrixXd& Rls1, MatrixXd& Lls1, const VectorXd& cens_weight, const int& nthreads, bool debugging, IntegerVector& STRATA_vals, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calculate_Sides_STRATA_Single_CR(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP cens_weightSEXP, SEXP nthreadsSEXP, SEXP debuggingSEXP, SEXP STRATA_valsSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calculate_Sides_STRATA_Single_CR(RiskFail, RiskGroup, totalnum, ntime, R, Rls1, Lls1, cens_weight, nthreads, debugging, STRATA_vals, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calc_LogLik
void Calc_LogLik(const int& nthreads, const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, const MatrixXd& RdR, const MatrixXd& RddR, const MatrixXd& Rls1, const MatrixXd& Rls2, const MatrixXd& Rls3, const MatrixXd& Lls1, const MatrixXd& Lls2, const MatrixXd& Lls3, vector<double>& Ll, vector<double>& Lld, vector<double>& Lldd, bool debugging, string ties_method, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calc_LogLik(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP RdRSEXP, SEXP RddRSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP debuggingSEXP, SEXP ties_methodSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calc_LogLik(nthreads, RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, RdR, RddR, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, Ll, Lld, Lldd, debugging, ties_method, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calc_LogLik_Basic
void Calc_LogLik_Basic(const int& nthreads, const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, const MatrixXd& RdR, const MatrixXd& Rls1, const MatrixXd& Rls2, const MatrixXd& Rls3, const MatrixXd& Lls1, const MatrixXd& Lls2, const MatrixXd& Lls3, vector<double>& Ll, vector<double>& Lld, vector<double>& Lldd, bool debugging, string ties_method, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calc_LogLik_Basic(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP RdRSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP debuggingSEXP, SEXP ties_methodSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calc_LogLik_Basic(nthreads, RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, RdR, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, Ll, Lld, Lldd, debugging, ties_method, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calc_LogLik_Basic_Single
void Calc_LogLik_Basic_Single(const int& nthreads, const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rls1, const MatrixXd& Lls1, vector<double>& Ll, bool debugging, string ties_method, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calc_LogLik_Basic_Single(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP LlSEXP, SEXP debuggingSEXP, SEXP ties_methodSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calc_LogLik_Basic_Single(nthreads, RiskFail, RiskGroup, totalnum, ntime, R, Rls1, Lls1, Ll, debugging, ties_method, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calc_LogLik_Single
void Calc_LogLik_Single(const int& nthreads, const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rls1, const MatrixXd& Lls1, vector<double>& Ll, bool debugging, string ties_method);
RcppExport SEXP _Colossus_Calc_LogLik_Single(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP LlSEXP, SEXP debuggingSEXP, SEXP ties_methodSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Calc_LogLik_Single(nthreads, RiskFail, RiskGroup, totalnum, ntime, R, Rls1, Lls1, Ll, debugging, ties_method);
    return R_NilValue;
END_RCPP
}
// Calc_LogLik_STRATA
void Calc_LogLik_STRATA(const int& nthreads, const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, const MatrixXd& RdR, const MatrixXd& RddR, const MatrixXd& Rls1, const MatrixXd& Rls2, const MatrixXd& Rls3, const MatrixXd& Lls1, const MatrixXd& Lls2, const MatrixXd& Lls3, vector<double>& Ll, vector<double>& Lld, vector<double>& Lldd, bool debugging, string ties_method, IntegerVector& STRATA_vals, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calc_LogLik_STRATA(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP RdRSEXP, SEXP RddRSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP debuggingSEXP, SEXP ties_methodSEXP, SEXP STRATA_valsSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calc_LogLik_STRATA(nthreads, RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, RdR, RddR, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, Ll, Lld, Lldd, debugging, ties_method, STRATA_vals, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Calc_LogLik_STRATA_BASIC
void Calc_LogLik_STRATA_BASIC(const int& nthreads, const IntegerMatrix& RiskFail, const StringMatrix& RiskGroup, const int& totalnum, const int& ntime, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, const MatrixXd& RdR, const MatrixXd& Rls1, const MatrixXd& Rls2, const MatrixXd& Rls3, const MatrixXd& Lls1, const MatrixXd& Lls2, const MatrixXd& Lls3, vector<double>& Ll, vector<double>& Lld, vector<double>& Lldd, bool debugging, string ties_method, IntegerVector& STRATA_vals, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Calc_LogLik_STRATA_BASIC(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP totalnumSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP RdRSEXP, SEXP Rls1SEXP, SEXP Rls2SEXP, SEXP Rls3SEXP, SEXP Lls1SEXP, SEXP Lls2SEXP, SEXP Lls3SEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP debuggingSEXP, SEXP ties_methodSEXP, SEXP STRATA_valsSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const StringMatrix& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls2(Rls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls3(Rls3SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls2(Lls2SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls3(Lls3SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Calc_LogLik_STRATA_BASIC(nthreads, RiskFail, RiskGroup, totalnum, ntime, R, Rd, Rdd, RdR, Rls1, Rls2, Rls3, Lls1, Lls2, Lls3, Ll, Lld, Lldd, debugging, ties_method, STRATA_vals, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Poisson_LogLik
void Poisson_LogLik(const int& nthreads, const int& totalnum, const MatrixXd& PyrC, const MatrixXd& R, const MatrixXd& Rd, const MatrixXd& Rdd, const MatrixXd& RdR, const MatrixXd& RddR, vector<double>& Ll, vector<double>& Lld, vector<double>& Lldd, bool debugging, const IntegerVector& KeepConstant);
RcppExport SEXP _Colossus_Poisson_LogLik(SEXP nthreadsSEXP, SEXP totalnumSEXP, SEXP PyrCSEXP, SEXP RSEXP, SEXP RdSEXP, SEXP RddSEXP, SEXP RdRSEXP, SEXP RddRSEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rd(RdSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rdd(RddSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RdR(RdRSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type RddR(RddRSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Poisson_LogLik(nthreads, totalnum, PyrC, R, Rd, Rdd, RdR, RddR, Ll, Lld, Lldd, debugging, KeepConstant);
    return R_NilValue;
END_RCPP
}
// Poisson_LogLik_Single
void Poisson_LogLik_Single(const int& nthreads, const int& totalnum, const MatrixXd& PyrC, const MatrixXd& R, vector<double>& Ll, bool debugging);
RcppExport SEXP _Colossus_Poisson_LogLik_Single(SEXP nthreadsSEXP, SEXP totalnumSEXP, SEXP PyrCSEXP, SEXP RSEXP, SEXP LlSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Poisson_LogLik_Single(nthreads, totalnum, PyrC, R, Ll, debugging);
    return R_NilValue;
END_RCPP
}
// Intercept_Bound
void Intercept_Bound(const int& nthreads, const int& totalnum, const VectorXd& beta_0, vector<double>& dbeta, const IntegerVector& dfc, const MatrixXd& df0, const IntegerVector& KeepConstant, bool debugging, const StringVector& tform);
RcppExport SEXP _Colossus_Intercept_Bound(SEXP nthreadsSEXP, SEXP totalnumSEXP, SEXP beta_0SEXP, SEXP dbetaSEXP, SEXP dfcSEXP, SEXP df0SEXP, SEXP KeepConstantSEXP, SEXP debuggingSEXP, SEXP tformSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type dbeta(dbetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Intercept_Bound(nthreads, totalnum, beta_0, dbeta, dfc, df0, KeepConstant, debugging, tform);
    return R_NilValue;
END_RCPP
}
// Calc_Change
void Calc_Change(const int& double_step, const int& nthreads, const int& totalnum, const int& fir, const int& der_iden, const double& dbeta_cap, const double& dose_abs_max, const double& lr, const double& abs_max, const vector<double>& Ll, const vector<double>& Lld, const vector<double>& Lldd, vector<double>& dbeta, const bool change_all, const StringVector& tform, const double& dint, const double& dslp, IntegerVector KeepConstant, bool debugging);
RcppExport SEXP _Colossus_Calc_Change(SEXP double_stepSEXP, SEXP nthreadsSEXP, SEXP totalnumSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP dbeta_capSEXP, SEXP dose_abs_maxSEXP, SEXP lrSEXP, SEXP abs_maxSEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP dbetaSEXP, SEXP change_allSEXP, SEXP tformSEXP, SEXP dintSEXP, SEXP dslpSEXP, SEXP KeepConstantSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type double_step(double_stepSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type fir(firSEXP);
    Rcpp::traits::input_parameter< const int& >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< const double& >::type dbeta_cap(dbeta_capSEXP);
    Rcpp::traits::input_parameter< const double& >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< const double& >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type dbeta(dbetaSEXP);
    Rcpp::traits::input_parameter< const bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< const double& >::type dint(dintSEXP);
    Rcpp::traits::input_parameter< const double& >::type dslp(dslpSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Calc_Change(double_step, nthreads, totalnum, fir, der_iden, dbeta_cap, dose_abs_max, lr, abs_max, Ll, Lld, Lldd, dbeta, change_all, tform, dint, dslp, KeepConstant, debugging);
    return R_NilValue;
END_RCPP
}
// Calc_Change_Basic
void Calc_Change_Basic(const int& double_step, const int& nthreads, const int& totalnum, const int& der_iden, const double& dbeta_cap, const double& lr, const double& abs_max, const vector<double>& Ll, const vector<double>& Lld, const vector<double>& Lldd, vector<double>& dbeta, const bool change_all, IntegerVector KeepConstant, bool debugging);
RcppExport SEXP _Colossus_Calc_Change_Basic(SEXP double_stepSEXP, SEXP nthreadsSEXP, SEXP totalnumSEXP, SEXP der_idenSEXP, SEXP dbeta_capSEXP, SEXP lrSEXP, SEXP abs_maxSEXP, SEXP LlSEXP, SEXP LldSEXP, SEXP LlddSEXP, SEXP dbetaSEXP, SEXP change_allSEXP, SEXP KeepConstantSEXP, SEXP debuggingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type double_step(double_stepSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type totalnum(totalnumSEXP);
    Rcpp::traits::input_parameter< const int& >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< const double& >::type dbeta_cap(dbeta_capSEXP);
    Rcpp::traits::input_parameter< const double& >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< const double& >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Lld(LldSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type Lldd(LlddSEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type dbeta(dbetaSEXP);
    Rcpp::traits::input_parameter< const bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Calc_Change_Basic(double_step, nthreads, totalnum, der_iden, dbeta_cap, lr, abs_max, Ll, Lld, Lldd, dbeta, change_all, KeepConstant, debugging);
    return R_NilValue;
END_RCPP
}
// Calculate_Null_Sides
void Calculate_Null_Sides(const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& ntime, const MatrixXd& R, MatrixXd& Rls1, MatrixXd& Lls1, const int& nthreads);
RcppExport SEXP _Colossus_Calculate_Null_Sides(SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Calculate_Null_Sides(RiskFail, RiskGroup, ntime, R, Rls1, Lls1, nthreads);
    return R_NilValue;
END_RCPP
}
// Calc_Null_LogLik
void Calc_Null_LogLik(const int& nthreads, const IntegerMatrix& RiskFail, const vector<string>& RiskGroup, const int& ntime, const MatrixXd& R, const MatrixXd& Rls1, const MatrixXd& Lls1, vector<double>& Ll, string ties_method);
RcppExport SEXP _Colossus_Calc_Null_LogLik(SEXP nthreadsSEXP, SEXP RiskFailSEXP, SEXP RiskGroupSEXP, SEXP ntimeSEXP, SEXP RSEXP, SEXP Rls1SEXP, SEXP Lls1SEXP, SEXP LlSEXP, SEXP ties_methodSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type RiskFail(RiskFailSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type RiskGroup(RiskGroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Rls1(Rls1SEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Lls1(Lls1SEXP);
    Rcpp::traits::input_parameter< vector<double>& >::type Ll(LlSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Calc_Null_LogLik(nthreads, RiskFail, RiskGroup, ntime, R, Rls1, Lls1, Ll, ties_method);
    return R_NilValue;
END_RCPP
}
// LogLik_Cox_PH
List LogLik_Cox_PH(IntegerVector Term_n, StringVector tform, NumericVector a_n, NumericMatrix x_all, IntegerVector dfc, int fir, int der_iden, string modelform, double lr, int maxiter, int halfmax, double epsilon, double dbeta_cap, double abs_max, double dose_abs_max, double deriv_epsilon, NumericMatrix df_groups, NumericVector tu, int double_step, bool change_all, bool verbose, bool debugging, IntegerVector KeepConstant, int term_tot, string ties_method, int nthreads);
RcppExport SEXP _Colossus_LogLik_Cox_PH(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP lrSEXP, SEXP maxiterSEXP, SEXP halfmaxSEXP, SEXP epsilonSEXP, SEXP dbeta_capSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP deriv_epsilonSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP double_stepSEXP, SEXP change_allSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP ties_methodSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type dbeta_cap(dbeta_capSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type deriv_epsilon(deriv_epsilonSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< int >::type double_step(double_stepSEXP);
    Rcpp::traits::input_parameter< bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Cox_PH(Term_n, tform, a_n, x_all, dfc, fir, der_iden, modelform, lr, maxiter, halfmax, epsilon, dbeta_cap, abs_max, dose_abs_max, deriv_epsilon, df_groups, tu, double_step, change_all, verbose, debugging, KeepConstant, term_tot, ties_method, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// LogLik_Cox_PH_basic
List LogLik_Cox_PH_basic(NumericVector a_n, NumericMatrix x_all, IntegerVector dfc, int der_iden, double lr, int maxiter, int halfmax, double epsilon, double dbeta_cap, double abs_max, double dose_abs_max, double deriv_epsilon, NumericMatrix df_groups, NumericVector tu, int double_step, bool change_all, bool verbose, bool debugging, IntegerVector KeepConstant, string ties_method, int nthreads);
RcppExport SEXP _Colossus_LogLik_Cox_PH_basic(SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP der_idenSEXP, SEXP lrSEXP, SEXP maxiterSEXP, SEXP halfmaxSEXP, SEXP epsilonSEXP, SEXP dbeta_capSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP deriv_epsilonSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP double_stepSEXP, SEXP change_allSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP ties_methodSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type dbeta_cap(dbeta_capSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type deriv_epsilon(deriv_epsilonSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< int >::type double_step(double_stepSEXP);
    Rcpp::traits::input_parameter< bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Cox_PH_basic(a_n, x_all, dfc, der_iden, lr, maxiter, halfmax, epsilon, dbeta_cap, abs_max, dose_abs_max, deriv_epsilon, df_groups, tu, double_step, change_all, verbose, debugging, KeepConstant, ties_method, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// LogLik_Cox_PH_STRATA
List LogLik_Cox_PH_STRATA(IntegerVector Term_n, StringVector tform, NumericVector a_n, NumericMatrix x_all, IntegerVector dfc, int fir, int der_iden, string modelform, double lr, int maxiter, int halfmax, double epsilon, double dbeta_cap, double abs_max, double dose_abs_max, double deriv_epsilon, NumericMatrix df_groups, NumericVector tu, int double_step, bool change_all, bool verbose, bool debugging, IntegerVector KeepConstant, int term_tot, string ties_method, IntegerVector& STRATA_vals, int nthreads);
RcppExport SEXP _Colossus_LogLik_Cox_PH_STRATA(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP lrSEXP, SEXP maxiterSEXP, SEXP halfmaxSEXP, SEXP epsilonSEXP, SEXP dbeta_capSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP deriv_epsilonSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP double_stepSEXP, SEXP change_allSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP ties_methodSEXP, SEXP STRATA_valsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type dbeta_cap(dbeta_capSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type deriv_epsilon(deriv_epsilonSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< int >::type double_step(double_stepSEXP);
    Rcpp::traits::input_parameter< bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Cox_PH_STRATA(Term_n, tform, a_n, x_all, dfc, fir, der_iden, modelform, lr, maxiter, halfmax, epsilon, dbeta_cap, abs_max, dose_abs_max, deriv_epsilon, df_groups, tu, double_step, change_all, verbose, debugging, KeepConstant, term_tot, ties_method, STRATA_vals, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// Cox_PH_PLOT_SURV
List Cox_PH_PLOT_SURV(IntegerVector Term_n, StringVector tform, NumericVector a_n, NumericVector a_er, NumericMatrix x_all, IntegerVector dfc, int fir, int der_iden, string modelform, double abs_max, double dose_abs_max, NumericMatrix df_groups, NumericVector tu, bool verbose, bool debugging, IntegerVector KeepConstant, int term_tot, int nthreads);
RcppExport SEXP _Colossus_Cox_PH_PLOT_SURV(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP a_erSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_er(a_erSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cox_PH_PLOT_SURV(Term_n, tform, a_n, a_er, x_all, dfc, fir, der_iden, modelform, abs_max, dose_abs_max, df_groups, tu, verbose, debugging, KeepConstant, term_tot, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// Cox_PH_PLOT_RISK
List Cox_PH_PLOT_RISK(IntegerVector Term_n, StringVector tform, NumericVector a_n, NumericMatrix x_all, IntegerVector dfc, int fir, int der_iden, string modelform, double abs_max, double dose_abs_max, NumericMatrix df_groups, NumericVector tu, bool verbose, bool debugging, IntegerVector KeepConstant, int term_tot, int uniq_v, int nthreads);
RcppExport SEXP _Colossus_Cox_PH_PLOT_RISK(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP uniq_vSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< int >::type uniq_v(uniq_vSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cox_PH_PLOT_RISK(Term_n, tform, a_n, x_all, dfc, fir, der_iden, modelform, abs_max, dose_abs_max, df_groups, tu, verbose, debugging, KeepConstant, term_tot, uniq_v, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// Schoenfeld_Cox_PH
List Schoenfeld_Cox_PH(IntegerVector Term_n, StringVector tform, NumericVector a_n, NumericMatrix x_all, IntegerVector dfc, int fir, int der_iden, string modelform, double abs_max, double dose_abs_max, NumericMatrix df_groups, NumericVector tu, bool verbose, bool debugging, IntegerVector KeepConstant, int term_tot, string ties_method, int nthreads);
RcppExport SEXP _Colossus_Schoenfeld_Cox_PH(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP ties_methodSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Schoenfeld_Cox_PH(Term_n, tform, a_n, x_all, dfc, fir, der_iden, modelform, abs_max, dose_abs_max, df_groups, tu, verbose, debugging, KeepConstant, term_tot, ties_method, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// LogLik_Poisson
List LogLik_Poisson(MatrixXd PyrC, IntegerVector Term_n, StringVector tform, NumericVector a_n, NumericMatrix x_all, IntegerVector dfc, int fir, int der_iden, string modelform, double lr, int maxiter, int halfmax, double epsilon, double dbeta_cap, double abs_max, double dose_abs_max, double deriv_epsilon, int double_step, bool change_all, bool verbose, bool debugging, IntegerVector KeepConstant, int term_tot, int nthreads);
RcppExport SEXP _Colossus_LogLik_Poisson(SEXP PyrCSEXP, SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP lrSEXP, SEXP maxiterSEXP, SEXP halfmaxSEXP, SEXP epsilonSEXP, SEXP dbeta_capSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP deriv_epsilonSEXP, SEXP double_stepSEXP, SEXP change_allSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type dbeta_cap(dbeta_capSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type deriv_epsilon(deriv_epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type double_step(double_stepSEXP);
    Rcpp::traits::input_parameter< bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Poisson(PyrC, Term_n, tform, a_n, x_all, dfc, fir, der_iden, modelform, lr, maxiter, halfmax, epsilon, dbeta_cap, abs_max, dose_abs_max, deriv_epsilon, double_step, change_all, verbose, debugging, KeepConstant, term_tot, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// LogLik_Poisson_STRATA
List LogLik_Poisson_STRATA(MatrixXd PyrC, IntegerVector Term_n, StringVector tform, NumericVector a_n, NumericMatrix x_all, IntegerVector dfc, int fir, int der_iden, string modelform, double lr, int maxiter, int halfmax, double epsilon, double dbeta_cap, double abs_max, double dose_abs_max, double deriv_epsilon, int double_step, bool change_all, bool verbose, bool debugging, IntegerVector KeepConstant, int term_tot, IntegerVector& STRATA_vals, bool keep_strata, int nthreads);
RcppExport SEXP _Colossus_LogLik_Poisson_STRATA(SEXP PyrCSEXP, SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP lrSEXP, SEXP maxiterSEXP, SEXP halfmaxSEXP, SEXP epsilonSEXP, SEXP dbeta_capSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP deriv_epsilonSEXP, SEXP double_stepSEXP, SEXP change_allSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP STRATA_valsSEXP, SEXP keep_strataSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type dbeta_cap(dbeta_capSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type deriv_epsilon(deriv_epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type double_step(double_stepSEXP);
    Rcpp::traits::input_parameter< bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type STRATA_vals(STRATA_valsSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_strata(keep_strataSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Poisson_STRATA(PyrC, Term_n, tform, a_n, x_all, dfc, fir, der_iden, modelform, lr, maxiter, halfmax, epsilon, dbeta_cap, abs_max, dose_abs_max, deriv_epsilon, double_step, change_all, verbose, debugging, KeepConstant, term_tot, STRATA_vals, keep_strata, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// Stress_Run
void Stress_Run(IntegerVector Term_n, StringVector tform, NumericVector a_n, NumericMatrix x_all, IntegerVector dfc, int fir, int der_iden, string modelform, double lr, int maxiter, int halfmax, double epsilon, double dbeta_cap, double abs_max, double dose_abs_max, double deriv_epsilon, NumericMatrix df_groups, NumericVector tu, int double_step, bool change_all, bool verbose, bool debugging, IntegerVector KeepConstant, int term_tot, StringVector debug_checks, string ties_method, int nthreads);
RcppExport SEXP _Colossus_Stress_Run(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP lrSEXP, SEXP maxiterSEXP, SEXP halfmaxSEXP, SEXP epsilonSEXP, SEXP dbeta_capSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP deriv_epsilonSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP double_stepSEXP, SEXP change_allSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP debug_checksSEXP, SEXP ties_methodSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type dbeta_cap(dbeta_capSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type deriv_epsilon(deriv_epsilonSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< int >::type double_step(double_stepSEXP);
    Rcpp::traits::input_parameter< bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< StringVector >::type debug_checks(debug_checksSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Stress_Run(Term_n, tform, a_n, x_all, dfc, fir, der_iden, modelform, lr, maxiter, halfmax, epsilon, dbeta_cap, abs_max, dose_abs_max, deriv_epsilon, df_groups, tu, double_step, change_all, verbose, debugging, KeepConstant, term_tot, debug_checks, ties_method, nthreads);
    return R_NilValue;
END_RCPP
}
// LogLik_Cox_PH_null
List LogLik_Cox_PH_null(NumericMatrix df_groups, NumericVector tu, bool verbose, string ties_method, int nthreads);
RcppExport SEXP _Colossus_LogLik_Cox_PH_null(SEXP df_groupsSEXP, SEXP tuSEXP, SEXP verboseSEXP, SEXP ties_methodSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Cox_PH_null(df_groups, tu, verbose, ties_method, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// RISK_SUBSET
NumericVector RISK_SUBSET(IntegerVector Term_n, StringVector tform, NumericVector a_n, NumericMatrix x_all, IntegerVector dfc, int fir, string modelform, bool verbose, bool debugging, int term_tot, int nthreads);
RcppExport SEXP _Colossus_RISK_SUBSET(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP term_totSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(RISK_SUBSET(Term_n, tform, a_n, x_all, dfc, fir, modelform, verbose, debugging, term_tot, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// LogLik_Cox_PH_Single
List LogLik_Cox_PH_Single(IntegerVector Term_n, StringVector tform, NumericVector a_n, NumericMatrix x_all, IntegerVector dfc, int fir, string modelform, NumericMatrix df_groups, NumericVector tu, bool verbose, bool debugging, IntegerVector KeepConstant, int term_tot, string ties_method, int nthreads);
RcppExport SEXP _Colossus_LogLik_Cox_PH_Single(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP ties_methodSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Cox_PH_Single(Term_n, tform, a_n, x_all, dfc, fir, modelform, df_groups, tu, verbose, debugging, KeepConstant, term_tot, ties_method, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// LogLik_Poisson_Single
List LogLik_Poisson_Single(MatrixXd PyrC, IntegerVector Term_n, StringVector tform, NumericVector a_n, NumericMatrix x_all, IntegerVector dfc, int fir, string modelform, bool verbose, bool debugging, IntegerVector KeepConstant, int term_tot, int nthreads);
RcppExport SEXP _Colossus_LogLik_Poisson_Single(SEXP PyrCSEXP, SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type PyrC(PyrCSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Poisson_Single(PyrC, Term_n, tform, a_n, x_all, dfc, fir, modelform, verbose, debugging, KeepConstant, term_tot, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// LogLik_Cox_PH_CR
List LogLik_Cox_PH_CR(IntegerVector Term_n, StringVector tform, NumericVector a_n, NumericMatrix x_all, IntegerVector dfc, int fir, int der_iden, string modelform, double lr, int maxiter, int halfmax, double epsilon, double dbeta_cap, double abs_max, double dose_abs_max, double deriv_epsilon, NumericMatrix df_groups, NumericVector tu, const VectorXd cens_weight, const double cens_thres, int double_step, bool change_all, bool verbose, bool debugging, IntegerVector KeepConstant, int term_tot, string ties_method, int nthreads);
RcppExport SEXP _Colossus_LogLik_Cox_PH_CR(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP x_allSEXP, SEXP dfcSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP lrSEXP, SEXP maxiterSEXP, SEXP halfmaxSEXP, SEXP epsilonSEXP, SEXP dbeta_capSEXP, SEXP abs_maxSEXP, SEXP dose_abs_maxSEXP, SEXP deriv_epsilonSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP cens_weightSEXP, SEXP cens_thresSEXP, SEXP double_stepSEXP, SEXP change_allSEXP, SEXP verboseSEXP, SEXP debuggingSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP ties_methodSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type halfmax(halfmaxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type dbeta_cap(dbeta_capSEXP);
    Rcpp::traits::input_parameter< double >::type abs_max(abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type dose_abs_max(dose_abs_maxSEXP);
    Rcpp::traits::input_parameter< double >::type deriv_epsilon(deriv_epsilonSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type cens_weight(cens_weightSEXP);
    Rcpp::traits::input_parameter< const double >::type cens_thres(cens_thresSEXP);
    Rcpp::traits::input_parameter< int >::type double_step(double_stepSEXP);
    Rcpp::traits::input_parameter< bool >::type change_all(change_allSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debugging(debuggingSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< string >::type ties_method(ties_methodSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLik_Cox_PH_CR(Term_n, tform, a_n, x_all, dfc, fir, der_iden, modelform, lr, maxiter, halfmax, epsilon, dbeta_cap, abs_max, dose_abs_max, deriv_epsilon, df_groups, tu, cens_weight, cens_thres, double_step, change_all, verbose, debugging, KeepConstant, term_tot, ties_method, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cox_ph_transition
List cox_ph_transition(IntegerVector Term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix x_all, int fir, int der_iden, string modelform, List Control, NumericMatrix df_groups, NumericVector tu, IntegerVector KeepConstant, int term_tot);
RcppExport SEXP _Colossus_cox_ph_transition(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_ph_transition(Term_n, tform, a_n, dfc, x_all, fir, der_iden, modelform, Control, df_groups, tu, KeepConstant, term_tot));
    return rcpp_result_gen;
END_RCPP
}
// cox_ph_transition_CR
List cox_ph_transition_CR(IntegerVector Term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix x_all, int fir, int der_iden, string modelform, List Control, NumericMatrix df_groups, NumericVector tu, NumericVector cens_vec, IntegerVector KeepConstant, int term_tot);
RcppExport SEXP _Colossus_cox_ph_transition_CR(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP cens_vecSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cens_vec(cens_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_ph_transition_CR(Term_n, tform, a_n, dfc, x_all, fir, der_iden, modelform, Control, df_groups, tu, cens_vec, KeepConstant, term_tot));
    return rcpp_result_gen;
END_RCPP
}
// cox_ph_transition_single
List cox_ph_transition_single(IntegerVector Term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix x_all, int fir, string modelform, List Control, NumericMatrix df_groups, NumericVector tu, IntegerVector KeepConstant, int term_tot);
RcppExport SEXP _Colossus_cox_ph_transition_single(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_ph_transition_single(Term_n, tform, a_n, dfc, x_all, fir, modelform, Control, df_groups, tu, KeepConstant, term_tot));
    return rcpp_result_gen;
END_RCPP
}
// cox_ph_transition_basic
List cox_ph_transition_basic(NumericVector a_n, IntegerVector dfc, NumericMatrix x_all, int der_iden, List Control, NumericMatrix df_groups, NumericVector tu, IntegerVector KeepConstant);
RcppExport SEXP _Colossus_cox_ph_transition_basic(SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP der_idenSEXP, SEXP ControlSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP KeepConstantSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_ph_transition_basic(a_n, dfc, x_all, der_iden, Control, df_groups, tu, KeepConstant));
    return rcpp_result_gen;
END_RCPP
}
// cox_ph_STRATA
List cox_ph_STRATA(IntegerVector Term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix x_all, int fir, int der_iden, string modelform, List Control, NumericMatrix df_groups, NumericVector tu, IntegerVector KeepConstant, int term_tot, IntegerVector STRATA_vals);
RcppExport SEXP _Colossus_cox_ph_STRATA(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP STRATA_valsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type STRATA_vals(STRATA_valsSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_ph_STRATA(Term_n, tform, a_n, dfc, x_all, fir, der_iden, modelform, Control, df_groups, tu, KeepConstant, term_tot, STRATA_vals));
    return rcpp_result_gen;
END_RCPP
}
// cox_ph_plot
List cox_ph_plot(IntegerVector Term_n, StringVector tform, NumericVector a_n, NumericVector a_er, IntegerVector dfc, NumericMatrix x_all, int fir, int der_iden, string modelform, List Control, NumericMatrix df_groups, NumericVector tu, IntegerVector KeepConstant, int term_tot, vector<string> Plot_Type, int uniq_v);
RcppExport SEXP _Colossus_cox_ph_plot(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP a_erSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP Plot_TypeSEXP, SEXP uniq_vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_er(a_erSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< vector<string> >::type Plot_Type(Plot_TypeSEXP);
    Rcpp::traits::input_parameter< int >::type uniq_v(uniq_vSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_ph_plot(Term_n, tform, a_n, a_er, dfc, x_all, fir, der_iden, modelform, Control, df_groups, tu, KeepConstant, term_tot, Plot_Type, uniq_v));
    return rcpp_result_gen;
END_RCPP
}
// cox_ph_schoenfeld_transition
List cox_ph_schoenfeld_transition(IntegerVector Term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix x_all, int fir, int der_iden, string modelform, List Control, NumericMatrix df_groups, NumericVector tu, IntegerVector KeepConstant, int term_tot);
RcppExport SEXP _Colossus_cox_ph_schoenfeld_transition(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_ph_schoenfeld_transition(Term_n, tform, a_n, dfc, x_all, fir, der_iden, modelform, Control, df_groups, tu, KeepConstant, term_tot));
    return rcpp_result_gen;
END_RCPP
}
// poisson_transition
List poisson_transition(NumericMatrix dfe, IntegerVector Term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix x_all, int fir, int der_iden, string modelform, List Control, IntegerVector KeepConstant, int term_tot);
RcppExport SEXP _Colossus_poisson_transition(SEXP dfeSEXP, SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dfe(dfeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_transition(dfe, Term_n, tform, a_n, dfc, x_all, fir, der_iden, modelform, Control, KeepConstant, term_tot));
    return rcpp_result_gen;
END_RCPP
}
// poisson_transition_single
List poisson_transition_single(NumericMatrix dfe, IntegerVector Term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix x_all, int fir, string modelform, List Control, IntegerVector KeepConstant, int term_tot);
RcppExport SEXP _Colossus_poisson_transition_single(SEXP dfeSEXP, SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dfe(dfeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_transition_single(dfe, Term_n, tform, a_n, dfc, x_all, fir, modelform, Control, KeepConstant, term_tot));
    return rcpp_result_gen;
END_RCPP
}
// poisson_strata_transition
List poisson_strata_transition(NumericMatrix dfe, IntegerVector Term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix x_all, int fir, int der_iden, string modelform, List Control, IntegerVector KeepConstant, int term_tot, IntegerVector STRATA_vals);
RcppExport SEXP _Colossus_poisson_strata_transition(SEXP dfeSEXP, SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP STRATA_valsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dfe(dfeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type STRATA_vals(STRATA_valsSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_strata_transition(dfe, Term_n, tform, a_n, dfc, x_all, fir, der_iden, modelform, Control, KeepConstant, term_tot, STRATA_vals));
    return rcpp_result_gen;
END_RCPP
}
// Stress_Test
void Stress_Test(IntegerVector Term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix x_all, int fir, int der_iden, string modelform, List Control, NumericMatrix df_groups, NumericVector tu, IntegerVector KeepConstant, int term_tot, StringVector test_point);
RcppExport SEXP _Colossus_Stress_Test(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP der_idenSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP df_groupsSEXP, SEXP tuSEXP, SEXP KeepConstantSEXP, SEXP term_totSEXP, SEXP test_pointSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< int >::type der_iden(der_idenSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type KeepConstant(KeepConstantSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    Rcpp::traits::input_parameter< StringVector >::type test_point(test_pointSEXP);
    Stress_Test(Term_n, tform, a_n, dfc, x_all, fir, der_iden, modelform, Control, df_groups, tu, KeepConstant, term_tot, test_point);
    return R_NilValue;
END_RCPP
}
// cox_ph_null
List cox_ph_null(List Control, NumericMatrix df_groups, NumericVector tu);
RcppExport SEXP _Colossus_cox_ph_null(SEXP ControlSEXP, SEXP df_groupsSEXP, SEXP tuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type df_groups(df_groupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_ph_null(Control, df_groups, tu));
    return rcpp_result_gen;
END_RCPP
}
// cox_ph_risk_sub
NumericVector cox_ph_risk_sub(IntegerVector Term_n, StringVector tform, NumericVector a_n, IntegerVector dfc, NumericMatrix x_all, int fir, string modelform, List Control, int term_tot);
RcppExport SEXP _Colossus_cox_ph_risk_sub(SEXP Term_nSEXP, SEXP tformSEXP, SEXP a_nSEXP, SEXP dfcSEXP, SEXP x_allSEXP, SEXP firSEXP, SEXP modelformSEXP, SEXP ControlSEXP, SEXP term_totSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Term_n(Term_nSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_n(a_nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dfc(dfcSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_all(x_allSEXP);
    Rcpp::traits::input_parameter< int >::type fir(firSEXP);
    Rcpp::traits::input_parameter< string >::type modelform(modelformSEXP);
    Rcpp::traits::input_parameter< List >::type Control(ControlSEXP);
    Rcpp::traits::input_parameter< int >::type term_tot(term_totSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_ph_risk_sub(Term_n, tform, a_n, dfc, x_all, fir, modelform, Control, term_tot));
    return rcpp_result_gen;
END_RCPP
}
// Write_Time_Dep
void Write_Time_Dep(const NumericMatrix df0_Times, const NumericMatrix df0_dep, const NumericMatrix df0_const, const NumericVector df0_event, double dt, string filename, StringVector tform, NumericVector tu, bool iscox);
RcppExport SEXP _Colossus_Write_Time_Dep(SEXP df0_TimesSEXP, SEXP df0_depSEXP, SEXP df0_constSEXP, SEXP df0_eventSEXP, SEXP dtSEXP, SEXP filenameSEXP, SEXP tformSEXP, SEXP tuSEXP, SEXP iscoxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type df0_Times(df0_TimesSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type df0_dep(df0_depSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type df0_const(df0_constSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type df0_event(df0_eventSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< StringVector >::type tform(tformSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< bool >::type iscox(iscoxSEXP);
    Write_Time_Dep(df0_Times, df0_dep, df0_const, df0_event, dt, filename, tform, tu, iscox);
    return R_NilValue;
END_RCPP
}
// Gen_Fac_Par
NumericMatrix Gen_Fac_Par(const NumericMatrix df0, const NumericVector vals, const NumericVector cols, const int nthreads);
RcppExport SEXP _Colossus_Gen_Fac_Par(SEXP df0SEXP, SEXP valsSEXP, SEXP colsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Gen_Fac_Par(df0, vals, cols, nthreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Colossus_vec_norm", (DL_FUNC) &_Colossus_vec_norm, 2},
    {"_Colossus_removeRow", (DL_FUNC) &_Colossus_removeRow, 2},
    {"_Colossus_removeColumn", (DL_FUNC) &_Colossus_removeColumn, 2},
    {"_Colossus_Make_subterms", (DL_FUNC) &_Colossus_Make_subterms, 21},
    {"_Colossus_Make_subterms_Single", (DL_FUNC) &_Colossus_Make_subterms_Single, 17},
    {"_Colossus_Make_subterms_Basic", (DL_FUNC) &_Colossus_Make_subterms_Basic, 7},
    {"_Colossus_Prep_Basic", (DL_FUNC) &_Colossus_Prep_Basic, 10},
    {"_Colossus_Make_Risks", (DL_FUNC) &_Colossus_Make_Risks, 23},
    {"_Colossus_Make_Risks_Single", (DL_FUNC) &_Colossus_Make_Risks_Single, 17},
    {"_Colossus_Make_Risks_Basic", (DL_FUNC) &_Colossus_Make_Risks_Basic, 11},
    {"_Colossus_Make_Groups", (DL_FUNC) &_Colossus_Make_Groups, 7},
    {"_Colossus_Make_Groups_CR", (DL_FUNC) &_Colossus_Make_Groups_CR, 9},
    {"_Colossus_Make_Groups_STRATA", (DL_FUNC) &_Colossus_Make_Groups_STRATA, 8},
    {"_Colossus_Make_Groups_STRATA_CR", (DL_FUNC) &_Colossus_Make_Groups_STRATA_CR, 10},
    {"_Colossus_Calculate_Sides", (DL_FUNC) &_Colossus_Calculate_Sides, 16},
    {"_Colossus_Calculate_Sides_CR", (DL_FUNC) &_Colossus_Calculate_Sides_CR, 17},
    {"_Colossus_Calculate_Sides_Single", (DL_FUNC) &_Colossus_Calculate_Sides_Single, 9},
    {"_Colossus_Calculate_Sides_Single_CR", (DL_FUNC) &_Colossus_Calculate_Sides_Single_CR, 10},
    {"_Colossus_Calculate_Sides_STRATA", (DL_FUNC) &_Colossus_Calculate_Sides_STRATA, 17},
    {"_Colossus_Calculate_Sides_STRATA_Single", (DL_FUNC) &_Colossus_Calculate_Sides_STRATA_Single, 11},
    {"_Colossus_Calculate_Sides_STRATA_CR", (DL_FUNC) &_Colossus_Calculate_Sides_STRATA_CR, 18},
    {"_Colossus_Calculate_Sides_STRATA_Single_CR", (DL_FUNC) &_Colossus_Calculate_Sides_STRATA_Single_CR, 12},
    {"_Colossus_Calc_LogLik", (DL_FUNC) &_Colossus_Calc_LogLik, 22},
    {"_Colossus_Calc_LogLik_Basic", (DL_FUNC) &_Colossus_Calc_LogLik_Basic, 21},
    {"_Colossus_Calc_LogLik_Basic_Single", (DL_FUNC) &_Colossus_Calc_LogLik_Basic_Single, 12},
    {"_Colossus_Calc_LogLik_Single", (DL_FUNC) &_Colossus_Calc_LogLik_Single, 11},
    {"_Colossus_Calc_LogLik_STRATA", (DL_FUNC) &_Colossus_Calc_LogLik_STRATA, 23},
    {"_Colossus_Calc_LogLik_STRATA_BASIC", (DL_FUNC) &_Colossus_Calc_LogLik_STRATA_BASIC, 22},
    {"_Colossus_Poisson_LogLik", (DL_FUNC) &_Colossus_Poisson_LogLik, 13},
    {"_Colossus_Poisson_LogLik_Single", (DL_FUNC) &_Colossus_Poisson_LogLik_Single, 6},
    {"_Colossus_Intercept_Bound", (DL_FUNC) &_Colossus_Intercept_Bound, 9},
    {"_Colossus_Calc_Change", (DL_FUNC) &_Colossus_Calc_Change, 19},
    {"_Colossus_Calc_Change_Basic", (DL_FUNC) &_Colossus_Calc_Change_Basic, 14},
    {"_Colossus_Calculate_Null_Sides", (DL_FUNC) &_Colossus_Calculate_Null_Sides, 7},
    {"_Colossus_Calc_Null_LogLik", (DL_FUNC) &_Colossus_Calc_Null_LogLik, 9},
    {"_Colossus_LogLik_Cox_PH", (DL_FUNC) &_Colossus_LogLik_Cox_PH, 26},
    {"_Colossus_LogLik_Cox_PH_basic", (DL_FUNC) &_Colossus_LogLik_Cox_PH_basic, 21},
    {"_Colossus_LogLik_Cox_PH_STRATA", (DL_FUNC) &_Colossus_LogLik_Cox_PH_STRATA, 27},
    {"_Colossus_Cox_PH_PLOT_SURV", (DL_FUNC) &_Colossus_Cox_PH_PLOT_SURV, 18},
    {"_Colossus_Cox_PH_PLOT_RISK", (DL_FUNC) &_Colossus_Cox_PH_PLOT_RISK, 18},
    {"_Colossus_Schoenfeld_Cox_PH", (DL_FUNC) &_Colossus_Schoenfeld_Cox_PH, 18},
    {"_Colossus_LogLik_Poisson", (DL_FUNC) &_Colossus_LogLik_Poisson, 24},
    {"_Colossus_LogLik_Poisson_STRATA", (DL_FUNC) &_Colossus_LogLik_Poisson_STRATA, 26},
    {"_Colossus_Stress_Run", (DL_FUNC) &_Colossus_Stress_Run, 27},
    {"_Colossus_LogLik_Cox_PH_null", (DL_FUNC) &_Colossus_LogLik_Cox_PH_null, 5},
    {"_Colossus_RISK_SUBSET", (DL_FUNC) &_Colossus_RISK_SUBSET, 11},
    {"_Colossus_LogLik_Cox_PH_Single", (DL_FUNC) &_Colossus_LogLik_Cox_PH_Single, 15},
    {"_Colossus_LogLik_Poisson_Single", (DL_FUNC) &_Colossus_LogLik_Poisson_Single, 13},
    {"_Colossus_LogLik_Cox_PH_CR", (DL_FUNC) &_Colossus_LogLik_Cox_PH_CR, 28},
    {"_Colossus_cox_ph_transition", (DL_FUNC) &_Colossus_cox_ph_transition, 13},
    {"_Colossus_cox_ph_transition_CR", (DL_FUNC) &_Colossus_cox_ph_transition_CR, 14},
    {"_Colossus_cox_ph_transition_single", (DL_FUNC) &_Colossus_cox_ph_transition_single, 12},
    {"_Colossus_cox_ph_transition_basic", (DL_FUNC) &_Colossus_cox_ph_transition_basic, 8},
    {"_Colossus_cox_ph_STRATA", (DL_FUNC) &_Colossus_cox_ph_STRATA, 14},
    {"_Colossus_cox_ph_plot", (DL_FUNC) &_Colossus_cox_ph_plot, 16},
    {"_Colossus_cox_ph_schoenfeld_transition", (DL_FUNC) &_Colossus_cox_ph_schoenfeld_transition, 13},
    {"_Colossus_poisson_transition", (DL_FUNC) &_Colossus_poisson_transition, 12},
    {"_Colossus_poisson_transition_single", (DL_FUNC) &_Colossus_poisson_transition_single, 11},
    {"_Colossus_poisson_strata_transition", (DL_FUNC) &_Colossus_poisson_strata_transition, 13},
    {"_Colossus_Stress_Test", (DL_FUNC) &_Colossus_Stress_Test, 14},
    {"_Colossus_cox_ph_null", (DL_FUNC) &_Colossus_cox_ph_null, 3},
    {"_Colossus_cox_ph_risk_sub", (DL_FUNC) &_Colossus_cox_ph_risk_sub, 9},
    {"_Colossus_Write_Time_Dep", (DL_FUNC) &_Colossus_Write_Time_Dep, 9},
    {"_Colossus_Gen_Fac_Par", (DL_FUNC) &_Colossus_Gen_Fac_Par, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_Colossus(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
