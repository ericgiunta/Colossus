[{"path":"/articles/Alt_Distrib_Starts.html","id":"general-theory","dir":"Articles","previous_headings":"","what":"General Theory","title":"Distributed_Start_Framework","text":"many instances, final value returned regression may depend starting point regression. cases user gets around running multiple regressions different starting points different learning rates. Colossus includes several functions built automate process several situations user may find . vignette cover descriptions several situations use distributed start functions, descriptions inputs function.","code":""},{"path":[]},{"path":"/articles/Alt_Distrib_Starts.html","id":"large-multi-dimensional-space","dir":"Articles","previous_headings":"Common Convergence Issues","what":"Large Multi-Dimensional Space","title":"Distributed_Start_Framework","text":"Generally speaking optimization methods used Colossus similar software based using derivatives improve log-likelihood measure deviance. methods search optimum, guaranteed global optimum. final solution may dependent initial regression conditions. model small number covariates well understood relationship covariate event, user may able start regression near global optimum. model composed hundreds covariates, becomes less likely. solution experienced user might come try multiple starting points see converge solution. Colossus tries make easier automating process. user provides Colossus initial starting point try parameters controlling many random points try generate . Currently Colossus supports uniformly generated points user provided minimum maximum values. log-linear terms generally different range acceptable values linear terms, different minimum maximum values can given log-linear terms options. one special case large multi-dimensional spaces given separate function. general multi-term models. case assumes model can split multiple independent terms can solved separately. Colossus automates splitting model simplified form, searching solution, substituting final solution simplified model full model, searching solution full model near solution simplified model.","code":""},{"path":"/articles/Alt_Distrib_Starts.html","id":"infeasible-parameter-spaces","dir":"Articles","previous_headings":"Common Convergence Issues","what":"Infeasible Parameter Spaces","title":"Distributed_Start_Framework","text":"risks calculated Cox Proportional Hazards Poisson regressions generally assumed strictly positive values. use log-likelihoods scoring metric wouldn’t possible without assumption. However possible , regression, risk may calculated set parameters give negative probability event. illustrate consider following poisson model. \\[ \\begin{aligned}     \\lambda(\\alpha,z, \\beta, x) = (1+\\alpha*z \\times \\exp{(\\beta \\times x)})\\\\     E(\\alpha,z, \\beta, x, t) =  \\lambda(\\alpha,z, \\beta, x) * t \\end{aligned} \\] number events predicted interval proportional risk number person-years. exponential term always strictly positive, \\(\\alpha\\) negative risk number events can also negative. Suppose several ranges parameters give negative event rates get following plot score parameter values: -2*Log-Likelihood Infeasible Points Removed plot, ranges missing data show points infeasible. goal regression reduce Log-Likelihood close 0, solution near point \\((-2,-2)\\). regression started near origin may end either infeasible ranges. user might catch issue -hand start regression carefully avoid infeasible ranges. Colossus can automate process sampling across range possible values automatically remove infeasible points.","code":"x <- c(-2.0, -1.667, -1.333, -1.0, -0.667, -0.333, 0.0, -2.0, -1.667, -1.333, -1.0, -0.667,        -0.333, 0.0, -2.0, -1.667, -1.333, -1.0, -0.667, -0.333, 0.0, -2.0, -1.667, -1.333,        -1.0, -0.667, -0.333, 0.0, -2.333, -2.0, -1.667, -1.333, -0.667, -0.333, 0.0, -3.0,        -2.667, -2.333, -2.0, -1.667, -0.333, 0.0, -3.0, -2.667, -2.333, -2.0, 0.0, -3.0,        -2.667, -2.333, -2.0, -1.667, -0.333, 0.0, -3.0, -2.667, -2.333, -2.0, -1.667,         -1.333, -0.667, -0.333, 0.0, -3.0, -2.667, -2.333, -2.0, -1.667, -1.333, -1.0,        -0.667, -0.333, 0.0) y <- c(-3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -2.667, -2.667, -2.667, -2.667, -2.667,        -2.667, -2.667, -2.333, -2.333, -2.333, -2.333, -2.333, -2.333, -2.333, -2.0, -2.0,        -2.0, -2.0, -2.0, -2.0, -2.0, -1.667, -1.667, -1.667, -1.667, -1.667, -1.667, -1.667,        -1.333, -1.333, -1.333, -1.333, -1.333, -1.333, -1.333, -1.0, -1.0, -1.0, -1.0,        -1.0, -0.667, -0.667, -0.667, -0.667, -0.667, -0.667, -0.667, -0.333, -0.333,        -0.333, -0.333, -0.333, -0.333, -0.333, -0.333, -0.333, 0.0, 0.0, 0.0, 0.0, 0.0,         0.0, 0.0, 0.0, 0.0, 0.0) c <- c(3.0, 3.85, 4.46, 4.896, 5.209, 5.433, 5.594, 2.278, 3.333, 4.089, 4.631, 5.019, 5.297,        5.496, 1.455, 2.744, 3.667, 4.328, 4.802, 5.142, 5.385, 0.563, 2.105, 3.209, 4.0, 4.567,        4.973, 5.264, 3.674, 2.754, 1.47, 2.754, 4.333, 4.806, 5.144, 5.315, 5.045, 4.667, 4.139,        3.403, 4.667, 5.045, 5.632, 5.487, 5.283, 5.0, 5.0, 5.824, 5.755, 5.658, 5.522, 5.333,        4.702, 5.07, 5.937, 5.912, 5.877, 5.829, 5.761, 5.667, 5.351, 5.094, 5.351, 6.0, 6.0,        6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0) dft <- data.table(\"x\"=x,\"y\"=y,\"c\"=c) g <- ggplot() + geom_point(data=dft, aes(x=.data$x, y=.data$y,     color=.data$c), size=4) +      scale_fill_continuous(guide = guide_colourbar(title=\"-2*Log-Likelihood\")) +     xlab(\"Linear Parameter\") + ylab(\"Log-Linear Parameter\") g + scale_colour_viridis_c()"},{"path":"/articles/Alt_Distrib_Starts.html","id":"provided-functions","dir":"Articles","previous_headings":"","what":"Provided Functions","title":"Distributed_Start_Framework","text":"use parameters respective Cox Proportional Hazards Poisson regression functions use, addition control term listing options guessing process. “rmin” “rmax” used, remaining \"_min\" \"_max\" values used instead. “guess_constant” values take priority “rmin” “rmax” values.","code":""},{"path":"/articles/Alt_Run_opt.html","id":"general-options","dir":"Articles","previous_headings":"","what":"General Options","title":"Alternative_Regression_Options","text":"Cox PH Poisson regressions additional functions can account specific situations. general situations follows: following sections review math behind basic functions option changes .","code":""},{"path":[]},{"path":"/articles/Alt_Run_opt.html","id":"cox-proportional-hazards","dir":"Articles","previous_headings":"Stratification","what":"Cox Proportional Hazards","title":"Alternative_Regression_Options","text":"Cox Proportional Hazards, Log-Likelihood calculated taking ratio hazard ratio event sum hazard ratios every row risk. defines risk group every event time intervals containing event time. Intervals assumed open left closed right, events assumed take place right end point. gives following common equation Log-Likelihood: \\[ \\begin{aligned}     Ll = \\prod_{}^{n} \\left( \\frac{r_{}}{\\sum_{j: t_j \\R_i} r_j} \\right)^{\\delta_i} \\end{aligned} \\] r denotes hazard ratios, denominator sum hazard ratios intervals containing event time, term raised power 1 interval event 0 otherwise. Different tie methods modify denominator based order events assumed, general form still stands. goal compare event interval intervals within similar time span. Stratification adds additional condition. user stratifies covariate “F” risk group split subgroups value “F”. goal becomes compare event intervals intervals similar strata time. done remove influence stratification variables calculations. code done adding additional parameter stratification column using different function call regression.","code":"Strat_Col <- \"e\" e <- RunCoxRegression_STRATA(df, time1, time2, event, names, Term_n, tform, keep_constant,                              a_n, modelform, fir, der_iden, control,Strat_Col)"},{"path":"/articles/Alt_Run_opt.html","id":"poisson-regression","dir":"Articles","previous_headings":"Stratification","what":"Poisson Regression","title":"Alternative_Regression_Options","text":"Poisson regression doesn’t risk groups account , theory . remove influence stratification covariate new term added account effects. Colossus, Log-Linear term. following may model used without stratification: \\[ \\begin{aligned}     R = \\sum_i (x_i \\cdot \\beta_i) \\end{aligned} \\] stratified model may look like : \\[ \\begin{aligned}     R = (\\sum_i (x_i \\cdot \\beta_i)) \\times (1 + \\exp{(\\sum_j (x_j \\cdot \\beta_j))}) \\end{aligned} \\] results associated non-stratified parameters returned default. average event rate calculated every strata level, weights calculated risks. code done adding list stratification columns using different function call regression. Colossus combines list stratification columns single interaction, matter user provides list combines .","code":"Strat_Col <- c(\"e\") e <-RunPoissonRegression_STRATA(df, pyr, event, names, Term_n, tform, keep_constant,                                 a_n, modelform, fir, der_iden, control,Strat_Col)"},{"path":"/articles/Alt_Run_opt.html","id":"simplified-model","dir":"Articles","previous_headings":"","what":"Simplified Model","title":"Alternative_Regression_Options","text":"inclusion linear subterms, additive models, multiple terms means default Colossus calculates stores every derivative assuming every value needed. equation log-linear one term, many simplifications can made. option designed make simplifications. particular one subterm type means hazard ratios derivatives can calculated directly, subterm type exponential means logarithm hazard ratio Log-Likelihood calculation simplified. tests, using simplified function able save approximately 40% time versus full code used. Assuming general parameters vignettes, code follows:","code":"e <- RunCoxRegression_Basic(df, time1, time2, event, names,                             keep_constant, a_n, der_iden, control)"},{"path":"/articles/Alt_Run_opt.html","id":"non-derivative-calculation","dir":"Articles","previous_headings":"","what":"Non-Derivative Calculation","title":"Alternative_Regression_Options","text":"Colossus uses Newton’s method perform regression, can become computationally complex number terms formula increases. Colossus contains functions calculate scores parameter set, skip intensive derivative calculations. results used perform bisection method regression plot dependence score parameter values. Colossus current state use functions, left user’s convenience. code similar previous examples:","code":"e <- RunCoxRegression_Single(df, time1, time2, event, names, Term_n, tform,                              a_n, modelform, fir, control)  e <- RunPoissonRegression_Single(df, pyr, event, names, Term_n, tform,                                  a_n, modelform, fir, control)"},{"path":"/articles/Alt_Run_opt.html","id":"competing-risks","dir":"Articles","previous_headings":"","what":"Competing Risks","title":"Alternative_Regression_Options","text":"Cox PH assumption every individual recorded event naturally censored, censoring rates assumed apply every individual. violated competing event occurring. sensitivity analysis two extremes can tested. Either every person competing event treated event interest instead, assumed never experience event interest. However methods find realistic alternative. Colossus applies Fine-Gray model competing risks, instead weights contribution competing event intervals future intervals probability wouldn’t censored. previously established, risk groups formed measure probability individual survived time experienced event interest, given experience event time: \\[ \\begin{aligned}     \\lambda(t) = \\lim_{\\Delta t \\0} \\frac{(P(t \\leq T \\leq t + \\Delta t)\\text{ }(k=1), T \\geq t)}{\\Delta t} \\end{aligned} \\] competing risks model adjusts probability individual survived time experienced event interest, given experience event time survived previous time experienced event: \\[ \\begin{aligned}     \\lambda(t) = \\lim_{\\Delta t \\0} \\frac{(P(t \\leq T \\leq t + \\Delta t)\\text{ }(k=1), (T \\geq t)\\text{ }((T < t)\\text{ }(k \\neq 1)))}{\\Delta t} \\end{aligned} \\] means risks groups contain intervals actually risk intervals competing events treated risk. assume time-dependent covariates used, remains weight contribution competing events. goal quantify probability interval uncensored new event time given uncensored competing event time. Colossus handles fitting survival curve censoring using ratio surviving proportion weight intervals. \\[ \\begin{aligned}    W_i(j) = min \\left(\\frac{S(t_j)}{S(t_i)},1 \\right) \\end{aligned} \\] given event time, every competing event interval right interval limit event time every interval without events right interval limit event time. competing events weighting 1 every interval weighting set 1. code, call similar standard function. process finding weighting included . example assume event column, lung, contain 0 events, 1 primary event, 2 competing event. ID column used determine individuals events censored.","code":"df$censor <- (df$lung==0) #censoring column made event <- \"censor\" #event type switched to censoring  plot_options <- list(\"name\"=\"run_2\",\"verbose\"=FALSE,\"studyID\"=\"studyID\",\"age_unit\"=\"years\") #modified plotting function used to get censoring weights dft <- GetCensWeight(df, time1, time2, event, names, Term_n, tform, keep_constant,                      a_n, modelform, fir, control, plot_options) #generates a survival curve t_ref <- dft$t surv_ref <- dft$surv t_c <- df$t1 cens_weight <- approx(t_ref, surv_ref, t_c,rule=2)$y #the surviving proportions used as censoring weight event <- \"lung\" #event switched back  e <- RunCoxRegression_CR(df, time1, time2, event, names, Term_n, tform, keep_constant,                          a_n, modelform, fir, der_iden, control,cens_weight)"},{"path":"/articles/Time_Dep_Cov.html","id":"general-usage","dir":"Articles","previous_headings":"","what":"General Usage","title":"Time_Dependent_Covariate_Use","text":"Cox Proportional Hazards regression, model generally assumed independent event time. However complex models, Colossus capability perform regression using covariates change time. can split two general types covariates, step functions changing time multiplicative interactions time. Colossus generates new dataset splitting row original dataset smaller intervals. assumes interval values every covariate approximately constant. Cox Proportional Hazards, rows contain event time used regression, Colossus option use small intervals around event time. option time dependent covariate evaluated event times. data-sets small number discrete event times can save memory.","code":""},{"path":"/articles/Time_Dep_Cov.html","id":"multiplicative-interaction","dir":"Articles","previous_headings":"","what":"Multiplicative Interaction","title":"Time_Dependent_Covariate_Use","text":"simplest type time dependent covariate interaction term time another covariate. Suppose row dataset factor covariate “group” arbitrary endpoints time interval. Colossus starts using user provided function calculate value time dependent covariate endpoints. assume value “group” constant interval time changing linearly. Colossus calculates value time dependent covariate intervals linearly interpolating value endpoints. process assumes interaction linear interval small enough interaction approximately linear. Linear Interpolated Function \\[ \\begin{aligned}     Y(x)=x^2 + 1 \\end{aligned} \\] helpful situation user continuous data series intervals believes values can interpolated within interval.","code":"dft <- data.table(\"x\"=c(1,2,3),\"y\"=c(2,5,10)) g <- ggplot2::ggplot(dft,ggplot2::aes(x=.data$x, y=.data$y)) +       ggplot2::geom_point(color=\"black\") +       ggplot2::geom_line(color=\"black\",alpha=1) +       ggplot2::labs(x=\"age (days)\", y=\"Covariate Value\") x <- seq(1,3,by=0.1) y <- 1+x^2 dft <- data.table(\"x\"=x,\"y\"=y) g <- g + ggplot2::geom_line(data=dft, ggplot2::aes(x=.data$x, y=.data$y),                             color=\"black\",linetype = \"dashed\") g"},{"path":"/articles/Time_Dep_Cov.html","id":"step-function-interaction","dir":"Articles","previous_headings":"","what":"Step Function Interaction","title":"Time_Dependent_Covariate_Use","text":"second type time dependent covariate one changes based conditional statements. One example covariate split data bins time. Colossus uses string identify change value. user inputs string form “#l?” time value “#”, condition “l”, question mark delimiter. Colossus allows four conditions: l: less equal g: greater equal : strictly b: strictly following equivalent “\\(0g?6g?12g?\\)” Linear Interpolated Function \\[ \\begin{aligned}     Y(x)=\\begin{cases} 0 &(x < 0) \\\\ 1 & (x \\ge 0) \\\\ 2 &(x \\ge 6) \\\\ 3 &(x \\ge 12) \\end{cases}\\\\ \\end{aligned} \\] Meanwhile following equivalent “\\(0g?6g?12l?\\)” Linear Interpolated Function \\[ \\begin{aligned}     Y(x)=\\begin{cases} 1 &(x < 0) \\\\ 2 & (x \\ge 0) \\\\ 3 &(x \\ge 6) \\\\ 2 &(x \\ge 12) \\end{cases}\\\\ \\end{aligned} \\] helpful situations user reason believe effect covariate events uniform time despite covariate constant interval. allows user generate list factors interact covariate interest.","code":"dft <- data.table(\"x\"=c(-1,1,5,8,13),\"y\"=c(0,1,1,2,3)) g <- ggplot2::ggplot(dft,ggplot2::aes(x=.data$x, y=.data$y)) +      ggplot2::geom_point(color=\"black\") dft <- data.table(\"x\"=c(-1,-0.01,0,1,5.99,6,11.99,12,13),\"y\"=c(0,0,1,1,1,2,2,3,3)) g <- g + ggplot2::geom_line(data=dft, ggplot2::aes(x=.data$x, y=.data$y), color=\"black\") +          ggplot2::labs(x=\"age (days)\", y=\"Covariate Value\") g dft <- data.table(\"x\"=c(-1,1,5,8,13),\"y\"=c(1,2,2,3,2)) g <- ggplot2::ggplot(dft,ggplot2::aes(x=.data$x, y=.data$y)) +      ggplot2::geom_point(color=\"black\") dft <- data.table(\"x\"=c(-1,-0.01,0,1,5.99,6,11.99,12,13),\"y\"=c(1,1,2,2,2,3,3,2,2)) g <- g + ggplot2::geom_line(data=dft, ggplot2::aes(x=.data$x, y=.data$y), color=\"black\") +          ggplot2::labs(x=\"age (days)\", y=\"Covariate Value\") g"},{"path":"/articles/dose_formula_inputs.html","id":"dose-response-formula","dir":"Articles","previous_headings":"","what":"Dose Response Formula","title":"Dose_Response_Formula_Terms","text":"previously discussed, Colossus features term composed sum multiple linear non-linear term can used define many dose response curves used radiation epidemiology. terms referred dose response terms, nothing prohibiting used non-dose covariates. following formula available, reproduced starting description vignette. \\[ \\begin{aligned}     S_{NL}=\\sum_i (\\alpha_i \\times \\exp(x_i \\cdot \\beta_i)) + \\sum_i (\\beta_i \\cdot (x_i)^2) + \\sum_i F_{LT} + \\sum_i F_{STP} + \\sum_i F_{LQ} + \\sum_i F_{LEXP}\\\\     F_{LT} = \\begin{cases} \\alpha_i \\cdot (x-\\beta_i) & (x>\\beta_i) \\\\ 0 &\\text{else} \\end{cases}\\\\     F_{STP} = \\begin{cases} \\alpha_i & (x>\\beta_i) \\\\ 0 &\\text{else} \\end{cases}\\\\     F_{LQ} = \\begin{cases} \\beta_i \\cdot x & (x>\\alpha_i) \\\\ \\lambda_i \\cdot x^2 + \\nu_i &\\text{else} \\end{cases}\\\\     F_{LEXP} = \\begin{cases} \\beta_i \\cdot x & (x>\\alpha_i) \\\\ \\lambda_i - \\exp{(\\nu_i + \\mu \\cdot x)} &\\text{else} \\end{cases}\\\\     T_j=S_{LL,j} \\times S_{L,j} \\times S_{PL,j} \\times S_{NL,j} \\end{aligned} \\] every subterm type 1 3 parameters fully define curve. Linear-Quadratic Linear-Exponential curves continuously-differentiable, 2-3 parameters can set. \\[ \\begin{aligned}     \\lambda_{LQ} = \\beta_{LQ}/(2\\alpha_{LQ})\\\\     \\nu_{LQ} = (\\beta_{LQ}*\\alpha_{LQ})/2\\\\     \\nu_{LEXP} = \\ln(\\beta_{LEXP})-\\ln(\\mu_{LEXP})+\\mu_{LEXP}*\\alpha_{LEXP}\\\\     \\lambda_{LEXP} = \\beta_{LEXP}*\\alpha_{LEXP}+exp(\\nu_{LEXP}-\\mu_{LEXP}*\\alpha_{LEXP}) \\end{aligned} \\]","code":""},{"path":"/articles/dose_formula_inputs.html","id":"using-the-different-subterms","dir":"Articles","previous_headings":"","what":"Using The Different subterms","title":"Dose_Response_Formula_Terms","text":"linear-exponential linear-quadratic curves must either completely fixed completely free. contrast exponential, linear threshold, step function curves can partially fixed. exponential term can provided covariate exponent assume magnitude 1. linear threshold step functions can provided fixed threshold covariate, can used define linear--threshold model combination linear step functions known threshold. One issue dose response formulas order important. instance, loglin_slope listed prior loglin_top used. slope Linear Threshold Step Functions given prior intercepts. Slopes listed prior intercept Linear-Quadratic Linear-Exponential models lin_exp_exp_slope listed last. “Correct_Formula_Order” function provided handle correct order. Colossus automatically calls function prior regression.","code":"Term_n <- c(0,1,1,0,0) tform <- c(\"loglin\",'quad_slope','lin', \"lin_int\", \"lin_slope\") keep_constant <- c(0,0,0,1,0) a_n <- c(1,2,3,4,5) names <- c(\"a\",\"a\",\"a\",\"a\",\"a\") val <- Correct_Formula_Order(Term_n, tform, keep_constant, a_n, names) Term_n <- val$Term_n tform <- val$tform keep_constant <- val$keep_constant a_n <- val$a_n der_iden <- val$der_iden names <- val$names"},{"path":[]},{"path":"/articles/starting-description.html","id":"model-structure","dir":"Articles","previous_headings":"","what":"Model Structure","title":"Colossus_Description","text":"full potential, Colossus able analyze vast number possible risk/rate models. Specifically Colossus designed allow combination linear non-linear models estimate cox proportional hazard ratios, Poisson model rates, Fine-Grey Competing risks ratios. simplest exponential model. simplest model generally used hazard ratios survival analysis exponential linear function covariates. \\[ \\begin{aligned}     R(\\vec{\\beta},\\vec{x})=\\exp(\\vec{\\beta} \\cdot \\vec{x}) \\end{aligned} \\] Colossus, general model extended abstracting sum product terms subterms. vignette, value calculated quantify risk event denoted risk, R, however exact meaning differs. Cox proportional hazard modeling, risk calculated hazard ratio. poisson modeling risk calculated estimated number events per person-year. risk (\\(R\\)) set formula dependent terms (\\(T\\)). term formula dependent product subterms (\\(S\\)). subterm function single covariate (\\(x\\)) several parameters (\\(\\alpha,\\beta\\)). currently five types risk models available. risk can expressed additive model (\\(R_A\\)), product additive model (\\(R_{PA}\\)), Product additive excess model (\\(R_{PAE}\\)), multiplicative excess model (\\(R_M\\)), geometric mixture model relative risks excess risks (\\(R_{GMIX}\\)). \\[ \\begin{aligned}     R_{}= \\sum_{=0}^n T_i\\\\     R_{PA}= T_0 \\times \\sum_{=1}^n T_i\\\\     R_{PAE}= T_0 \\times (1 + \\sum_{=1}^n T_i)\\\\     R_{M}= T_0 \\times \\prod_{=1}^n( 1 + T_i)\\\\     R_{GMIX} = T_0 \\times \\left(\\prod_{=1}^n(T^{*}_i) \\right) ^ \\theta \\times \\left( 1 + \\sum_{=1}^n (T^{*}_i - 1) \\right)^{1-\\theta}\\\\     T^{*}_i = \\begin{cases} T_i &\\text{Relative Risk} \\\\ T_i+1 &\\text{Excess Risk} \\end{cases}\\\\ \\end{aligned} \\] term composed combination 4 types subterms. Every covariate part log-linear subterm, linear subterm, product-linear subterm, general non-linear term. log-linear subterm (\\(S_{ll}\\)) exponential linear combination covariates. linear subterm (\\(S_l\\)) linear combination covariates. product-linear subterm (\\(S_{PL}\\)) one plus linear combination covariates. general non-linear term (\\(S_{NL}\\)) sum exponential terms, quadratic terms, linear-threshold terms (\\(F_{LT}\\)), step function terms (\\(F_{STP}\\)), linear-quadratic terms (\\(F_{LQ}\\)), linear-exponential terms (\\(F_{LEXP}\\)). term product non-empty subterms. \\[ \\begin{aligned}     S_{LL}=\\prod_{} (\\exp{(x_i \\cdot \\beta_i)})\\\\     S_{L}=\\sum_i (x_i \\cdot \\beta_i)\\\\     S_{PL}=1+ \\sum (x_i \\cdot \\beta_i)\\\\     S_{NL}=\\sum_i (\\alpha_i \\times \\exp(x_i \\cdot \\beta_i)) + \\sum_i (\\beta_i \\cdot (x_i)^2) + \\sum_i F_{LT} + \\sum_i F_{STP} + \\sum_i F_{LQ} + \\sum_i F_{LEXP}\\\\     F_{LT} = \\begin{cases} \\alpha_i \\cdot (x-\\beta_i) & (x>\\beta_i) \\\\ 0 &\\text{else} \\end{cases}\\\\     F_{STP} = \\begin{cases} \\alpha_i & (x>\\beta_i) \\\\ 0 &\\text{else} \\end{cases}\\\\     F_{LQ} = \\begin{cases} \\beta_i \\cdot x & (x>\\alpha_i) \\\\ \\lambda_i \\cdot x^2 + \\nu_i &\\text{else} \\end{cases}\\\\     F_{LEXP} = \\begin{cases} \\beta_i \\cdot x & (x>\\alpha_i) \\\\ \\lambda_i - \\exp{(\\nu_i + \\mu \\cdot x)} &\\text{else} \\end{cases}\\\\     T_j=S_{LL,j} \\times S_{L,j} \\times S_{PL,j} \\times S_{NL,j} \\end{aligned} \\] short, every element risk model subterm type, term number, covariate, parameter value.","code":""},{"path":"/articles/starting-description.html","id":"using-the-standard-model","dir":"Articles","previous_headings":"","what":"Using The Standard Model","title":"Colossus_Description","text":"Colossus every equation defined similar fashion. user side code, elements risk equation can viewed rows table. columns store covariate names, term numbers, subterms types, starting point. complex regression parameters can also set remain constant regression. forces parameter value remain constant remove element risk calculations. Constant elements used risk calculation, used calculating steps standard deviations. multiplicative excess risk model following table equation equivalent. \\[ \\begin{aligned}     R = \\exp{(\\beta_{} \\cdot x_{})} \\times (1+\\beta_{b} \\cdot x_{b} + \\beta_{c} \\cdot x_{c}) \\end{aligned} \\] user wanted update model include new term product-linear subterm, table need updated new row. \\[ \\begin{aligned}     R = \\exp{(\\beta_{} \\cdot x_{})} \\times (1 + (\\beta_{b} \\cdot x_{b} + \\beta_{c} \\cdot x_{c}) \\times (1 + \\beta_{d} \\cdot x_{d})) \\end{aligned} \\] Note multiplicative model taking product terms, product subterms. equation may written subterms distributed different terms multiplicative model without changing final value. exception subterms moved “first” term multiplicative excess model. equation expressed ways different computational complexity. specific model options passed code separate variables. model identifier (, M, PA, PAE, GMIX) passed string. Every model except additive model distinction first remaining terms. Colossus defaults term 0 unique term, however can set used term number without producing error. final table also equivalent following code names denotes column names used, Term_n denotes term numbers, tform denotes subterm formula, modelform denotes term formula, fir denotes “first” term indexed zero defaults 0, a_n denotes initial guesses parameter values. assumed order. function called prior regression reorders inputs order terms, subterm types, etc.","code":"names <- c('a','b','c','d') Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  a_n <- c(0.1, 0.1, 0.1, 0.1)"},{"path":"/articles/starting-description.html","id":"survival-time-and-event-data","dir":"Articles","previous_headings":"","what":"Survival Time and Event Data","title":"Colossus_Description","text":"Colossus performs survival analysis via either Cox Proportional Hazards regression Poisson regression. cases user specifies columns contain time duration events interest. Poisson regression column contains person-years number events row data. Cox Proportional Hazards regression user identifies columns provide starting ending times, column gives event status. event status assumed binary covariate 1 intervals containing event. Colossus supports left censored data, right censored data, interval censored data. data interval censored default, left right censoring handled defining interval endpoints outside minimum maximum event times. Poisson regression user provides columns person-years per row number events. Poisson regression supports non-negative number events. user side, names columns containing time events need given. Lets assume dataframe organized follows: Cox Proportional Hazard need provide three column names: starting age, ending age, event happened interval. case “Starting_Age”, “Ending_Age”, “Cancer_Status”. example interval data, however may always case. Colossus designed allow user input “%trunc%” -place missing side interval. Colossus assumes means person missing endpoint outside available data range creates dummy column reference interval endpoint. code variables look like : Suppose instead interested Poisson regression, difference instead providing interval endpoints give column interval lengths. case need define new column, may case general. Suppose now working following table: just provide duration column event column, “Person_Years” “Cancer_Status”. code looks like following:","code":"df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\"  # Supposing we had left truncated data the following would change time1 <- \"Starting_Age\" time2 <- \"%trunc%\"  # and with right truncated data the following is used time1 <- \"%trunc%\" time2 <- \"Ending_Age\"  #setting back to normal time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" df$Person_Years <- df$Ending_Age -df$Starting_Age pyr <- \"Person_Years\" event <- \"Cancer_Status\""},{"path":"/articles/starting-description.html","id":"control-and-verbosity","dir":"Articles","previous_headings":"","what":"Control and Verbosity","title":"Colossus_Description","text":"Colossus offers several options control input data used returned. can split two general categories. first category convergence parameters. cover number iterations used, limits parameter changes, stopping criteria. second category parameters used debugging additional information. common option verbosity. verbose mode prints time-steps intermediate values sum terms, sum risks, log-likelihood iteration. less common option der_iden parameter, used change one parameter time set amount. used debugging process recording intermediate values plane. option used user conjunction verbose option plot intermediate values parameter value. convergence parameters currently supported general follows: additional information parameters currently supported follows: previous options contained within list parameters, however additional standalone parameters control convergence information. follows: Going back example, code may look like following: example, parameters held constant, 100 iterations 5 half-steps used, regression performed matrix step solutions, breslow’s method tied event times used. errors unused control parameters used, simply ignored. Every commonly required control parameter default value automatically used declared. includes optional list model control options. used nonstandard model options covered vignette.","code":"keep_constant <- c(0,0,0,0) der_iden <- 0  control=list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 100,'halfmax' = 5,'epsilon' = 1e-9,              'dbeta_max' = 0.5,'deriv_epsilon' = 1e-9, 'abs_max'=1.0,'change_all'=TRUE,              'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1)"},{"path":"/articles/starting-description.html","id":"running-the-regression-and-output","dir":"Articles","previous_headings":"","what":"Running the Regression and Output","title":"Colossus_Description","text":"Finally user calls regression function need. names used throughout vignette defaults assumed. Cox PH regression Poisson regression called directly return list results. Colossus contains suite additional checks runs inputs prior starting calculations, designed output explicit details issues. Printing error details may require verbose option TRUE. code functions called follows: following output: cases, regressions converge. Given examples arbitrary unexpected. Cox PH ran iterations decrease step limit, restarted new optimal guess expected continue converging. Poisson regression exited due step limit threshold, means hit local optimum. find better solution user likely either change model equation provide new starting guess. example interpret results Colossus run. additional variants functions described outside section. return similar list results.","code":"# assuming the table of covariates is stored in a data.table \"df\"  e <- RunCoxRegression(df, time1, time2, event, names, Term_n, tform, keep_constant,                       a_n, modelform, fir, der_iden, control) print(e) #> $LogLik #> [1] -0.6753644 #>  #> $First_Der #> [1] -2.220446e-16 -7.187040e-05  7.361232e-05  1.919948e-04 #>  #> $Second_Der #>              [,1]         [,2]          [,3]          [,4] #> [1,] 2.220446e-16 2.710505e-20  1.734723e-18  3.559233e-18 #> [2,] 2.710505e-20 1.742209e-08  7.238366e-07  2.311365e-07 #> [3,] 1.734723e-18 7.238366e-07 -1.501037e-06 -2.356033e-07 #> [4,] 3.559233e-18 2.311365e-07 -2.356033e-07 -3.687577e-06 #>  #> $beta_0 #> [1]  42.97183  98.72266  96.82311 101.10000 #>  #> $Standard_Deviation #> [1]      NaN      NaN 240.8255 520.7003 #>  #> $AIC #> [1] 9.350729 #>  #> $Parameter_Lists #> $Parameter_Lists$Term_n #> [1] 0 1 1 2 #>  #> $Parameter_Lists$tforms #> [1] \"loglin\" \"lin\"    \"lin\"    \"plin\"   #>  #> $Parameter_Lists$names #> [1] \"a\" \"b\" \"c\" \"d\" #>  #>  #> $Control_List #> $Control_List$Iteration #> [1] 100 #>  #> $Control_List$`Maximum Step` #> [1] 1 #>  #> $Control_List$`Derivative Limiting` #> [1] 0.0001919948 #>  #>  #> $Convgerged #> [1] FALSE  #or a poisson regression a_n <- c(0.1, 0.1, 0.1, 0.1) #a_n is updated when either regression is called e <- RunPoissonRegression(df, pyr, event, names, Term_n, tform, keep_constant, a_n,                           modelform, fir, der_iden, control) print(e) #> $LogLik #> [1] -44.73982 #>  #> $First_Der #> [1]   -19.67462  -290.53655 -2314.56447   -19.64770 #>  #> $Second_Der #>              [,1]      [,2]        [,3]          [,4] #> [1,]   -21.674624 -153.3672  -1393.0153    -4.8644043 #> [2,]  -153.367172 -108.7036   -666.9745  -101.9254174 #> [3,] -1393.015328 -666.9745 -21096.6437 -1058.8112374 #> [4,]    -4.864404 -101.9254  -1058.8112    -0.5929361 #>  #> $beta_0 #> [1] -0.40680015 -0.01846667 -0.07585910 -0.70133825 #>  #> $Standard_Deviation #> [1] 0.383529879 0.092209643 0.008136992 0.535536589 #>  #> $AIC #> [1] 93.47964 #>  #> $Deviation #> [1] 85.47964 #>  #> $Parameter_Lists #> $Parameter_Lists$Term_n #> [1] 0 1 1 2 #>  #> $Parameter_Lists$tforms #> [1] \"loglin\" \"lin\"    \"lin\"    \"plin\"   #>  #> $Parameter_Lists$names #> [1] \"a\" \"b\" \"c\" \"d\" #>  #>  #> $Control_List #> $Control_List$Iteration #> [1] 12 #>  #> $Control_List$`Maximum Step` #> [1] 2.910383e-11 #>  #> $Control_List$`Derivative Limiting` #> [1] 2314.564 #>  #>  #> $Converged #> [1] FALSE"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eric Giunta. Author, maintainer. Amir Bahadori. Contributor. Dan Andresen. Contributor. Linda Walsh. Contributor. Benjamin French. Contributor. Lawrence Dauer. Contributor. John Boice Jr. Contributor. Kansas State University. Copyright holder. NASA. Funder. NCRP. Funder. NRC. Funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Giunta E (2023). Colossus: \"Risk Model Regression Analysis Complex Non-Linear Models\". R package version 0.9.3, https://github.com/ericgiunta/Colossus.","code":"@Manual{,   title = {Colossus: \"Risk Model Regression and Analysis with Complex Non-Linear Models\"},   author = {Eric Giunta},   year = {2023},   note = {R package version 0.9.3},   url = {https://github.com/ericgiunta/Colossus}, }"},{"path":"/reference/Calc_Change.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate the change to make each iteration\nCalc_Change Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations — Calc_Change","title":"Utility function to calculate the change to make each iteration\nCalc_Change Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations — Calc_Change","text":"Utility function calculate change make iteration Calc_Change Called update parameter changes, Uses log-likelihoods control parameters, Applies newton steps change limitations","code":""},{"path":"/reference/Calc_Change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate the change to make each iteration\nCalc_Change Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations — Calc_Change","text":"","code":"Calc_Change(   double_step,   nthreads,   totalnum,   der_iden,   dbeta_cap,   dose_abs_max,   lr,   abs_max,   Ll,   Lld,   Lldd,   dbeta,   change_all,   tform,   dint,   dslp,   KeepConstant,   debugging )"},{"path":"/reference/Calc_Change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate the change to make each iteration\nCalc_Change Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations — Calc_Change","text":"double_step controls step calculation, 0 independent changes, 1 solving b=Ax complete matrices nthreads number threads available totalnum total number parameters der_iden subterm number derivative tests dbeta_cap learning rate newton step toward 0 log-likelihood dose_abs_max Maximum allowed threshold parameter change lr learning rate newton step toward 0 derivative abs_max Maximum allowed parameter change Ll Log-likelihood vector Lld Log-likelihood first derivative matrix Lldd Log-likelihood second derivative matrix dbeta parameter change vector change_all boolean every parameter updated tform subterm types dint value used threshold derivative finite step dslp value used slope derivative finite step KeepConstant binary vector identify constant parameters debugging additional boolean verbosity testing","code":""},{"path":"/reference/Calc_Change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate the change to make each iteration\nCalc_Change Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations — Calc_Change","text":"Updates matrices place: parameter change matrix","code":""},{"path":"/reference/Calc_Change_Basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate the change to make each iteration, with basic model\nCalc_Change_Basic Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations — Calc_Change_Basic","title":"Utility function to calculate the change to make each iteration, with basic model\nCalc_Change_Basic Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations — Calc_Change_Basic","text":"Utility function calculate change make iteration, basic model Calc_Change_Basic Called update parameter changes, Uses log-likelihoods control parameters, Applies newton steps change limitations","code":""},{"path":"/reference/Calc_Change_Basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate the change to make each iteration, with basic model\nCalc_Change_Basic Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations — Calc_Change_Basic","text":"","code":"Calc_Change_Basic(   double_step,   nthreads,   totalnum,   der_iden,   dbeta_cap,   lr,   abs_max,   Ll,   Lld,   Lldd,   dbeta,   change_all,   KeepConstant,   debugging )"},{"path":"/reference/Calc_Change_Basic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate the change to make each iteration, with basic model\nCalc_Change_Basic Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations — Calc_Change_Basic","text":"double_step controls step calculation, 0 independent changes, 1 solving b=Ax complete matrices nthreads number threads available totalnum total number parameters der_iden subterm number derivative tests dbeta_cap learning rate newton step toward 0 log-likelihood lr learning rate newton step toward 0 derivative abs_max Maximum allowed parameter change Ll Log-likelihood vector Lld Log-likelihood first derivative matrix Lldd Log-likelihood second derivative matrix dbeta parameter change vector change_all boolean every parameter updated KeepConstant binary vector identify constant parameters debugging additional boolean verbosity testing","code":""},{"path":"/reference/Calc_Change_Basic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate the change to make each iteration, with basic model\nCalc_Change_Basic Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations — Calc_Change_Basic","text":"Updates matrices place: parameter change matrix","code":""},{"path":"/reference/Calc_Change_Cons.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate the change to make each iteration, applying linear constraints\nCalc_Change_Cons Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations with a system of constraints — Calc_Change_Cons","title":"Utility function to calculate the change to make each iteration, applying linear constraints\nCalc_Change_Cons Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations with a system of constraints — Calc_Change_Cons","text":"Utility function calculate change make iteration, applying linear constraints Calc_Change_Cons Called update parameter changes, Uses log-likelihoods control parameters, Applies newton steps change limitations system constraints","code":""},{"path":"/reference/Calc_Change_Cons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate the change to make each iteration, applying linear constraints\nCalc_Change_Cons Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations with a system of constraints — Calc_Change_Cons","text":"","code":"Calc_Change_Cons(   Lin_Sys,   Lin_Res,   beta_0,   nthreads,   totalnum,   der_iden,   dbeta_cap,   dose_abs_max,   lr,   abs_max,   Ll,   Lld,   Lldd,   dbeta,   tform,   dint,   dslp,   KeepConstant,   debugging )"},{"path":"/reference/Calc_Change_Cons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate the change to make each iteration, applying linear constraints\nCalc_Change_Cons Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations with a system of constraints — Calc_Change_Cons","text":"Lin_Sys Matrix containing coefficients system linear constraints Lin_Res Vector containing constants system linear constraints beta_0 parameter estimates nthreads number threads available totalnum total number parameters der_iden subterm number derivative tests dbeta_cap learning rate newton step toward 0 log-likelihood dose_abs_max Maximum allowed threshold parameter change lr learning rate newton step toward 0 derivative abs_max Maximum allowed parameter change Ll Log-likelihood vector Lld Log-likelihood first derivative matrix Lldd Log-likelihood second derivative matrix dbeta parameter change vector tform subterm types dint value used threshold derivative finite step dslp value used slope derivative finite step KeepConstant binary vector identify constant parameters debugging additional boolean verbosity testing","code":""},{"path":"/reference/Calc_Change_Cons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate the change to make each iteration, applying linear constraints\nCalc_Change_Cons Called to update the parameter changes, Uses log-likelihoods and control parameters, Applies newton steps and change limitations with a system of constraints — Calc_Change_Cons","text":"Updates matrices place: parameter change matrix","code":""},{"path":"/reference/Calc_LogLik.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate Cox Log-Likelihood and derivatives\nCalc_LogLik Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik","title":"Utility function to calculate Cox Log-Likelihood and derivatives\nCalc_LogLik Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik","text":"Utility function calculate Cox Log-Likelihood derivatives Calc_LogLik Called update log-likelihoods, Uses list event rows, risk matrices, repeated sums, Sums log-likelihood contribution event time","code":""},{"path":"/reference/Calc_LogLik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate Cox Log-Likelihood and derivatives\nCalc_LogLik Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik","text":"","code":"Calc_LogLik(   nthreads,   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rd,   Rdd,   RdR,   RddR,   Rls1,   Rls2,   Rls3,   Lls1,   Lls2,   Lls3,   Ll,   Lld,   Lldd,   debugging,   ties_method,   KeepConstant )"},{"path":"/reference/Calc_LogLik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate Cox Log-Likelihood and derivatives\nCalc_LogLik Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik","text":"nthreads number threads available RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix RdR Risk first derivative ratio matrix RddR Risk second derivative ratio matrix Rls1 First Risk sum storage Rls2 First Risk sum derivative storage Rls3 First Risk sum second derivative storage Lls1 Second Risk sum storage Lls2 Second Risk sum derivative storage Lls3 Second Risk sum second derivative storage Ll Log-likelihood vector Lld Log-likelihood first derivative matrix Lldd Log-likelihood second derivative matrix debugging additional boolean verbosity testing ties_method Ties method KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Calc_LogLik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate Cox Log-Likelihood and derivatives\nCalc_LogLik Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik","text":"Updates matrices place: Log-likelihood vectors/matrix","code":""},{"path":"/reference/Calc_LogLik_Basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate Cox Log-Likelihood and derivatives, basic model\nCalc_LogLik_Basic Basic model, Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Basic","title":"Utility function to calculate Cox Log-Likelihood and derivatives, basic model\nCalc_LogLik_Basic Basic model, Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Basic","text":"Utility function calculate Cox Log-Likelihood derivatives, basic model Calc_LogLik_Basic Basic model, Called update log-likelihoods, Uses list event rows, risk matrices, repeated sums, Sums log-likelihood contribution event time","code":""},{"path":"/reference/Calc_LogLik_Basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate Cox Log-Likelihood and derivatives, basic model\nCalc_LogLik_Basic Basic model, Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Basic","text":"","code":"Calc_LogLik_Basic(   nthreads,   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rd,   Rdd,   RdR,   Rls1,   Rls2,   Rls3,   Lls1,   Lls2,   Lls3,   Ll,   Lld,   Lldd,   debugging,   ties_method,   KeepConstant )"},{"path":"/reference/Calc_LogLik_Basic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate Cox Log-Likelihood and derivatives, basic model\nCalc_LogLik_Basic Basic model, Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Basic","text":"nthreads number threads available RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix RdR Risk first derivative ratio matrix Rls1 First Risk sum storage Rls2 First Risk sum derivative storage Rls3 First Risk sum second derivative storage Lls1 Second Risk sum storage Lls2 Second Risk sum derivative storage Lls3 Second Risk sum second derivative storage Ll Log-likelihood vector Lld Log-likelihood first derivative matrix Lldd Log-likelihood second derivative matrix debugging additional boolean verbosity testing ties_method Ties method KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Calc_LogLik_Basic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate Cox Log-Likelihood and derivatives, basic model\nCalc_LogLik_Basic Basic model, Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Basic","text":"Updates matrices place: Log-likelihood vectors/matrix","code":""},{"path":"/reference/Calc_LogLik_Basic_Single.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate Cox Log-Likelihood, basic model\nCalc_LogLik_Basic_Single Basic model, Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Basic_Single","title":"Utility function to calculate Cox Log-Likelihood, basic model\nCalc_LogLik_Basic_Single Basic model, Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Basic_Single","text":"Utility function calculate Cox Log-Likelihood, basic model Calc_LogLik_Basic_Single Basic model, Called update log-likelihoods, Uses list event rows, risk matrices, repeated sums, Sums log-likelihood contribution event time","code":""},{"path":"/reference/Calc_LogLik_Basic_Single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate Cox Log-Likelihood, basic model\nCalc_LogLik_Basic_Single Basic model, Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Basic_Single","text":"","code":"Calc_LogLik_Basic_Single(   nthreads,   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rls1,   Lls1,   Ll,   debugging,   ties_method,   KeepConstant )"},{"path":"/reference/Calc_LogLik_Basic_Single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate Cox Log-Likelihood, basic model\nCalc_LogLik_Basic_Single Basic model, Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Basic_Single","text":"nthreads number threads available RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rls1 First Risk sum storage Lls1 Second Risk sum storage Ll Log-likelihood vector debugging additional boolean verbosity testing ties_method Ties method KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Calc_LogLik_Basic_Single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate Cox Log-Likelihood, basic model\nCalc_LogLik_Basic_Single Basic model, Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Basic_Single","text":"Updates matrices place: Log-likelihood vectors/matrix","code":""},{"path":"/reference/Calc_LogLik_STRATA.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA\nCalc_LogLik_STRATA Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_STRATA","title":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA\nCalc_LogLik_STRATA Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_STRATA","text":"Utility function calculate Cox Log-Likelihood derivatives STRATA Calc_LogLik_STRATA Called update log-likelihoods, Uses list event rows, risk matrices, repeated sums, Sums log-likelihood contribution event time","code":""},{"path":"/reference/Calc_LogLik_STRATA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA\nCalc_LogLik_STRATA Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_STRATA","text":"","code":"Calc_LogLik_STRATA(   nthreads,   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rd,   Rdd,   RdR,   RddR,   Rls1,   Rls2,   Rls3,   Lls1,   Lls2,   Lls3,   Ll,   Lld,   Lldd,   debugging,   ties_method,   STRATA_vals,   KeepConstant )"},{"path":"/reference/Calc_LogLik_STRATA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA\nCalc_LogLik_STRATA Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_STRATA","text":"nthreads number threads available RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix RdR Risk first derivative ratio matrix RddR Risk second derivative ratio matrix Rls1 First Risk sum storage Rls2 First Risk sum derivative storage Rls3 First Risk sum second derivative storage Lls1 Second Risk sum storage Lls2 Second Risk sum derivative storage Lls3 Second Risk sum second derivative storage Ll Log-likelihood vector Lld Log-likelihood first derivative matrix Lldd Log-likelihood second derivative matrix debugging additional boolean verbosity testing ties_method Ties method STRATA_vals vector strata identifier values KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Calc_LogLik_STRATA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA\nCalc_LogLik_STRATA Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_STRATA","text":"Updates matrices place: Log-likelihood vectors/matrix","code":""},{"path":"/reference/Calc_LogLik_STRATA_BASIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA, basic model\nCalc_LogLik_STRATA_BASIC Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time, basic model — Calc_LogLik_STRATA_BASIC","title":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA, basic model\nCalc_LogLik_STRATA_BASIC Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time, basic model — Calc_LogLik_STRATA_BASIC","text":"Utility function calculate Cox Log-Likelihood derivatives STRATA, basic model Calc_LogLik_STRATA_BASIC Called update log-likelihoods, Uses list event rows, risk matrices, repeated sums, Sums log-likelihood contribution event time, basic model","code":""},{"path":"/reference/Calc_LogLik_STRATA_BASIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA, basic model\nCalc_LogLik_STRATA_BASIC Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time, basic model — Calc_LogLik_STRATA_BASIC","text":"","code":"Calc_LogLik_STRATA_BASIC(   nthreads,   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rd,   Rdd,   RdR,   Rls1,   Rls2,   Rls3,   Lls1,   Lls2,   Lls3,   Ll,   Lld,   Lldd,   debugging,   ties_method,   STRATA_vals,   KeepConstant )"},{"path":"/reference/Calc_LogLik_STRATA_BASIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA, basic model\nCalc_LogLik_STRATA_BASIC Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time, basic model — Calc_LogLik_STRATA_BASIC","text":"nthreads number threads available RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix RdR Risk first derivative ratio matrix Rls1 First Risk sum storage Rls2 First Risk sum derivative storage Rls3 First Risk sum second derivative storage Lls1 Second Risk sum storage Lls2 Second Risk sum derivative storage Lls3 Second Risk sum second derivative storage Ll Log-likelihood vector Lld Log-likelihood first derivative matrix Lldd Log-likelihood second derivative matrix debugging additional boolean verbosity testing ties_method Ties method STRATA_vals vector strata identifier values KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Calc_LogLik_STRATA_BASIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA, basic model\nCalc_LogLik_STRATA_BASIC Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time, basic model — Calc_LogLik_STRATA_BASIC","text":"Updates matrices place: Log-likelihood vectors/matrix","code":""},{"path":"/reference/Calc_LogLik_STRATA_BASIC_SINGLE.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA, basic model, no derivatives\nCalc_LogLik_STRATA_BASIC_SINGLE Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time, basic model — Calc_LogLik_STRATA_BASIC_SINGLE","title":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA, basic model, no derivatives\nCalc_LogLik_STRATA_BASIC_SINGLE Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time, basic model — Calc_LogLik_STRATA_BASIC_SINGLE","text":"Utility function calculate Cox Log-Likelihood derivatives STRATA, basic model, derivatives Calc_LogLik_STRATA_BASIC_SINGLE Called update log-likelihoods, Uses list event rows, risk matrices, repeated sums, Sums log-likelihood contribution event time, basic model","code":""},{"path":"/reference/Calc_LogLik_STRATA_BASIC_SINGLE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA, basic model, no derivatives\nCalc_LogLik_STRATA_BASIC_SINGLE Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time, basic model — Calc_LogLik_STRATA_BASIC_SINGLE","text":"","code":"Calc_LogLik_STRATA_BASIC_SINGLE(   nthreads,   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rls1,   Lls1,   Ll,   debugging,   ties_method,   STRATA_vals,   KeepConstant )"},{"path":"/reference/Calc_LogLik_STRATA_BASIC_SINGLE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA, basic model, no derivatives\nCalc_LogLik_STRATA_BASIC_SINGLE Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time, basic model — Calc_LogLik_STRATA_BASIC_SINGLE","text":"nthreads number threads available RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rls1 First Risk sum storage Lls1 Second Risk sum storage Ll Log-likelihood vector debugging additional boolean verbosity testing ties_method Ties method STRATA_vals vector strata identifier values KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Calc_LogLik_STRATA_BASIC_SINGLE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate Cox Log-Likelihood and derivatives with STRATA, basic model, no derivatives\nCalc_LogLik_STRATA_BASIC_SINGLE Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time, basic model — Calc_LogLik_STRATA_BASIC_SINGLE","text":"Updates matrices place: Log-likelihood vectors/matrix","code":""},{"path":"/reference/Calc_LogLik_STRATA_SINGLE.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate just Cox Log-Likelihood with STRATA\nCalc_LogLik_STRATA_SINGLE Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time and strata — Calc_LogLik_STRATA_SINGLE","title":"Utility function to calculate just Cox Log-Likelihood with STRATA\nCalc_LogLik_STRATA_SINGLE Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time and strata — Calc_LogLik_STRATA_SINGLE","text":"Utility function calculate just Cox Log-Likelihood STRATA Calc_LogLik_STRATA_SINGLE Called update log-likelihoods, Uses list event rows, risk matrices, repeated sums, Sums log-likelihood contribution event time strata","code":""},{"path":"/reference/Calc_LogLik_STRATA_SINGLE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate just Cox Log-Likelihood with STRATA\nCalc_LogLik_STRATA_SINGLE Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time and strata — Calc_LogLik_STRATA_SINGLE","text":"","code":"Calc_LogLik_STRATA_SINGLE(   nthreads,   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rls1,   Lls1,   Ll,   debugging,   ties_method,   STRATA_vals,   KeepConstant )"},{"path":"/reference/Calc_LogLik_STRATA_SINGLE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate just Cox Log-Likelihood with STRATA\nCalc_LogLik_STRATA_SINGLE Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time and strata — Calc_LogLik_STRATA_SINGLE","text":"nthreads number threads available RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rls1 First Risk sum storage Lls1 Second Risk sum storage Ll Log-likelihood vector debugging additional boolean verbosity testing ties_method Ties method STRATA_vals vector strata identifier values KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Calc_LogLik_STRATA_SINGLE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate just Cox Log-Likelihood with STRATA\nCalc_LogLik_STRATA_SINGLE Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time and strata — Calc_LogLik_STRATA_SINGLE","text":"Updates matrices place: Log-likelihood vectors/matrix","code":""},{"path":"/reference/Calc_LogLik_Single.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate Cox Log-Likelihood\nCalc_LogLik_Single Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Single","title":"Utility function to calculate Cox Log-Likelihood\nCalc_LogLik_Single Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Single","text":"Utility function calculate Cox Log-Likelihood Calc_LogLik_Single Called update log-likelihoods, Uses list event rows, risk matrices, repeated sums, Sums log-likelihood contribution event time","code":""},{"path":"/reference/Calc_LogLik_Single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate Cox Log-Likelihood\nCalc_LogLik_Single Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Single","text":"","code":"Calc_LogLik_Single(   nthreads,   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rls1,   Lls1,   Ll,   debugging,   ties_method )"},{"path":"/reference/Calc_LogLik_Single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate Cox Log-Likelihood\nCalc_LogLik_Single Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Single","text":"nthreads number threads available RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rls1 First Risk sum storage Lls1 Second Risk sum storage Ll Log-likelihood vector debugging additional boolean verbosity testing ties_method Ties method","code":""},{"path":"/reference/Calc_LogLik_Single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate Cox Log-Likelihood\nCalc_LogLik_Single Called to update log-likelihoods, Uses list of event rows, risk matrices, and repeated sums, Sums the log-likelihood contribution from each event time — Calc_LogLik_Single","text":"Updates matrices place: Log-likelihood vectors/matrix","code":""},{"path":"/reference/Calc_Null_LogLik.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to perform null model equivalent of Calc_LogLik\nCalc_Null_LogLik Called to update log-likelihoods, Uses list of event rows and repeated sums, Sums the log-likelihood contribution from each event time — Calc_Null_LogLik","title":"Utility function to perform null model equivalent of Calc_LogLik\nCalc_Null_LogLik Called to update log-likelihoods, Uses list of event rows and repeated sums, Sums the log-likelihood contribution from each event time — Calc_Null_LogLik","text":"Utility function perform null model equivalent Calc_LogLik Calc_Null_LogLik Called update log-likelihoods, Uses list event rows repeated sums, Sums log-likelihood contribution event time","code":""},{"path":"/reference/Calc_Null_LogLik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to perform null model equivalent of Calc_LogLik\nCalc_Null_LogLik Called to update log-likelihoods, Uses list of event rows and repeated sums, Sums the log-likelihood contribution from each event time — Calc_Null_LogLik","text":"","code":"Calc_Null_LogLik(   nthreads,   RiskFail,   RiskGroup,   ntime,   R,   Rls1,   Lls1,   Ll,   ties_method )"},{"path":"/reference/Calc_Null_LogLik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to perform null model equivalent of Calc_LogLik\nCalc_Null_LogLik Called to update log-likelihoods, Uses list of event rows and repeated sums, Sums the log-likelihood contribution from each event time — Calc_Null_LogLik","text":"nthreads number threads available RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group ntime number risk groups R risk vector Rls1 First Risk sum storage Lls1 Second Risk sum storage Ll Log-likelihood vector ties_method Ties method","code":""},{"path":"/reference/Calc_Null_LogLik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to perform null model equivalent of Calc_LogLik\nCalc_Null_LogLik Called to update log-likelihoods, Uses list of event rows and repeated sums, Sums the log-likelihood contribution from each event time — Calc_Null_LogLik","text":"Updates matrices place: Log-likelihood vectors/matrix","code":""},{"path":"/reference/Calc_Null_LogLik_STRATA.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to perform null model equivalent of Calc_LogLik\nCalc_Null_LogLik_STRATA Called to update log-likelihoods, Uses list of event rows and repeated sums, Sums the log-likelihood contribution from each event time — Calc_Null_LogLik_STRATA","title":"Utility function to perform null model equivalent of Calc_LogLik\nCalc_Null_LogLik_STRATA Called to update log-likelihoods, Uses list of event rows and repeated sums, Sums the log-likelihood contribution from each event time — Calc_Null_LogLik_STRATA","text":"Utility function perform null model equivalent Calc_LogLik Calc_Null_LogLik_STRATA Called update log-likelihoods, Uses list event rows repeated sums, Sums log-likelihood contribution event time","code":""},{"path":"/reference/Calc_Null_LogLik_STRATA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to perform null model equivalent of Calc_LogLik\nCalc_Null_LogLik_STRATA Called to update log-likelihoods, Uses list of event rows and repeated sums, Sums the log-likelihood contribution from each event time — Calc_Null_LogLik_STRATA","text":"","code":"Calc_Null_LogLik_STRATA(   nthreads,   RiskFail,   RiskGroup,   ntime,   R,   Rls1,   Lls1,   STRATA_vals,   Ll,   ties_method )"},{"path":"/reference/Calc_Null_LogLik_STRATA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to perform null model equivalent of Calc_LogLik\nCalc_Null_LogLik_STRATA Called to update log-likelihoods, Uses list of event rows and repeated sums, Sums the log-likelihood contribution from each event time — Calc_Null_LogLik_STRATA","text":"nthreads number threads available RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group ntime number risk groups R risk vector Rls1 First Risk sum storage Lls1 Second Risk sum storage STRATA_vals vector strata identifier values Ll Log-likelihood vector ties_method Ties method","code":""},{"path":"/reference/Calc_Null_LogLik_STRATA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to perform null model equivalent of Calc_LogLik\nCalc_Null_LogLik_STRATA Called to update log-likelihoods, Uses list of event rows and repeated sums, Sums the log-likelihood contribution from each event time — Calc_Null_LogLik_STRATA","text":"Updates matrices place: Log-likelihood vectors/matrix","code":""},{"path":"/reference/Calculate_Null_Sides.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to perform null model equivalent of Calculate_Sides\nCalculate_Null_Sides Called to update repeated sum calculations, Uses list of event rows, Performs calculation of counts in each group — Calculate_Null_Sides","title":"Utility function to perform null model equivalent of Calculate_Sides\nCalculate_Null_Sides Called to update repeated sum calculations, Uses list of event rows, Performs calculation of counts in each group — Calculate_Null_Sides","text":"Utility function perform null model equivalent Calculate_Sides Calculate_Null_Sides Called update repeated sum calculations, Uses list event rows, Performs calculation counts group","code":""},{"path":"/reference/Calculate_Null_Sides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to perform null model equivalent of Calculate_Sides\nCalculate_Null_Sides Called to update repeated sum calculations, Uses list of event rows, Performs calculation of counts in each group — Calculate_Null_Sides","text":"","code":"Calculate_Null_Sides(RiskFail, RiskGroup, ntime, R, Rls1, Lls1, nthreads)"},{"path":"/reference/Calculate_Null_Sides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to perform null model equivalent of Calculate_Sides\nCalculate_Null_Sides Called to update repeated sum calculations, Uses list of event rows, Performs calculation of counts in each group — Calculate_Null_Sides","text":"RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group ntime number risk groups R risk vector Rls1 First Risk sum storage Lls1 Second Risk sum storage nthreads number threads available","code":""},{"path":"/reference/Calculate_Null_Sides.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to perform null model equivalent of Calculate_Sides\nCalculate_Null_Sides Called to update repeated sum calculations, Uses list of event rows, Performs calculation of counts in each group — Calculate_Null_Sides","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Calculate_Null_Sides_STRATA.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to perform null model equivalent of Calculate_Sides with strata\nCalculate_Null_Sides_STRATA Called to update repeated sum calculations, Uses list of event rows, Performs calculation of counts in each group — Calculate_Null_Sides_STRATA","title":"Utility function to perform null model equivalent of Calculate_Sides with strata\nCalculate_Null_Sides_STRATA Called to update repeated sum calculations, Uses list of event rows, Performs calculation of counts in each group — Calculate_Null_Sides_STRATA","text":"Utility function perform null model equivalent Calculate_Sides strata Calculate_Null_Sides_STRATA Called update repeated sum calculations, Uses list event rows, Performs calculation counts group","code":""},{"path":"/reference/Calculate_Null_Sides_STRATA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to perform null model equivalent of Calculate_Sides with strata\nCalculate_Null_Sides_STRATA Called to update repeated sum calculations, Uses list of event rows, Performs calculation of counts in each group — Calculate_Null_Sides_STRATA","text":"","code":"Calculate_Null_Sides_STRATA(   RiskFail,   RiskGroup,   ntime,   R,   Rls1,   Lls1,   STRATA_vals,   nthreads )"},{"path":"/reference/Calculate_Null_Sides_STRATA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to perform null model equivalent of Calculate_Sides with strata\nCalculate_Null_Sides_STRATA Called to update repeated sum calculations, Uses list of event rows, Performs calculation of counts in each group — Calculate_Null_Sides_STRATA","text":"RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group ntime number risk groups R risk vector Rls1 First Risk sum storage Lls1 Second Risk sum storage STRATA_vals vector strata identifier values nthreads number threads available","code":""},{"path":"/reference/Calculate_Null_Sides_STRATA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to perform null model equivalent of Calculate_Sides with strata\nCalculate_Null_Sides_STRATA Called to update repeated sum calculations, Uses list of event rows, Performs calculation of counts in each group — Calculate_Null_Sides_STRATA","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Calculate_Sides.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides","text":"Utility function calculate repeated values used Cox Log-Likelihood calculation Calculate_Sides Called update repeated sum calculations, Uses list event rows risk matrices, Performs calculation sums risk group","code":""},{"path":"/reference/Calculate_Sides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides","text":"","code":"Calculate_Sides(   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rd,   Rdd,   Rls1,   Rls2,   Rls3,   Lls1,   Lls2,   Lls3,   nthreads,   debugging,   KeepConstant )"},{"path":"/reference/Calculate_Sides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides","text":"RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix Rls1 First Risk sum storage Rls2 First Risk sum derivative storage Rls3 First Risk sum second derivative storage Lls1 Second Risk sum storage Lls2 Second Risk sum derivative storage Lls3 Second Risk sum second derivative storage nthreads number threads available debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Calculate_Sides.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Calculate_Sides_CR.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_CR","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_CR","text":"Utility function calculate repeated values used Cox Log-Likelihood calculation Calculate_Sides_CR Called update repeated sum calculations, Uses list event rows risk matrices, Performs calculation sums risk group","code":""},{"path":"/reference/Calculate_Sides_CR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_CR","text":"","code":"Calculate_Sides_CR(   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rd,   Rdd,   Rls1,   Rls2,   Rls3,   Lls1,   Lls2,   Lls3,   cens_weight,   nthreads,   debugging,   KeepConstant )"},{"path":"/reference/Calculate_Sides_CR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_CR","text":"RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix Rls1 First Risk sum storage Rls2 First Risk sum derivative storage Rls3 First Risk sum second derivative storage Lls1 Second Risk sum storage Lls2 Second Risk sum derivative storage Lls3 Second Risk sum second derivative storage cens_weight vector censoring weights nthreads number threads available debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Calculate_Sides_CR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_CR","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Calculate_Sides_CR_SINGLE.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides_CR_SINGLE Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_CR_SINGLE","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides_CR_SINGLE Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_CR_SINGLE","text":"Utility function calculate repeated values used Cox Log-Likelihood calculation Calculate_Sides_CR_SINGLE Called update repeated sum calculations, Uses list event rows risk matrices, Performs calculation sums risk group","code":""},{"path":"/reference/Calculate_Sides_CR_SINGLE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides_CR_SINGLE Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_CR_SINGLE","text":"","code":"Calculate_Sides_CR_SINGLE(   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rls1,   Lls1,   cens_weight,   nthreads,   debugging,   KeepConstant )"},{"path":"/reference/Calculate_Sides_CR_SINGLE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides_CR_SINGLE Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_CR_SINGLE","text":"RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rls1 First Risk sum storage Lls1 Second Risk sum storage cens_weight vector censoring weights nthreads number threads available debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Calculate_Sides_CR_SINGLE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation\nCalculate_Sides_CR_SINGLE Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_CR_SINGLE","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Calculate_Sides_STRATA.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA\nCalculate_Sides_STRATA Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_STRATA","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA\nCalculate_Sides_STRATA Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_STRATA","text":"Utility function calculate repeated values used Cox Log-Likelihood calculation STRATA Calculate_Sides_STRATA Called update repeated sum calculations, Uses list event rows risk matrices, Performs calculation sums risk group","code":""},{"path":"/reference/Calculate_Sides_STRATA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA\nCalculate_Sides_STRATA Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_STRATA","text":"","code":"Calculate_Sides_STRATA(   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rd,   Rdd,   Rls1,   Rls2,   Rls3,   Lls1,   Lls2,   Lls3,   nthreads,   debugging,   STRATA_vals,   KeepConstant )"},{"path":"/reference/Calculate_Sides_STRATA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA\nCalculate_Sides_STRATA Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_STRATA","text":"RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix Rls1 First Risk sum storage Rls2 First Risk sum derivative storage Rls3 First Risk sum second derivative storage Lls1 Second Risk sum storage Lls2 Second Risk sum derivative storage Lls3 Second Risk sum second derivative storage nthreads number threads available debugging additional boolean verbosity testing STRATA_vals vector strata identifier values KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Calculate_Sides_STRATA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA\nCalculate_Sides_STRATA Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_STRATA","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Calculate_Sides_STRATA_CR.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and competing risks\nCalculate_Sides_STRATA_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group and competing risks — Calculate_Sides_STRATA_CR","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and competing risks\nCalculate_Sides_STRATA_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group and competing risks — Calculate_Sides_STRATA_CR","text":"Utility function calculate repeated values used Cox Log-Likelihood calculation STRATA competing risks Calculate_Sides_STRATA_CR Called update repeated sum calculations, Uses list event rows risk matrices, Performs calculation sums risk group competing risks","code":""},{"path":"/reference/Calculate_Sides_STRATA_CR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and competing risks\nCalculate_Sides_STRATA_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group and competing risks — Calculate_Sides_STRATA_CR","text":"","code":"Calculate_Sides_STRATA_CR(   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rd,   Rdd,   Rls1,   Rls2,   Rls3,   Lls1,   Lls2,   Lls3,   cens_weight,   nthreads,   debugging,   STRATA_vals,   KeepConstant )"},{"path":"/reference/Calculate_Sides_STRATA_CR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and competing risks\nCalculate_Sides_STRATA_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group and competing risks — Calculate_Sides_STRATA_CR","text":"RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix Rls1 First Risk sum storage Rls2 First Risk sum derivative storage Rls3 First Risk sum second derivative storage Lls1 Second Risk sum storage Lls2 Second Risk sum derivative storage Lls3 Second Risk sum second derivative storage cens_weight vector censoring weights nthreads number threads available debugging additional boolean verbosity testing STRATA_vals vector strata identifier values KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Calculate_Sides_STRATA_CR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and competing risks\nCalculate_Sides_STRATA_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group and competing risks — Calculate_Sides_STRATA_CR","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Calculate_Sides_STRATA_Single.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and without derivative\nCalculate_Sides_STRATA_Single Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group but not derivatives — Calculate_Sides_STRATA_Single","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and without derivative\nCalculate_Sides_STRATA_Single Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group but not derivatives — Calculate_Sides_STRATA_Single","text":"Utility function calculate repeated values used Cox Log-Likelihood calculation STRATA without derivative Calculate_Sides_STRATA_Single Called update repeated sum calculations, Uses list event rows risk matrices, Performs calculation sums risk group derivatives","code":""},{"path":"/reference/Calculate_Sides_STRATA_Single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and without derivative\nCalculate_Sides_STRATA_Single Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group but not derivatives — Calculate_Sides_STRATA_Single","text":"","code":"Calculate_Sides_STRATA_Single(   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rls1,   Lls1,   nthreads,   debugging,   STRATA_vals,   KeepConstant )"},{"path":"/reference/Calculate_Sides_STRATA_Single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and without derivative\nCalculate_Sides_STRATA_Single Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group but not derivatives — Calculate_Sides_STRATA_Single","text":"RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rls1 First Risk sum storage Lls1 Second Risk sum storage nthreads number threads available debugging additional boolean verbosity testing STRATA_vals vector strata identifier values KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Calculate_Sides_STRATA_Single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and without derivative\nCalculate_Sides_STRATA_Single Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group but not derivatives — Calculate_Sides_STRATA_Single","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Calculate_Sides_STRATA_Single_CR.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and without derivative and with competing risks\nCalculate_Sides_STRATA_Single_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group but not derivatives but with competing risks — Calculate_Sides_STRATA_Single_CR","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and without derivative and with competing risks\nCalculate_Sides_STRATA_Single_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group but not derivatives but with competing risks — Calculate_Sides_STRATA_Single_CR","text":"Utility function calculate repeated values used Cox Log-Likelihood calculation STRATA without derivative competing risks Calculate_Sides_STRATA_Single_CR Called update repeated sum calculations, Uses list event rows risk matrices, Performs calculation sums risk group derivatives competing risks","code":""},{"path":"/reference/Calculate_Sides_STRATA_Single_CR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and without derivative and with competing risks\nCalculate_Sides_STRATA_Single_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group but not derivatives but with competing risks — Calculate_Sides_STRATA_Single_CR","text":"","code":"Calculate_Sides_STRATA_Single_CR(   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rls1,   Lls1,   cens_weight,   nthreads,   debugging,   STRATA_vals,   KeepConstant )"},{"path":"/reference/Calculate_Sides_STRATA_Single_CR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and without derivative and with competing risks\nCalculate_Sides_STRATA_Single_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group but not derivatives but with competing risks — Calculate_Sides_STRATA_Single_CR","text":"RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rls1 First Risk sum storage Lls1 Second Risk sum storage cens_weight vector censoring weights nthreads number threads available debugging additional boolean verbosity testing STRATA_vals vector strata identifier values KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Calculate_Sides_STRATA_Single_CR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation with STRATA and without derivative and with competing risks\nCalculate_Sides_STRATA_Single_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group but not derivatives but with competing risks — Calculate_Sides_STRATA_Single_CR","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Calculate_Sides_Single.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation. but not derivatives\nCalculate_Sides_Single Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_Single","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation. but not derivatives\nCalculate_Sides_Single Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_Single","text":"Utility function calculate repeated values used Cox Log-Likelihood calculation. derivatives Calculate_Sides_Single Called update repeated sum calculations, Uses list event rows risk matrices, Performs calculation sums risk group","code":""},{"path":"/reference/Calculate_Sides_Single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation. but not derivatives\nCalculate_Sides_Single Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_Single","text":"","code":"Calculate_Sides_Single(   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rls1,   Lls1,   nthreads,   debugging )"},{"path":"/reference/Calculate_Sides_Single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation. but not derivatives\nCalculate_Sides_Single Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_Single","text":"RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rls1 First Risk sum storage Lls1 Second Risk sum storage nthreads number threads available debugging additional boolean verbosity testing","code":""},{"path":"/reference/Calculate_Sides_Single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation. but not derivatives\nCalculate_Sides_Single Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group — Calculate_Sides_Single","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Calculate_Sides_Single_CR.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation. but not derivatives, applies competing risks\nCalculate_Sides_Single_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group with competing risks — Calculate_Sides_Single_CR","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation. but not derivatives, applies competing risks\nCalculate_Sides_Single_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group with competing risks — Calculate_Sides_Single_CR","text":"Utility function calculate repeated values used Cox Log-Likelihood calculation. derivatives, applies competing risks Calculate_Sides_Single_CR Called update repeated sum calculations, Uses list event rows risk matrices, Performs calculation sums risk group competing risks","code":""},{"path":"/reference/Calculate_Sides_Single_CR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation. but not derivatives, applies competing risks\nCalculate_Sides_Single_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group with competing risks — Calculate_Sides_Single_CR","text":"","code":"Calculate_Sides_Single_CR(   RiskFail,   RiskGroup,   totalnum,   ntime,   R,   Rls1,   Lls1,   cens_weight,   nthreads,   debugging )"},{"path":"/reference/Calculate_Sides_Single_CR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation. but not derivatives, applies competing risks\nCalculate_Sides_Single_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group with competing risks — Calculate_Sides_Single_CR","text":"RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group totalnum total number parameters ntime number risk groups R risk vector Rls1 First Risk sum storage Lls1 Second Risk sum storage cens_weight vector censoring weights nthreads number threads available debugging additional boolean verbosity testing","code":""},{"path":"/reference/Calculate_Sides_Single_CR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate repeated values used in Cox Log-Likelihood calculation. but not derivatives, applies competing risks\nCalculate_Sides_Single_CR Called to update repeated sum calculations, Uses list of event rows and risk matrices, Performs calculation of sums of risk in each group with competing risks — Calculate_Sides_Single_CR","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Check_Dupe_Columns.html","id":null,"dir":"Reference","previous_headings":"","what":"checks for duplicated column names\nCheck_Dupe_Columns checks for duplicated columns, columns with the same values, and columns with 1 value. Currently not updated for multi-terms — Check_Dupe_Columns","title":"checks for duplicated column names\nCheck_Dupe_Columns checks for duplicated columns, columns with the same values, and columns with 1 value. Currently not updated for multi-terms — Check_Dupe_Columns","text":"checks duplicated column names Check_Dupe_Columns checks duplicated columns, columns values, columns 1 value. Currently updated multi-terms","code":""},{"path":"/reference/Check_Dupe_Columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checks for duplicated column names\nCheck_Dupe_Columns checks for duplicated columns, columns with the same values, and columns with 1 value. Currently not updated for multi-terms — Check_Dupe_Columns","text":"","code":"Check_Dupe_Columns(df, cols, term_n, verbose = FALSE, factor_check = FALSE)"},{"path":"/reference/Check_Dupe_Columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checks for duplicated column names\nCheck_Dupe_Columns checks for duplicated columns, columns with the same values, and columns with 1 value. Currently not updated for multi-terms — Check_Dupe_Columns","text":"df data.table containing columns interest cols columns check term_n term numbers verbose boolean control additional information printed console factor_check boolean used skip comparing columns form ?_? initial string, used factored columns","code":""},{"path":"/reference/Check_Dupe_Columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checks for duplicated column names\nCheck_Dupe_Columns checks for duplicated columns, columns with the same values, and columns with 1 value. Currently not updated for multi-terms — Check_Dupe_Columns","text":"returns usable columns","code":""},{"path":"/reference/Check_Dupe_Columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"checks for duplicated column names\nCheck_Dupe_Columns checks for duplicated columns, columns with the same values, and columns with 1 value. Currently not updated for multi-terms — Check_Dupe_Columns","text":"","code":"library(data.table) a <- c(0,1,2,3,4,5,6) b <- c(1,2,3,4,5,6,7) c <- c(0,1,2,1,0,1,0) df <- data.table(\"a\"=a,\"b\"=b,\"c\"=c) cols <- c(\"a\",\"b\",\"c\") term_n <- c(0,0,1) unique_cols <- Check_Dupe_Columns(df, cols, term_n)"},{"path":"/reference/Check_Risk.html","id":null,"dir":"Reference","previous_headings":"","what":"checks if the model is viable\nCheck_Risk Calculates risks and checks for negative values — Check_Risk","title":"checks if the model is viable\nCheck_Risk Calculates risks and checks for negative values — Check_Risk","text":"checks model viable Check_Risk Calculates risks checks negative values","code":""},{"path":"/reference/Check_Risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checks if the model is viable\nCheck_Risk Calculates risks and checks for negative values — Check_Risk","text":"","code":"Check_Risk(   Term_n,   tform,   a_n,   x_all,   dfc,   fir,   modelform,   verbose,   debugging,   KeepConstant,   term_tot,   nthreads,   gmix_theta,   gmix_term )"},{"path":"/reference/Check_Risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checks if the model is viable\nCheck_Risk Calculates risks and checks for negative values — Check_Risk","text":"Term_n Term numbers tform subterm types a_n starting values x_all covariate matrix dfc vector matching subterm number matrix column fir st term number modelform string model identifier verbose boolean additional printing debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters term_tot total number terms nthreads number threads available gmix_theta theta value geometric-mixture model gmix_term list 0/1 identify terms set Relative Risk (0) Excess Risk (1)","code":""},{"path":"/reference/Check_Risk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checks if the model is viable\nCheck_Risk Calculates risks and checks for negative values — Check_Risk","text":"True viable point, False negative error","code":""},{"path":"/reference/Check_Trunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies time duration truncation limits\nCheck_Trunc creates columns to use for truncation — Check_Trunc","title":"Applies time duration truncation limits\nCheck_Trunc creates columns to use for truncation — Check_Trunc","text":"Applies time duration truncation limits Check_Trunc creates columns use truncation","code":""},{"path":"/reference/Check_Trunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies time duration truncation limits\nCheck_Trunc creates columns to use for truncation — Check_Trunc","text":"","code":"Check_Trunc(df, ce, verbose = FALSE)"},{"path":"/reference/Check_Trunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies time duration truncation limits\nCheck_Trunc creates columns to use for truncation — Check_Trunc","text":"df data.table containing columns interest ce columns check truncation verbose boolean control additional information printed console","code":""},{"path":"/reference/Check_Trunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies time duration truncation limits\nCheck_Trunc creates columns to use for truncation — Check_Trunc","text":"returns updated data time period columns","code":""},{"path":"/reference/Check_Trunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Applies time duration truncation limits\nCheck_Trunc creates columns to use for truncation — Check_Trunc","text":"","code":"library(data.table)  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" ce <- c(\"%trunc%\",\"Ending_Age\") val <- Check_Trunc(df, ce) df <- val$df ce <- val$ce"},{"path":"/reference/Colossus-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Risk Model Regression and Analysis with Complex Non-Linear Models — Colossus-package","title":"Risk Model Regression and Analysis with Complex Non-Linear Models — Colossus-package","text":"Performs survival analysis using general non-linear models. Risk models can sum product terms. term product exponential/linear functions covariates. Additionally sub-terms can defined sum exponential, linear threshold, step functions. Cox Proportional hazards, Poisson, Fine-Grey competing risks regression supported.","code":""},{"path":"/reference/Colossus-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Risk Model Regression and Analysis with Complex Non-Linear Models — Colossus-package","text":"Colossus requires data.table columns defining time duration, covariates used risk model, column event status/counts. Cox Proportional Hazards Fine-Grey models require two columns set interval start end points, one may specified truncated set one-sided intervals. Poisson models require single column person-years. event column assumed contain 0/1 Cox Proportional Hazards models censored/event, 0/1/2 Fine-Grey models censored/main event/competing event, count events Poisson models.   Risk models Colossus composed subterms multiplied calculate terms, risk calculated product /sum terms. Please see starting_description vignette detail. model passed Colossus collection vectors provide column, subterm type, term number, parameter value, fixed/free status every model element.   Colossus also uses series control lists control different aspects regression/calculation. Generally function control list provides hardware/convergence values, control_guess control distributed starting point generation needed, model_control control stratification/competing risks/etc additional model options. Please read Alt_Distrib_Starts Alt_Run_opt vignettes details.   Generally Cox Proportional Hazards functions wrappers call RunCoxRegression_Omnibus different options, similarly Poisson functions call RunPoissonRegression_Omnibus. plotting assumptions tests accessed RunCoxPlots function.","code":""},{"path":"/reference/Colossus-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Risk Model Regression and Analysis with Complex Non-Linear Models — Colossus-package","text":"Eric Giunta, egiunta@ksu.edu Maintainer: Eric Giunta <egiunta@ksu.edu>","code":""},{"path":"/reference/Colossus-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Risk Model Regression and Analysis with Complex Non-Linear Models — Colossus-package","text":"","code":"library(data.table)   ## basic example code reproduced from the starting-description vignette    df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),               \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),                 \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),             \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                         \"a\"=c(0,   1,   1,   0,   1,   0,   1),                         \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                         \"c\"=c(10,  11,  10,  11,  12,  9,   11),                         \"d\"=c(0,   0,   0,   1,   1,   1,   1),                         \"e\"=c(0,   0,   1,   0,   0,   0,   1))   # For the interval case   time1 <- \"Starting_Age\"   time2 <- \"Ending_Age\"   pyr <- \"Ending_Age\"   event <- \"Cancer_Status\"   names <- c('a','b','c','d')   a_n <- list(c(1.1, -0.1, 0.2, 0.5),c(1.6, -0.12, 0.3, 0.4))   #used to test at a specific point   Term_n <- c(0,1,1,2)   tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\")   modelform <- \"M\"   fir <- 0    keep_constant <- c(0,0,0,0)   der_iden <- 0    control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiters' = c(5,5,5),       'halfmax' = 5,'epsilon' = 1e-3, 'dbeta_max' = 0.5,'deriv_epsilon' = 1e-3,       'abs_max'=1.0,'change_all'=TRUE, 'dose_abs_max'=100.0,'verbose'=FALSE,       'ties'='breslow','double_step'=1, \"guesses\"=2)    e <- RunCoxRegression_Omnibus(df, time1, time2, event,                                 names, Term_n, tform, keep_constant,                                 a_n, modelform, fir, der_iden, control,                                 model_control=list(\"single\"=FALSE,                                 \"basic\"=FALSE, \"CR\"=FALSE, 'null'=FALSE))   Strat_Col <- 'e'   e <- RunPoissonRegression_Omnibus(df, pyr, event, names, Term_n, tform, keep_constant,                                     a_n, modelform, fir, der_iden, control,Strat_Col)"},{"path":"/reference/Correct_Formula_Order.html","id":null,"dir":"Reference","previous_headings":"","what":"Corrects the order of terms/formula/etc\nCorrect_Formula_Order checks the order of formulas given and corrects any ordering issues — Correct_Formula_Order","title":"Corrects the order of terms/formula/etc\nCorrect_Formula_Order checks the order of formulas given and corrects any ordering issues — Correct_Formula_Order","text":"Corrects order terms/formula/etc Correct_Formula_Order checks order formulas given corrects ordering issues","code":""},{"path":"/reference/Correct_Formula_Order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Corrects the order of terms/formula/etc\nCorrect_Formula_Order checks the order of formulas given and corrects any ordering issues — Correct_Formula_Order","text":"","code":"Correct_Formula_Order(   Term_n,   tform,   keep_constant,   a_n,   names,   der_iden = 0,   verbose = FALSE,   Cons_Mat = matrix(c(0)),   Cons_Vec = c(0) )"},{"path":"/reference/Correct_Formula_Order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Corrects the order of terms/formula/etc\nCorrect_Formula_Order checks the order of formulas given and corrects any ordering issues — Correct_Formula_Order","text":"Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters names columns elements model, used identify data columns der_iden number subterm test derivative , used testing runs single varying parameter verbose boolean control additional information printed console Cons_Mat Matrix containing coefficients system linear constraints Cons_Vec Vector containing constants system linear constraints","code":""},{"path":"/reference/Correct_Formula_Order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Corrects the order of terms/formula/etc\nCorrect_Formula_Order checks the order of formulas given and corrects any ordering issues — Correct_Formula_Order","text":"returns corrected lists","code":""},{"path":"/reference/Correct_Formula_Order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Corrects the order of terms/formula/etc\nCorrect_Formula_Order checks the order of formulas given and corrects any ordering issues — Correct_Formula_Order","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  Term_n <- c(0,1,1,0,0) tform <- c(\"loglin\",'quad_slope','lin', \"lin_int\", \"lin_slope\") keep_constant <- c(0,0,0,1,0) a_n <- c(1,2,3,4,5) names <- c(\"a\",\"a\",\"a\",\"a\",\"a\") val <- Correct_Formula_Order(Term_n, tform, keep_constant, a_n, names) Term_n <- val$Term_n tform <- val$tform keep_constant <- val$keep_constant a_n <- val$a_n der_iden <- val$der_iden names <- val$names"},{"path":"/reference/CoxKaplanMeier.html","id":null,"dir":"Reference","previous_headings":"","what":"calculates and plots Kaplan-Meier survival plots\nCoxKaplanMeier uses user provided data, columns, and identifier to create plots, plots the kaplan-meier survival and log(time) vs log(-log(survival)) — CoxKaplanMeier","title":"calculates and plots Kaplan-Meier survival plots\nCoxKaplanMeier uses user provided data, columns, and identifier to create plots, plots the kaplan-meier survival and log(time) vs log(-log(survival)) — CoxKaplanMeier","text":"calculates plots Kaplan-Meier survival plots CoxKaplanMeier uses user provided data, columns, identifier create plots, plots kaplan-meier survival log(time) vs log(-log(survival))","code":""},{"path":"/reference/CoxKaplanMeier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculates and plots Kaplan-Meier survival plots\nCoxKaplanMeier uses user provided data, columns, and identifier to create plots, plots the kaplan-meier survival and log(time) vs log(-log(survival)) — CoxKaplanMeier","text":"","code":"CoxKaplanMeier(   verbose,   verbosec,   studyID,   names,   df,   event0,   time1,   time2,   tu,   Term_n,   tform,   a_n,   er,   fir,   der_iden,   modelform,   control,   keep_constant,   Plot_Type,   age_unit,   model_control = list() )"},{"path":"/reference/CoxKaplanMeier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculates and plots Kaplan-Meier survival plots\nCoxKaplanMeier uses user provided data, columns, and identifier to create plots, plots the kaplan-meier survival and log(time) vs log(-log(survival)) — CoxKaplanMeier","text":"verbose boolean control additional information printed console verbosec boolean identifying extra regression information written console studyID id group , NaN grouping names columns elements model, used identify data columns df data.table containing columns interest event0 column used event status time1 column used time period starts time2 column used time period end tu unique event times Term_n term numbers element model tform list string function identifiers, used linear/step a_n list initial parameter values, used determine number parameters er standard deviation parameters fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter modelform string specifying model type control list parameters controlling convergence keep_constant binary values denote parameters change Plot_Type list parameters controlling plot options age_unit age unit model_control controls alternative model options used","code":""},{"path":"/reference/CoxKaplanMeier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculates and plots Kaplan-Meier survival plots\nCoxKaplanMeier uses user provided data, columns, and identifier to create plots, plots the kaplan-meier survival and log(time) vs log(-log(survival)) — CoxKaplanMeier","text":"saves plots current directory returns string passed","code":""},{"path":"/reference/CoxMartingale.html","id":null,"dir":"Reference","previous_headings":"","what":"calculates and plots martingale residuals with a named dose column\nCoxMartingale uses user provided data, columns, and identifier to create plots — CoxMartingale","title":"calculates and plots martingale residuals with a named dose column\nCoxMartingale uses user provided data, columns, and identifier to create plots — CoxMartingale","text":"calculates plots martingale residuals named dose column CoxMartingale uses user provided data, columns, identifier create plots","code":""},{"path":"/reference/CoxMartingale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculates and plots martingale residuals with a named dose column\nCoxMartingale uses user provided data, columns, and identifier to create plots — CoxMartingale","text":"","code":"CoxMartingale(   verbose,   df,   time1,   time2,   event0,   e,   t,   ch,   dnames,   Plot_Name,   age_unit,   studyID )"},{"path":"/reference/CoxMartingale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculates and plots martingale residuals with a named dose column\nCoxMartingale uses user provided data, columns, and identifier to create plots — CoxMartingale","text":"verbose boolean control additional information printed console df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status e output baseline calculation t event times ch cumulative hazards baseline dnames list covariate columns plot Plot_Name plot identifier age_unit age unit studyID id group , NaN grouping","code":""},{"path":"/reference/CoxMartingale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculates and plots martingale residuals with a named dose column\nCoxMartingale uses user provided data, columns, and identifier to create plots — CoxMartingale","text":"saves plots current directory returns string passed","code":""},{"path":"/reference/CoxRisk.html","id":null,"dir":"Reference","previous_headings":"","what":"calculates and plots relative risk\nCoxRisk uses user provided data, columns, and identifier to create plots of risk by covariate value for each column — CoxRisk","title":"calculates and plots relative risk\nCoxRisk uses user provided data, columns, and identifier to create plots of risk by covariate value for each column — CoxRisk","text":"calculates plots relative risk CoxRisk uses user provided data, columns, identifier create plots risk covariate value column","code":""},{"path":"/reference/CoxRisk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculates and plots relative risk\nCoxRisk uses user provided data, columns, and identifier to create plots of risk by covariate value for each column — CoxRisk","text":"","code":"CoxRisk(   verbose,   df,   event0,   time1,   time2,   names,   Term_n,   tform,   a_n,   fir,   der_iden,   modelform,   control,   keep_constant,   Plot_Type,   b,   er,   model_control = list() )"},{"path":"/reference/CoxRisk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculates and plots relative risk\nCoxRisk uses user provided data, columns, and identifier to create plots of risk by covariate value for each column — CoxRisk","text":"verbose boolean control additional information printed console df data.table containing columns interest event0 column used event status time1 column used time period starts time2 column used time period end names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step a_n list initial parameter values, used determine number parameters fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter modelform string specifying model type control list parameters controlling convergence keep_constant binary values denote parameters change Plot_Type list parameters controlling plot options b optimum parameter values used er standard deviation parameters model_control controls alternative model options used","code":""},{"path":"/reference/CoxRisk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculates and plots relative risk\nCoxRisk uses user provided data, columns, and identifier to create plots of risk by covariate value for each column — CoxRisk","text":"saves plots current directory returns string passed","code":""},{"path":"/reference/CoxStratifiedSurvival.html","id":null,"dir":"Reference","previous_headings":"","what":"calculates and plots survival curves for each unique value of the stratification column\nCoxStratifiedSurvival uses user provided data, columns, and identifier to calculate the survival fraction for each strata — CoxStratifiedSurvival","title":"calculates and plots survival curves for each unique value of the stratification column\nCoxStratifiedSurvival uses user provided data, columns, and identifier to calculate the survival fraction for each strata — CoxStratifiedSurvival","text":"calculates plots survival curves unique value stratification column CoxStratifiedSurvival uses user provided data, columns, identifier calculate survival fraction strata","code":""},{"path":"/reference/CoxStratifiedSurvival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculates and plots survival curves for each unique value of the stratification column\nCoxStratifiedSurvival uses user provided data, columns, and identifier to calculate the survival fraction for each strata — CoxStratifiedSurvival","text":"","code":"CoxStratifiedSurvival(   verbose,   df,   event0,   time1,   time2,   names,   Term_n,   tform,   a_n,   er,   fir,   der_iden,   modelform,   control,   keep_constant,   Plot_Type,   Strat_Col,   time_lims,   age_unit,   model_control = list() )"},{"path":"/reference/CoxStratifiedSurvival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculates and plots survival curves for each unique value of the stratification column\nCoxStratifiedSurvival uses user provided data, columns, and identifier to calculate the survival fraction for each strata — CoxStratifiedSurvival","text":"verbose boolean control additional information printed console df data.table containing columns interest event0 column used event status time1 column used time period starts time2 column used time period end names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step a_n list initial parameter values, used determine number parameters er standard deviation parameters fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter modelform string specifying model type control list parameters controlling convergence keep_constant binary values denote parameters change Plot_Type list parameters controlling plot options Strat_Col column stratify needed time_lims limits x axis plot age_unit age unit model_control controls alternative model options used","code":""},{"path":"/reference/CoxStratifiedSurvival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculates and plots survival curves for each unique value of the stratification column\nCoxStratifiedSurvival uses user provided data, columns, and identifier to calculate the survival fraction for each strata — CoxStratifiedSurvival","text":"saves plots current directory returns string passed","code":""},{"path":"/reference/CoxSurvival.html","id":null,"dir":"Reference","previous_headings":"","what":"calculates and plots survival plots of the estimated baseline\nCoxSurvival uses user provided data, columns, and identifier to create plots — CoxSurvival","title":"calculates and plots survival plots of the estimated baseline\nCoxSurvival uses user provided data, columns, and identifier to create plots — CoxSurvival","text":"calculates plots survival plots estimated baseline CoxSurvival uses user provided data, columns, identifier create plots","code":""},{"path":"/reference/CoxSurvival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculates and plots survival plots of the estimated baseline\nCoxSurvival uses user provided data, columns, and identifier to create plots — CoxSurvival","text":"","code":"CoxSurvival(t, h, ch, surv, Plot_Name, verbose, time_lims, age_unit)"},{"path":"/reference/CoxSurvival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculates and plots survival plots of the estimated baseline\nCoxSurvival uses user provided data, columns, and identifier to create plots — CoxSurvival","text":"t event times h hazards baseline ch cumulative hazards baseline surv survival fraction baseline Plot_Name plot identifier verbose boolean control additional information printed console time_lims limits x axis plot age_unit age unit","code":""},{"path":"/reference/CoxSurvival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculates and plots survival plots of the estimated baseline\nCoxSurvival uses user provided data, columns, and identifier to create plots — CoxSurvival","text":"saves plots current directory returns string passed","code":""},{"path":"/reference/Cox_Refresh_R_SIDES.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to refresh side matrices for Cox Omnibus\nCox_Refresh_R_SIDES Called to fresh repeated sum calculation matrices — Cox_Refresh_R_SIDES","title":"Utility function to refresh side matrices for Cox Omnibus\nCox_Refresh_R_SIDES Called to fresh repeated sum calculation matrices — Cox_Refresh_R_SIDES","text":"Utility function refresh side matrices Cox Omnibus Cox_Refresh_R_SIDES Called fresh repeated sum calculation matrices","code":""},{"path":"/reference/Cox_Refresh_R_SIDES.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to refresh side matrices for Cox Omnibus\nCox_Refresh_R_SIDES Called to fresh repeated sum calculation matrices — Cox_Refresh_R_SIDES","text":"","code":"Cox_Refresh_R_SIDES(   reqrdnum,   ntime,   Rls1,   Rls2,   Rls3,   Lls1,   Lls2,   Lls3,   STRATA_vals,   strata_bool,   single_bool )"},{"path":"/reference/Cox_Refresh_R_SIDES.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to refresh side matrices for Cox Omnibus\nCox_Refresh_R_SIDES Called to fresh repeated sum calculation matrices — Cox_Refresh_R_SIDES","text":"reqrdnum total number free parameters ntime number risk groups Rls1 First Risk sum storage Rls2 First Risk sum derivative storage Rls3 First Risk sum second derivative storage Lls1 Second Risk sum storage Lls2 Second Risk sum derivative storage Lls3 Second Risk sum second derivative storage STRATA_vals vector strata identifier values strata_bool boolean stratification single_bool boolean single calculation without derivatives","code":""},{"path":"/reference/Cox_Refresh_R_SIDES.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to refresh side matrices for Cox Omnibus\nCox_Refresh_R_SIDES Called to fresh repeated sum calculation matrices — Cox_Refresh_R_SIDES","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Cox_Refresh_R_TERM.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to refresh risk and subterm matrices for Cox Omnibus function\nCox_Refresh_R_TERM Called to update matrices — Cox_Refresh_R_TERM","title":"Utility function to refresh risk and subterm matrices for Cox Omnibus function\nCox_Refresh_R_TERM Called to update matrices — Cox_Refresh_R_TERM","text":"Utility function refresh risk subterm matrices Cox Omnibus function Cox_Refresh_R_TERM Called update matrices","code":""},{"path":"/reference/Cox_Refresh_R_TERM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to refresh risk and subterm matrices for Cox Omnibus function\nCox_Refresh_R_TERM Called to update matrices — Cox_Refresh_R_TERM","text":"","code":"Cox_Refresh_R_TERM(   totalnum,   reqrdnum,   term_tot,   dint,   dslp,   dose_abs_max,   abs_max,   df0,   T0,   Td0,   Tdd0,   Te,   R,   Rd,   Rdd,   Dose,   nonDose,   TTerm,   nonDose_LIN,   nonDose_PLIN,   nonDose_LOGLIN,   RdR,   RddR,   basic_bool,   single_bool )"},{"path":"/reference/Cox_Refresh_R_TERM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to refresh risk and subterm matrices for Cox Omnibus function\nCox_Refresh_R_TERM Called to update matrices — Cox_Refresh_R_TERM","text":"totalnum total number parameters reqrdnum total number free parameters term_tot total number terms dint value used threshold derivative finite step dslp value used slope derivative finite step dose_abs_max Maximum allowed threshold parameter change abs_max Maximum allowed parameter change df0 matrix covariate values T0 Term value subterm Td0 Term subterm derivative matrix Tdd0 Term subterm second derivative matrix Te temporary term storage matrix R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix Dose term matrix nonDose term matrix TTerm Total term matrix nonDose_LIN Linear term matrix nonDose_PLIN Product linear term matrix nonDose_LOGLIN Loglinear term matrix RdR Risk first derivative ratio matrix RddR Risk second derivative ratio matrix basic_bool boolean multiplicative log-linear model single_bool boolean single calculation without derivatives","code":""},{"path":"/reference/Cox_Refresh_R_TERM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to refresh risk and subterm matrices for Cox Omnibus function\nCox_Refresh_R_TERM Called to update matrices — Cox_Refresh_R_TERM","text":"Updates matrices place","code":""},{"path":"/reference/Cox_Relative_Risk.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates hazard ratios for a reference vector\nRunCoxRegression uses user provided data,  vectors specifying the model,\nand options to calculate relative risk for every row in the provided data — Cox_Relative_Risk","title":"Calculates hazard ratios for a reference vector\nRunCoxRegression uses user provided data,  vectors specifying the model,\nand options to calculate relative risk for every row in the provided data — Cox_Relative_Risk","text":"Calculates hazard ratios reference vector RunCoxRegression uses user provided data,  vectors specifying model, options calculate relative risk every row provided data","code":""},{"path":"/reference/Cox_Relative_Risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates hazard ratios for a reference vector\nRunCoxRegression uses user provided data,  vectors specifying the model,\nand options to calculate relative risk for every row in the provided data — Cox_Relative_Risk","text":"","code":"Cox_Relative_Risk(   df,   time1,   time2,   event0,   names,   Term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   control,   model_control = list() )"},{"path":"/reference/Cox_Relative_Risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates hazard ratios for a reference vector\nRunCoxRegression uses user provided data,  vectors specifying the model,\nand options to calculate relative risk for every row in the provided data — Cox_Relative_Risk","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters control list parameters controlling convergence model_control controls alternative model options used","code":""},{"path":"/reference/Cox_Relative_Risk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates hazard ratios for a reference vector\nRunCoxRegression uses user provided data,  vectors specifying the model,\nand options to calculate relative risk for every row in the provided data — Cox_Relative_Risk","text":"returns list final results","code":""},{"path":"/reference/Cox_Relative_Risk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates hazard ratios for a reference vector\nRunCoxRegression uses user provided data,  vectors specifying the model,\nand options to calculate relative risk for every row in the provided data — Cox_Relative_Risk","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') Term_n <- c(0,1,1,2) fir <- 0 tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" a_n <- c(1.1, 0.1, 0.2, 0.5) #used to test at a specific point  keep_constant <- c(0,0,0,0)  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,    'epsilon' = 1e-3,    'dbeta_max' = 0.5,'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1)  e <- Cox_Relative_Risk(df, time1, time2, event, names, Term_n, tform,      keep_constant, a_n, modelform, fir, control)"},{"path":"/reference/Cox_Side_LL_Calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to perform calculation of Repeated Calculations and Log-Likelihood for Cox Omnibus\nCox_Side_LL_Calc Called to perform repeated term and risk calculations — Cox_Side_LL_Calc","title":"Utility function to perform calculation of Repeated Calculations and Log-Likelihood for Cox Omnibus\nCox_Side_LL_Calc Called to perform repeated term and risk calculations — Cox_Side_LL_Calc","text":"Utility function perform calculation Repeated Calculations Log-Likelihood Cox Omnibus Cox_Side_LL_Calc Called perform repeated term risk calculations","code":""},{"path":"/reference/Cox_Side_LL_Calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to perform calculation of Repeated Calculations and Log-Likelihood for Cox Omnibus\nCox_Side_LL_Calc Called to perform repeated term and risk calculations — Cox_Side_LL_Calc","text":"","code":"Cox_Side_LL_Calc(   reqrdnum,   ntime,   RiskFail,   RiskGroup_Strata,   RiskGroup,   totalnum,   fir,   R,   Rd,   Rdd,   Rls1,   Rls2,   Rls3,   Lls1,   Lls2,   Lls3,   cens_weight,   STRATA_vals,   beta_0,   RdR,   RddR,   Ll,   Lld,   Lldd,   nthreads,   debugging,   KeepConstant,   ties_method,   verbose,   strata_bool,   CR_bool,   basic_bool,   single_bool,   start,   iter_stop )"},{"path":"/reference/Cox_Side_LL_Calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to perform calculation of Repeated Calculations and Log-Likelihood for Cox Omnibus\nCox_Side_LL_Calc Called to perform repeated term and risk calculations — Cox_Side_LL_Calc","text":"reqrdnum total number free parameters ntime number risk groups RiskFail matrix indexes event rows risk group RiskGroup_Strata matrix strings rows risk event time strata RiskGroup list string indices every risk group totalnum total number parameters fir st term number R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix Rls1 First Risk sum storage Rls2 First Risk sum derivative storage Rls3 First Risk sum second derivative storage Lls1 Second Risk sum storage Lls2 Second Risk sum derivative storage Lls3 Second Risk sum second derivative storage cens_weight vector censoring weights STRATA_vals vector strata identifier values beta_0 parameter estimates RdR Risk first derivative ratio matrix RddR Risk second derivative ratio matrix Ll Log-likelihood vector Lld Log-likelihood first derivative matrix Lldd Log-likelihood second derivative matrix nthreads number threads available debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters ties_method Ties method verbose boolean additional printing strata_bool boolean stratification CR_bool boolean competing risks basic_bool boolean multiplicative log-linear model single_bool boolean single calculation without derivatives start starting time regression iter_stop binary value used tell function continue iteration","code":""},{"path":"/reference/Cox_Side_LL_Calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to perform calculation of Repeated Calculations and Log-Likelihood for Cox Omnibus\nCox_Side_LL_Calc Called to perform repeated term and risk calculations — Cox_Side_LL_Calc","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Cox_Term_Risk_Calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to perform calculation of terms and risks for Cox Omnibus\nCox_Term_Risk_Calc Called to perform repeated term and risk calculations — Cox_Term_Risk_Calc","title":"Utility function to perform calculation of terms and risks for Cox Omnibus\nCox_Term_Risk_Calc Called to perform repeated term and risk calculations — Cox_Term_Risk_Calc","text":"Utility function perform calculation terms risks Cox Omnibus Cox_Term_Risk_Calc Called perform repeated term risk calculations","code":""},{"path":"/reference/Cox_Term_Risk_Calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to perform calculation of terms and risks for Cox Omnibus\nCox_Term_Risk_Calc Called to perform repeated term and risk calculations — Cox_Term_Risk_Calc","text":"","code":"Cox_Term_Risk_Calc(   modelform,   tform,   Term_n,   totalnum,   fir,   dfc,   term_tot,   T0,   Td0,   Tdd0,   Te,   R,   Rd,   Rdd,   Dose,   nonDose,   beta_0,   df0,   dint,   dslp,   TTerm,   nonDose_LIN,   nonDose_PLIN,   nonDose_LOGLIN,   RdR,   RddR,   nthreads,   debugging,   KeepConstant,   verbose,   basic_bool,   single_bool,   start,   gmix_theta,   gmix_term )"},{"path":"/reference/Cox_Term_Risk_Calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to perform calculation of terms and risks for Cox Omnibus\nCox_Term_Risk_Calc Called to perform repeated term and risk calculations — Cox_Term_Risk_Calc","text":"modelform string model identifier tform subterm types Term_n Term numbers totalnum total number parameters fir st term number dfc vector matching subterm number matrix column term_tot total number terms T0 Term value subterm Td0 Term subterm derivative matrix Tdd0 Term subterm second derivative matrix Te temporary term storage matrix R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix Dose term matrix nonDose term matrix beta_0 parameter estimates df0 matrix covariate values dint value used threshold derivative finite step dslp value used slope derivative finite step TTerm Total term matrix nonDose_LIN Linear term matrix nonDose_PLIN Product linear term matrix nonDose_LOGLIN Loglinear term matrix RdR Risk first derivative ratio matrix RddR Risk second derivative ratio matrix nthreads number threads available debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters verbose boolean additional printing basic_bool boolean multiplicative log-linear model single_bool boolean single calculation without derivatives start starting time regression gmix_theta theta value geometric-mixture model gmix_term list 0/1 identify terms set Relative Risk (0) Excess Risk (1)","code":""},{"path":"/reference/Cox_Term_Risk_Calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to perform calculation of terms and risks for Cox Omnibus\nCox_Term_Risk_Calc Called to perform repeated term and risk calculations — Cox_Term_Risk_Calc","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Date_Shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Automates creating a date difference column\nDate_Shift generates a new dataframe with a column containing time difference in a given unit — Date_Shift","title":"Automates creating a date difference column\nDate_Shift generates a new dataframe with a column containing time difference in a given unit — Date_Shift","text":"Automates creating date difference column Date_Shift generates new dataframe column containing time difference given unit","code":""},{"path":"/reference/Date_Shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automates creating a date difference column\nDate_Shift generates a new dataframe with a column containing time difference in a given unit — Date_Shift","text":"","code":"Date_Shift(df, dcol0, dcol1, col_name, units = \"days\")"},{"path":"/reference/Date_Shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automates creating a date difference column\nDate_Shift generates a new dataframe with a column containing time difference in a given unit — Date_Shift","text":"df data.table containing columns interest dcol0 list starting month, day, year dcol1 list ending month, day, year col_name new column name units time unit use","code":""},{"path":"/reference/Date_Shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automates creating a date difference column\nDate_Shift generates a new dataframe with a column containing time difference in a given unit — Date_Shift","text":"returns updated dataframe","code":""},{"path":"/reference/Date_Shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automates creating a date difference column\nDate_Shift generates a new dataframe with a column containing time difference in a given unit — Date_Shift","text":"","code":"library(data.table) m0 <- c(1,1,2,2) m1 <- c(2,2,3,3) d0 <- c(1,2,3,4) d1 <- c(6,7,8,9) y0 <- c(1990,1991,1997,1998) y1 <- c(2001,2003,2005,2006) df <- data.table(\"m0\"=m0,\"m1\"=m1,\"d0\"=d0,\"d1\"=d1,\"y0\"=y0,\"y1\"=y1) df <- Date_Shift(df,c(\"m0\",\"d0\",\"y0\"),c(\"m1\",\"d1\",\"y1\"),\"date_since\")"},{"path":"/reference/Def_Control.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically assigns missing control values\nDef_Control checks and assigns default values — Def_Control","title":"Automatically assigns missing control values\nDef_Control checks and assigns default values — Def_Control","text":"Automatically assigns missing control values Def_Control checks assigns default values","code":""},{"path":"/reference/Def_Control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically assigns missing control values\nDef_Control checks and assigns default values — Def_Control","text":"","code":"Def_Control(control)"},{"path":"/reference/Def_Control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically assigns missing control values\nDef_Control checks and assigns default values — Def_Control","text":"control list parameters controlling convergence","code":""},{"path":"/reference/Def_Control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically assigns missing control values\nDef_Control checks and assigns default values — Def_Control","text":"returns filled list","code":""},{"path":"/reference/Def_Control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically assigns missing control values\nDef_Control checks and assigns default values — Def_Control","text":"","code":"library(data.table) control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5, 'ties'='breslow','double_step'=1) control <- Def_Control(control)"},{"path":"/reference/Def_Control_Guess.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically assigns missing guessing control values\nDef_Control_Guess checks and assigns default values — Def_Control_Guess","title":"Automatically assigns missing guessing control values\nDef_Control_Guess checks and assigns default values — Def_Control_Guess","text":"Automatically assigns missing guessing control values Def_Control_Guess checks assigns default values","code":""},{"path":"/reference/Def_Control_Guess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically assigns missing guessing control values\nDef_Control_Guess checks and assigns default values — Def_Control_Guess","text":"","code":"Def_Control_Guess(guesses_control, a_n)"},{"path":"/reference/Def_Control_Guess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically assigns missing guessing control values\nDef_Control_Guess checks and assigns default values — Def_Control_Guess","text":"guesses_control list parameters control guessing works a_n list initial parameter values, used determine number parameters","code":""},{"path":"/reference/Def_Control_Guess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically assigns missing guessing control values\nDef_Control_Guess checks and assigns default values — Def_Control_Guess","text":"returns filled list","code":""},{"path":"/reference/Def_Control_Guess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically assigns missing guessing control values\nDef_Control_Guess checks and assigns default values — Def_Control_Guess","text":"","code":"library(data.table) guesses_control <- list(\"maxiter\"=10,\"guesses\"=10,     \"loglin_min\"=-1,\"loglin_max\"=1,\"loglin_method\"=\"uniform\") a_n <- c(0.1,2,1.3) guesses_control <- Def_Control_Guess(guesses_control, a_n)"},{"path":"/reference/Def_model_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically assigns missing model control values\nDef_model_control checks and assigns default values — Def_model_control","title":"Automatically assigns missing model control values\nDef_model_control checks and assigns default values — Def_model_control","text":"Automatically assigns missing model control values Def_model_control checks assigns default values","code":""},{"path":"/reference/Def_model_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically assigns missing model control values\nDef_model_control checks and assigns default values — Def_model_control","text":"","code":"Def_model_control(control)"},{"path":"/reference/Def_model_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically assigns missing model control values\nDef_model_control checks and assigns default values — Def_model_control","text":"control list parameters controlling convergence","code":""},{"path":"/reference/Def_model_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically assigns missing model control values\nDef_model_control checks and assigns default values — Def_model_control","text":"returns filled list","code":""},{"path":"/reference/Def_model_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically assigns missing model control values\nDef_model_control checks and assigns default values — Def_model_control","text":"","code":"library(data.table) control <- list(\"single\"=TRUE) control <- Def_model_control(control)"},{"path":"/reference/Def_modelform_fix.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically assigns geometric-mixture values\nDef_model_control checks and assigns default values — Def_modelform_fix","title":"Automatically assigns geometric-mixture values\nDef_model_control checks and assigns default values — Def_modelform_fix","text":"Automatically assigns geometric-mixture values Def_model_control checks assigns default values","code":""},{"path":"/reference/Def_modelform_fix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically assigns geometric-mixture values\nDef_model_control checks and assigns default values — Def_modelform_fix","text":"","code":"Def_modelform_fix(control, model_control, modelform, Term_n)"},{"path":"/reference/Def_modelform_fix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically assigns geometric-mixture values\nDef_model_control checks and assigns default values — Def_modelform_fix","text":"control list parameters controlling convergence model_control controls alternative model options used modelform string specifying model type Term_n term numbers element model","code":""},{"path":"/reference/Def_modelform_fix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically assigns geometric-mixture values\nDef_model_control checks and assigns default values — Def_modelform_fix","text":"returns filled list","code":""},{"path":"/reference/Def_modelform_fix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically assigns geometric-mixture values\nDef_model_control checks and assigns default values — Def_modelform_fix","text":"","code":"library(data.table) control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5, 'ties'='breslow','double_step'=1) control <- Def_Control(control) model_control <- list(\"single\"=TRUE) model_control <- Def_model_control(model_control) Term_n <- c(0,1,1) modelform <- 'a' val <- Def_modelform_fix(control,model_control,modelform,Term_n) model_control <- val$model_control modelform <- val$modelform"},{"path":"/reference/Gather_Guesses_CPP.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs checks to gather a list of guesses and iterations\nGather_Guesses_CPP called from within R, uses a list of options and the model definition to generate a list of parameters and iterations that do not produce errors — Gather_Guesses_CPP","title":"Performs checks to gather a list of guesses and iterations\nGather_Guesses_CPP called from within R, uses a list of options and the model definition to generate a list of parameters and iterations that do not produce errors — Gather_Guesses_CPP","text":"Performs checks gather list guesses iterations Gather_Guesses_CPP called within R, uses list options model definition generate list parameters iterations produce errors","code":""},{"path":"/reference/Gather_Guesses_CPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs checks to gather a list of guesses and iterations\nGather_Guesses_CPP called from within R, uses a list of options and the model definition to generate a list of parameters and iterations that do not produce errors — Gather_Guesses_CPP","text":"","code":"Gather_Guesses_CPP(   df,   dfc,   names,   Term_n,   tform,   keep_constant,   a_n,   x_all,   a_n_default,   modelform,   fir,   control,   guesses_control,   model_control = list() )"},{"path":"/reference/Gather_Guesses_CPP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs checks to gather a list of guesses and iterations\nGather_Guesses_CPP called from within R, uses a list of options and the model definition to generate a list of parameters and iterations that do not produce errors — Gather_Guesses_CPP","text":"df data.table containing columns interest dfc vector matching subterm number matrix column names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters x_all covariate matrix a_n_default center parameter distribution guessing scope modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters control list parameters controlling convergence guesses_control list parameters control guessing works model_control controls alternative model options used","code":""},{"path":"/reference/Gather_Guesses_CPP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs checks to gather a list of guesses and iterations\nGather_Guesses_CPP called from within R, uses a list of options and the model definition to generate a list of parameters and iterations that do not produce errors — Gather_Guesses_CPP","text":"returns list final results","code":""},{"path":"/reference/Gen_Fac_Par.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates factored columns in parallel\nGen_Fac_Par Called directly from R, returns a matrix with factored columns — Gen_Fac_Par","title":"Generates factored columns in parallel\nGen_Fac_Par Called directly from R, returns a matrix with factored columns — Gen_Fac_Par","text":"Generates factored columns parallel Gen_Fac_Par Called directly R, returns matrix factored columns","code":""},{"path":"/reference/Gen_Fac_Par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates factored columns in parallel\nGen_Fac_Par Called directly from R, returns a matrix with factored columns — Gen_Fac_Par","text":"","code":"Gen_Fac_Par(df0, vals, cols, nthreads)"},{"path":"/reference/Gen_Fac_Par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates factored columns in parallel\nGen_Fac_Par Called directly from R, returns a matrix with factored columns — Gen_Fac_Par","text":"df0 matrix covariate values vals list values column, single continuous list cols list column identifiers, single continuous list nthreads number threads available","code":""},{"path":"/reference/Gen_Fac_Par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates factored columns in parallel\nGen_Fac_Par Called directly from R, returns a matrix with factored columns — Gen_Fac_Par","text":"saves dataframe used time-dependent covariate analysis","code":""},{"path":"/reference/Gen_Strat_Weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates weightings for stratified poisson regression\nGen_Strat_Weight Called from within c++, assigns vector of weights — Gen_Strat_Weight","title":"Generates weightings for stratified poisson regression\nGen_Strat_Weight Called from within c++, assigns vector of weights — Gen_Strat_Weight","text":"Generates weightings stratified poisson regression Gen_Strat_Weight Called within c++, assigns vector weights","code":""},{"path":"/reference/Gen_Strat_Weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates weightings for stratified poisson regression\nGen_Strat_Weight Called from within c++, assigns vector of weights — Gen_Strat_Weight","text":"","code":"Gen_Strat_Weight(   modelform,   dfs,   PyrC,   s_weights,   nthreads,   tform,   Term_n,   term_tot )"},{"path":"/reference/Gen_Strat_Weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates weightings for stratified poisson regression\nGen_Strat_Weight Called from within c++, assigns vector of weights — Gen_Strat_Weight","text":"modelform string model identifier dfs Matrix stratification columns, assumed binary mutually exclusive PyrC matrix person-years event counts s_weights vector weights every row nthreads number threads available tform subterm types Term_n Term numbers term_tot total number terms","code":""},{"path":"/reference/Gen_Strat_Weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates weightings for stratified poisson regression\nGen_Strat_Weight Called from within c++, assigns vector of weights — Gen_Strat_Weight","text":"assigns weight place returns nothing","code":""},{"path":"/reference/GetCensWeight.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates and returns data for time by hazard and survival to estimate censoring rate\nGetCensWeight uses user provided data, time/event columns, vectors specifying the model, and options generate an estimate of the censoring rate, plots, and returns the data — GetCensWeight","title":"Calculates and returns data for time by hazard and survival to estimate censoring rate\nGetCensWeight uses user provided data, time/event columns, vectors specifying the model, and options generate an estimate of the censoring rate, plots, and returns the data — GetCensWeight","text":"Calculates returns data time hazard survival estimate censoring rate GetCensWeight uses user provided data, time/event columns, vectors specifying model, options generate estimate censoring rate, plots, returns data","code":""},{"path":"/reference/GetCensWeight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates and returns data for time by hazard and survival to estimate censoring rate\nGetCensWeight uses user provided data, time/event columns, vectors specifying the model, and options generate an estimate of the censoring rate, plots, and returns the data — GetCensWeight","text":"","code":"GetCensWeight(   df,   time1,   time2,   event0,   names,   Term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   control,   plot_options,   model_control = list(),   Strat_Col = \"e\" )"},{"path":"/reference/GetCensWeight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates and returns data for time by hazard and survival to estimate censoring rate\nGetCensWeight uses user provided data, time/event columns, vectors specifying the model, and options generate an estimate of the censoring rate, plots, and returns the data — GetCensWeight","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters control list parameters controlling convergence plot_options list parameters controlling plot options model_control controls alternative model options used Strat_Col column stratify needed","code":""},{"path":"/reference/GetCensWeight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates and returns data for time by hazard and survival to estimate censoring rate\nGetCensWeight uses user provided data, time/event columns, vectors specifying the model, and options generate an estimate of the censoring rate, plots, and returns the data — GetCensWeight","text":"saves plots current directory returns data.table time corresponding hazard, cumulative hazard, survival","code":""},{"path":"/reference/GetCensWeight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates and returns data for time by hazard and survival to estimate censoring rate\nGetCensWeight uses user provided data, time/event columns, vectors specifying the model, and options generate an estimate of the censoring rate, plots, and returns the data — GetCensWeight","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(0.1, 0.1, 0.1, 0.1)  keep_constant <- c(0,0,0,0) der_iden <- 0 df$censor <- (df$Cancer_Status==0) event <- \"censor\" control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 20,'halfmax' = 5,    'epsilon' = 1e-6,'dbeta_max' = 0.5,'deriv_epsilon' = 1e-6,    'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,'verbose'=FALSE,    'ties'='breslow','double_step'=1) plot_options <- list(\"name\"=paste(tempfile(),\"run_06\",sep=\"\"),\"verbose\"=FALSE,                      \"studyID\"=\"studyID\",\"age_unit\"=\"years\") dft <- GetCensWeight(df, time1, time2, event, names, Term_n, tform,                      keep_constant, a_n, modelform, fir, control, plot_options) #> Saving 6.67 x 6.67 in image t_ref <- dft$t surv_ref <- dft$surv t_c <- df$t1 cens_weight <- approx(t_ref, surv_ref, t_c,rule=2)$y"},{"path":"/reference/Intercept_Bound.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to keep intercept parameters within the range of possible values\nIntercept_Bound Called to update the parameter list in the event that intercepts leave the bounds of possible values — Intercept_Bound","title":"Utility function to keep intercept parameters within the range of possible values\nIntercept_Bound Called to update the parameter list in the event that intercepts leave the bounds of possible values — Intercept_Bound","text":"Utility function keep intercept parameters within range possible values Intercept_Bound Called update parameter list event intercepts leave bounds possible values","code":""},{"path":"/reference/Intercept_Bound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to keep intercept parameters within the range of possible values\nIntercept_Bound Called to update the parameter list in the event that intercepts leave the bounds of possible values — Intercept_Bound","text":"","code":"Intercept_Bound(   nthreads,   totalnum,   beta_0,   dbeta,   dfc,   df0,   KeepConstant,   debugging,   tform )"},{"path":"/reference/Intercept_Bound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to keep intercept parameters within the range of possible values\nIntercept_Bound Called to update the parameter list in the event that intercepts leave the bounds of possible values — Intercept_Bound","text":"nthreads number threads available totalnum total number parameters beta_0 parameter estimates dbeta parameter change vector dfc vector matching subterm number matrix column df0 matrix covariate values KeepConstant binary vector identify constant parameters debugging additional boolean verbosity testing tform subterm types","code":""},{"path":"/reference/Intercept_Bound.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to keep intercept parameters within the range of possible values\nIntercept_Bound Called to update the parameter list in the event that intercepts leave the bounds of possible values — Intercept_Bound","text":"Updates vector place: parameter vector","code":""},{"path":"/reference/Likelihood_Ratio_Test.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines the likelihood ratio test\nLikelihood_Ratio_Test uses two models and calculates the ratio — Likelihood_Ratio_Test","title":"Defines the likelihood ratio test\nLikelihood_Ratio_Test uses two models and calculates the ratio — Likelihood_Ratio_Test","text":"Defines likelihood ratio test Likelihood_Ratio_Test uses two models calculates ratio","code":""},{"path":"/reference/Likelihood_Ratio_Test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines the likelihood ratio test\nLikelihood_Ratio_Test uses two models and calculates the ratio — Likelihood_Ratio_Test","text":"","code":"Likelihood_Ratio_Test(alternative_model, null_model)"},{"path":"/reference/Likelihood_Ratio_Test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines the likelihood ratio test\nLikelihood_Ratio_Test uses two models and calculates the ratio — Likelihood_Ratio_Test","text":"alternative_model new model interest null_model model compare ","code":""},{"path":"/reference/Likelihood_Ratio_Test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines the likelihood ratio test\nLikelihood_Ratio_Test uses two models and calculates the ratio — Likelihood_Ratio_Test","text":"returns score statistic","code":""},{"path":"/reference/Likelihood_Ratio_Test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defines the likelihood ratio test\nLikelihood_Ratio_Test uses two models and calculates the ratio — Likelihood_Ratio_Test","text":"","code":"library(data.table) #In an actual example, one would run two seperate RunCoxRegression regressions, #    assigning the results to e0 and e1 e0 <- list(\"name\"=\"First Model\",\"LogLik\"=-120) e1 <- list(\"name\"=\"New Model\",\"LogLik\"=-100) score <- Likelihood_Ratio_Test(e1, e0)"},{"path":"/reference/Linked_Dose_Formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Full Parameter list for Special Dose Formula\nLinked_Dose_Formula Calculates all parameters for linear-quadratic and linear-exponential linked formulas — Linked_Dose_Formula","title":"Calculates Full Parameter list for Special Dose Formula\nLinked_Dose_Formula Calculates all parameters for linear-quadratic and linear-exponential linked formulas — Linked_Dose_Formula","text":"Calculates Full Parameter list Special Dose Formula Linked_Dose_Formula Calculates parameters linear-quadratic linear-exponential linked formulas","code":""},{"path":"/reference/Linked_Dose_Formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Full Parameter list for Special Dose Formula\nLinked_Dose_Formula Calculates all parameters for linear-quadratic and linear-exponential linked formulas — Linked_Dose_Formula","text":"","code":"Linked_Dose_Formula(tforms, paras, verbose = FALSE)"},{"path":"/reference/Linked_Dose_Formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Full Parameter list for Special Dose Formula\nLinked_Dose_Formula Calculates all parameters for linear-quadratic and linear-exponential linked formulas — Linked_Dose_Formula","text":"tforms list formula types paras list formula parameters verbose boolean control additional information printed console","code":""},{"path":"/reference/Linked_Dose_Formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Full Parameter list for Special Dose Formula\nLinked_Dose_Formula Calculates all parameters for linear-quadratic and linear-exponential linked formulas — Linked_Dose_Formula","text":"returns list full parameters","code":""},{"path":"/reference/Linked_Dose_Formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Full Parameter list for Special Dose Formula\nLinked_Dose_Formula Calculates all parameters for linear-quadratic and linear-exponential linked formulas — Linked_Dose_Formula","text":"","code":"library(data.table) tforms <- list(\"cov_0\"=\"quad\", \"cov_1\"=\"exp\") paras <- list(\"cov_0\"=c(1,3.45), \"cov_1\"=c(1.2, 4.5, 0.1)) full_paras <- Linked_Dose_Formula(tforms, paras)"},{"path":"/reference/Linked_Lin_Exp_Para.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates The Additional Parameter For a linear-exponential formula with known maximum\nLinked_Lin_Exp_Para Calculates what the additional parameter would be for a desired maximum — Linked_Lin_Exp_Para","title":"Calculates The Additional Parameter For a linear-exponential formula with known maximum\nLinked_Lin_Exp_Para Calculates what the additional parameter would be for a desired maximum — Linked_Lin_Exp_Para","text":"Calculates Additional Parameter linear-exponential formula known maximum Linked_Lin_Exp_Para Calculates additional parameter desired maximum","code":""},{"path":"/reference/Linked_Lin_Exp_Para.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates The Additional Parameter For a linear-exponential formula with known maximum\nLinked_Lin_Exp_Para Calculates what the additional parameter would be for a desired maximum — Linked_Lin_Exp_Para","text":"","code":"Linked_Lin_Exp_Para(y, a0, a1_goal, verbose = FALSE)"},{"path":"/reference/Linked_Lin_Exp_Para.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates The Additional Parameter For a linear-exponential formula with known maximum\nLinked_Lin_Exp_Para Calculates what the additional parameter would be for a desired maximum — Linked_Lin_Exp_Para","text":"y point formula switch a0 linear slope a1_goal exponential maximum desired verbose boolean control additional information printed console","code":""},{"path":"/reference/Linked_Lin_Exp_Para.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates The Additional Parameter For a linear-exponential formula with known maximum\nLinked_Lin_Exp_Para Calculates what the additional parameter would be for a desired maximum — Linked_Lin_Exp_Para","text":"returns parameter used Colossus","code":""},{"path":"/reference/Linked_Lin_Exp_Para.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates The Additional Parameter For a linear-exponential formula with known maximum\nLinked_Lin_Exp_Para Calculates what the additional parameter would be for a desired maximum — Linked_Lin_Exp_Para","text":"","code":"library(data.table) y <- 7.6 a0 <- 1.2 a1_goal <- 15 full_paras <- Linked_Lin_Exp_Para(y,a0,a1_goal)"},{"path":"/reference/LogLik_Cox_PH_Omnibus.html","id":null,"dir":"Reference","previous_headings":"","what":"Primary Cox PH regression with multiple starting points and optional combinations of null, stratification, competing risks, multiplicative log-linear model, and no derivative calculation.\nLogLik_Cox_PH_Omnibus Performs the calls to calculation functions, Structures the Cox PH regression, With verbose option prints out time stamps and intermediate sums of terms and derivatives — LogLik_Cox_PH_Omnibus","title":"Primary Cox PH regression with multiple starting points and optional combinations of null, stratification, competing risks, multiplicative log-linear model, and no derivative calculation.\nLogLik_Cox_PH_Omnibus Performs the calls to calculation functions, Structures the Cox PH regression, With verbose option prints out time stamps and intermediate sums of terms and derivatives — LogLik_Cox_PH_Omnibus","text":"Primary Cox PH regression multiple starting points optional combinations null, stratification, competing risks, multiplicative log-linear model, derivative calculation. LogLik_Cox_PH_Omnibus Performs calls calculation functions, Structures Cox PH regression, verbose option prints time stamps intermediate sums terms derivatives","code":""},{"path":"/reference/LogLik_Cox_PH_Omnibus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primary Cox PH regression with multiple starting points and optional combinations of null, stratification, competing risks, multiplicative log-linear model, and no derivative calculation.\nLogLik_Cox_PH_Omnibus Performs the calls to calculation functions, Structures the Cox PH regression, With verbose option prints out time stamps and intermediate sums of terms and derivatives — LogLik_Cox_PH_Omnibus","text":"","code":"LogLik_Cox_PH_Omnibus(   Term_n,   tform,   a_ns,   x_all,   dfc,   fir,   der_iden,   modelform,   lr,   maxiters,   guesses,   halfmax,   epsilon,   dbeta_cap,   abs_max,   dose_abs_max,   deriv_epsilon,   df_groups,   tu,   double_step,   change_all,   verbose,   debugging,   KeepConstant,   term_tot,   ties_method,   nthreads,   STRATA_vals,   cens_weight,   cens_thres,   strata_bool,   basic_bool,   null_bool,   CR_bool,   single_bool,   constraint_bool,   gmix_theta,   gmix_term,   Lin_Sys,   Lin_Res )"},{"path":"/reference/LogLik_Cox_PH_Omnibus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Primary Cox PH regression with multiple starting points and optional combinations of null, stratification, competing risks, multiplicative log-linear model, and no derivative calculation.\nLogLik_Cox_PH_Omnibus Performs the calls to calculation functions, Structures the Cox PH regression, With verbose option prints out time stamps and intermediate sums of terms and derivatives — LogLik_Cox_PH_Omnibus","text":"Term_n Term numbers tform subterm types a_ns matrix starting values x_all covariate matrix dfc vector matching subterm number matrix column fir st term number der_iden subterm number derivative tests modelform string model identifier lr learning rate newton step toward 0 derivative maxiters list maximum number iterations guesses number initial halfmax maximum number half steps epsilon minimum acceptable maximum parameter change dbeta_cap learning rate newton step toward 0 log-likelihood abs_max Maximum allowed parameter change dose_abs_max Maximum allowed threshold parameter change deriv_epsilon threshold near-zero derivative df_groups matrix time event information tu Event time vector double_step controls step calculation, 0 independent changes, 1 solving b=Ax complete matrices change_all boolean every parameter updated verbose boolean additional printing debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters term_tot total number terms ties_method Ties method nthreads number threads available STRATA_vals vector strata identifier values cens_weight vector censoring weights cens_thres threshold add competing event risk group strata_bool boolean stratification basic_bool boolean multiplicative log-linear model null_bool boolean null model CR_bool boolean competing risks single_bool boolean single calculation without derivatives constraint_bool boolean system linear equality constraints used gmix_theta theta value geometric-mixture model gmix_term list 0/1 identify terms set Relative Risk (0) Excess Risk (1) Lin_Sys Matrix containing coefficients system linear constraints Lin_Res Vector containing constants system linear constraints","code":""},{"path":"/reference/LogLik_Cox_PH_Omnibus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Primary Cox PH regression with multiple starting points and optional combinations of null, stratification, competing risks, multiplicative log-linear model, and no derivative calculation.\nLogLik_Cox_PH_Omnibus Performs the calls to calculation functions, Structures the Cox PH regression, With verbose option prints out time stamps and intermediate sums of terms and derivatives — LogLik_Cox_PH_Omnibus","text":"List final results: Log-likelihood optimum, first derivative log-likelihood, second derivative matrix, parameter list, standard deviation estimate, AIC, model information","code":""},{"path":"/reference/LogLik_Pois_Omnibus.html","id":null,"dir":"Reference","previous_headings":"","what":"Primary poisson regression with multiple starting points and optional combinations of stratification and no derivative calculation.\nLogLik_Pois_Omnibus Performs the calls to calculation functions, Structures the poisson regression, With verbose option prints out time stamps and intermediate sums of terms and derivatives — LogLik_Pois_Omnibus","title":"Primary poisson regression with multiple starting points and optional combinations of stratification and no derivative calculation.\nLogLik_Pois_Omnibus Performs the calls to calculation functions, Structures the poisson regression, With verbose option prints out time stamps and intermediate sums of terms and derivatives — LogLik_Pois_Omnibus","text":"Primary poisson regression multiple starting points optional combinations stratification derivative calculation. LogLik_Pois_Omnibus Performs calls calculation functions, Structures poisson regression, verbose option prints time stamps intermediate sums terms derivatives","code":""},{"path":"/reference/LogLik_Pois_Omnibus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primary poisson regression with multiple starting points and optional combinations of stratification and no derivative calculation.\nLogLik_Pois_Omnibus Performs the calls to calculation functions, Structures the poisson regression, With verbose option prints out time stamps and intermediate sums of terms and derivatives — LogLik_Pois_Omnibus","text":"","code":"LogLik_Pois_Omnibus(   PyrC,   Term_n,   tform,   a_ns,   x_all,   dfc,   fir,   der_iden,   modelform,   lr,   maxiters,   guesses,   halfmax,   epsilon,   dbeta_cap,   abs_max,   dose_abs_max,   deriv_epsilon,   double_step,   change_all,   verbose,   debugging,   KeepConstant,   term_tot,   nthreads,   dfs,   strata_bool,   single_bool,   constraint_bool,   gmix_theta,   gmix_term,   Lin_Sys,   Lin_Res )"},{"path":"/reference/LogLik_Pois_Omnibus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Primary poisson regression with multiple starting points and optional combinations of stratification and no derivative calculation.\nLogLik_Pois_Omnibus Performs the calls to calculation functions, Structures the poisson regression, With verbose option prints out time stamps and intermediate sums of terms and derivatives — LogLik_Pois_Omnibus","text":"PyrC matrix person-years event counts Term_n Term numbers tform subterm types a_ns matrix starting values x_all covariate matrix dfc vector matching subterm number matrix column fir st term number der_iden subterm number derivative tests modelform string model identifier lr learning rate newton step toward 0 derivative maxiters list maximum number iterations guesses number initial halfmax maximum number half steps epsilon minimum acceptable maximum parameter change dbeta_cap learning rate newton step toward 0 log-likelihood abs_max Maximum allowed parameter change dose_abs_max Maximum allowed threshold parameter change deriv_epsilon threshold near-zero derivative double_step controls step calculation, 0 independent changes, 1 solving b=Ax complete matrices change_all boolean every parameter updated verbose boolean additional printing debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters term_tot total number terms nthreads number threads available dfs Matrix stratification columns, assumed binary mutually exclusive strata_bool boolean stratification single_bool boolean single calculation without derivatives constraint_bool boolean system linear equality constraints used gmix_theta theta value geometric-mixture model gmix_term list 0/1 identify terms set Relative Risk (0) Excess Risk (1) Lin_Sys Matrix containing coefficients system linear constraints Lin_Res Vector containing constants system linear constraints","code":""},{"path":"/reference/LogLik_Pois_Omnibus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Primary poisson regression with multiple starting points and optional combinations of stratification and no derivative calculation.\nLogLik_Pois_Omnibus Performs the calls to calculation functions, Structures the poisson regression, With verbose option prints out time stamps and intermediate sums of terms and derivatives — LogLik_Pois_Omnibus","text":"List final results: Log-likelihood optimum, first derivative log-likelihood, second derivative matrix, parameter list, standard deviation estimate, AIC, model information","code":""},{"path":"/reference/Make_Groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to define risk groups\nMake_Groups Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group — Make_Groups","title":"Utility function to define risk groups\nMake_Groups Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group — Make_Groups","text":"Utility function define risk groups Make_Groups Called update lists risk groups, Uses list event times row time/event information, Matrices store starting/stopping row indices group","code":""},{"path":"/reference/Make_Groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to define risk groups\nMake_Groups Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group — Make_Groups","text":"","code":"Make_Groups(ntime, df_m, RiskFail, RiskGroup, tu, nthreads, debugging)"},{"path":"/reference/Make_Groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to define risk groups\nMake_Groups Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group — Make_Groups","text":"ntime number risk groups df_m event/time matrix RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group tu Event time vector nthreads number threads available debugging additional boolean verbosity testing","code":""},{"path":"/reference/Make_Groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to define risk groups\nMake_Groups Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group — Make_Groups","text":"Updates matrices place: Matrix event rows event time, vectors strings rows risk event time","code":""},{"path":"/reference/Make_Groups_CR.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to define risk groups with competing risks\nMake_Groups_CR Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group, adds rows with event=2 past the event time — Make_Groups_CR","title":"Utility function to define risk groups with competing risks\nMake_Groups_CR Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group, adds rows with event=2 past the event time — Make_Groups_CR","text":"Utility function define risk groups competing risks Make_Groups_CR Called update lists risk groups, Uses list event times row time/event information, Matrices store starting/stopping row indices group, adds rows event=2 past event time","code":""},{"path":"/reference/Make_Groups_CR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to define risk groups with competing risks\nMake_Groups_CR Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group, adds rows with event=2 past the event time — Make_Groups_CR","text":"","code":"Make_Groups_CR(   ntime,   df_m,   RiskFail,   RiskGroup,   tu,   cens_weight,   cens_cutoff,   nthreads,   debugging )"},{"path":"/reference/Make_Groups_CR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to define risk groups with competing risks\nMake_Groups_CR Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group, adds rows with event=2 past the event time — Make_Groups_CR","text":"ntime number risk groups df_m event/time matrix RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group tu Event time vector cens_weight vector censoring weights cens_cutoff double threshold adding competing risk risk group, implemented nthreads number threads available debugging additional boolean verbosity testing","code":""},{"path":"/reference/Make_Groups_CR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to define risk groups with competing risks\nMake_Groups_CR Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group, adds rows with event=2 past the event time — Make_Groups_CR","text":"Updates matrices place: Matrix event rows event time, vectors strings rows risk event time","code":""},{"path":"/reference/Make_Groups_STRATA.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to define risk groups with STRATA\nMake_Groups_STRATA Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group — Make_Groups_STRATA","title":"Utility function to define risk groups with STRATA\nMake_Groups_STRATA Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group — Make_Groups_STRATA","text":"Utility function define risk groups STRATA Make_Groups_STRATA Called update lists risk groups, Uses list event times row time/event information, Matrices store starting/stopping row indices group","code":""},{"path":"/reference/Make_Groups_STRATA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to define risk groups with STRATA\nMake_Groups_STRATA Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group — Make_Groups_STRATA","text":"","code":"Make_Groups_STRATA(   ntime,   df_m,   RiskFail,   RiskGroup,   tu,   nthreads,   debugging,   STRATA_vals )"},{"path":"/reference/Make_Groups_STRATA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to define risk groups with STRATA\nMake_Groups_STRATA Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group — Make_Groups_STRATA","text":"ntime number risk groups df_m event/time matrix RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group tu Event time vector nthreads number threads available debugging additional boolean verbosity testing STRATA_vals vector strata identifier values","code":""},{"path":"/reference/Make_Groups_STRATA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to define risk groups with STRATA\nMake_Groups_STRATA Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group — Make_Groups_STRATA","text":"Updates matrices place: Matrix event rows event time, vectors strings rows risk event time","code":""},{"path":"/reference/Make_Groups_STRATA_CR.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to define risk groups with STRATA and competing risks\nMake_Groups_STRATA_CR Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group , adds competing risks — Make_Groups_STRATA_CR","title":"Utility function to define risk groups with STRATA and competing risks\nMake_Groups_STRATA_CR Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group , adds competing risks — Make_Groups_STRATA_CR","text":"Utility function define risk groups STRATA competing risks Make_Groups_STRATA_CR Called update lists risk groups, Uses list event times row time/event information, Matrices store starting/stopping row indices group , adds competing risks","code":""},{"path":"/reference/Make_Groups_STRATA_CR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to define risk groups with STRATA and competing risks\nMake_Groups_STRATA_CR Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group , adds competing risks — Make_Groups_STRATA_CR","text":"","code":"Make_Groups_STRATA_CR(   ntime,   df_m,   RiskFail,   RiskGroup,   tu,   nthreads,   debugging,   STRATA_vals,   cens_weight,   cens_cutoff )"},{"path":"/reference/Make_Groups_STRATA_CR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to define risk groups with STRATA and competing risks\nMake_Groups_STRATA_CR Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group , adds competing risks — Make_Groups_STRATA_CR","text":"ntime number risk groups df_m event/time matrix RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group tu Event time vector nthreads number threads available debugging additional boolean verbosity testing STRATA_vals vector strata identifier values cens_weight vector censoring weights cens_cutoff double threshold adding competing risk risk group, implemented","code":""},{"path":"/reference/Make_Groups_STRATA_CR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to define risk groups with STRATA and competing risks\nMake_Groups_STRATA_CR Called to update lists of risk groups, Uses list of event times and row time/event information, Matrices store starting/stopping row indices for each group , adds competing risks — Make_Groups_STRATA_CR","text":"Updates matrices place: Matrix event rows event time, vectors strings rows risk event time","code":""},{"path":"/reference/Make_Risks.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate the risk and risk ratios\nMake_Risks Called to update risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks","title":"Utility function to calculate the risk and risk ratios\nMake_Risks Called to update risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks","text":"Utility function calculate risk risk ratios Make_Risks Called update risk matrices, Splits cases based model form, Uses lists term numbers types apply different derivative formulas","code":""},{"path":"/reference/Make_Risks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate the risk and risk ratios\nMake_Risks Called to update risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks","text":"","code":"Make_Risks(   modelform,   tform,   Term_n,   totalnum,   fir,   T0,   Td0,   Tdd0,   Te,   R,   Rd,   Rdd,   Dose,   nonDose,   TTerm,   nonDose_LIN,   nonDose_PLIN,   nonDose_LOGLIN,   RdR,   RddR,   nthreads,   debugging,   KeepConstant,   gmix_theta,   gmix_term )"},{"path":"/reference/Make_Risks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate the risk and risk ratios\nMake_Risks Called to update risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks","text":"modelform string model identifier tform subterm types Term_n Term numbers totalnum total number parameters fir st term number T0 Term value subterm Td0 Term subterm derivative matrix Tdd0 Term subterm second derivative matrix Te temporary term storage matrix R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix Dose term matrix nonDose term matrix TTerm Total term matrix nonDose_LIN Linear term matrix nonDose_PLIN Product linear term matrix nonDose_LOGLIN Loglinear term matrix RdR Risk first derivative ratio matrix RddR Risk second derivative ratio matrix nthreads number threads available debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters gmix_theta theta value geometric-mixture model gmix_term list 0/1 identify terms set Relative Risk (0) Excess Risk (1)","code":""},{"path":"/reference/Make_Risks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate the risk and risk ratios\nMake_Risks Called to update risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks","text":"Updates matrices place: Risk, Risk ratios","code":""},{"path":"/reference/Make_Risks_Basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate the risk and risk ratios for the basic model\nMake_Risks_Basic Called to update risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Basic","title":"Utility function to calculate the risk and risk ratios for the basic model\nMake_Risks_Basic Called to update risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Basic","text":"Utility function calculate risk risk ratios basic model Make_Risks_Basic Called update risk matrices, Splits cases based model form, Uses lists term numbers types apply different derivative formulas","code":""},{"path":"/reference/Make_Risks_Basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate the risk and risk ratios for the basic model\nMake_Risks_Basic Called to update risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Basic","text":"","code":"Make_Risks_Basic(   totalnum,   T0,   R,   Rd,   Rdd,   RdR,   nthreads,   debugging,   df0,   dfc,   KeepConstant )"},{"path":"/reference/Make_Risks_Basic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate the risk and risk ratios for the basic model\nMake_Risks_Basic Called to update risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Basic","text":"totalnum total number parameters T0 Term value subterm R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix RdR Risk first derivative ratio matrix nthreads number threads available debugging additional boolean verbosity testing df0 matrix covariate values dfc vector matching subterm number matrix column KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Make_Risks_Basic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate the risk and risk ratios for the basic model\nMake_Risks_Basic Called to update risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Basic","text":"Updates matrices place: Risk, Risk ratios","code":""},{"path":"/reference/Make_Risks_Single.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate the risk, but not derivatives\nMake_Risks_Single Called to update risk matrices, Splits into cases based on model form — Make_Risks_Single","title":"Utility function to calculate the risk, but not derivatives\nMake_Risks_Single Called to update risk matrices, Splits into cases based on model form — Make_Risks_Single","text":"Utility function calculate risk, derivatives Make_Risks_Single Called update risk matrices, Splits cases based model form","code":""},{"path":"/reference/Make_Risks_Single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate the risk, but not derivatives\nMake_Risks_Single Called to update risk matrices, Splits into cases based on model form — Make_Risks_Single","text":"","code":"Make_Risks_Single(   modelform,   tform,   Term_n,   totalnum,   fir,   T0,   Te,   R,   Dose,   nonDose,   TTerm,   nonDose_LIN,   nonDose_PLIN,   nonDose_LOGLIN,   nthreads,   debugging,   KeepConstant,   gmix_theta,   gmix_term )"},{"path":"/reference/Make_Risks_Single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate the risk, but not derivatives\nMake_Risks_Single Called to update risk matrices, Splits into cases based on model form — Make_Risks_Single","text":"modelform string model identifier tform subterm types Term_n Term numbers totalnum total number parameters fir st term number T0 Term value subterm Te temporary term storage matrix R risk vector Dose term matrix nonDose term matrix TTerm Total term matrix nonDose_LIN Linear term matrix nonDose_PLIN Product linear term matrix nonDose_LOGLIN Loglinear term matrix nthreads number threads available debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters gmix_theta theta value geometric-mixture model gmix_term list 0/1 identify terms set Relative Risk (0) Excess Risk (1)","code":""},{"path":"/reference/Make_Risks_Single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate the risk, but not derivatives\nMake_Risks_Single Called to update risk matrices, Splits into cases based on model form — Make_Risks_Single","text":"Updates matrices place: Risk, Risk ratios","code":""},{"path":"/reference/Make_Risks_Weighted.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate the risk and risk ratios with a weighting applied\nMake_Risks_Weighted Called to update weighted risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Weighted","title":"Utility function to calculate the risk and risk ratios with a weighting applied\nMake_Risks_Weighted Called to update weighted risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Weighted","text":"Utility function calculate risk risk ratios weighting applied Make_Risks_Weighted Called update weighted risk matrices, Splits cases based model form, Uses lists term numbers types apply different derivative formulas","code":""},{"path":"/reference/Make_Risks_Weighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate the risk and risk ratios with a weighting applied\nMake_Risks_Weighted Called to update weighted risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Weighted","text":"","code":"Make_Risks_Weighted(   modelform,   tform,   Term_n,   totalnum,   fir,   s_weights,   T0,   Td0,   Tdd0,   Te,   R,   Rd,   Rdd,   Dose,   nonDose,   TTerm,   nonDose_LIN,   nonDose_PLIN,   nonDose_LOGLIN,   RdR,   RddR,   nthreads,   debugging,   KeepConstant,   gmix_theta,   gmix_term )"},{"path":"/reference/Make_Risks_Weighted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate the risk and risk ratios with a weighting applied\nMake_Risks_Weighted Called to update weighted risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Weighted","text":"modelform string model identifier tform subterm types Term_n Term numbers totalnum total number parameters fir st term number s_weights vector weights every row T0 Term value subterm Td0 Term subterm derivative matrix Tdd0 Term subterm second derivative matrix Te temporary term storage matrix R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix Dose term matrix nonDose term matrix TTerm Total term matrix nonDose_LIN Linear term matrix nonDose_PLIN Product linear term matrix nonDose_LOGLIN Loglinear term matrix RdR Risk first derivative ratio matrix RddR Risk second derivative ratio matrix nthreads number threads available debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters gmix_theta theta value geometric-mixture model gmix_term list 0/1 identify terms set Relative Risk (0) Excess Risk (1)","code":""},{"path":"/reference/Make_Risks_Weighted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate the risk and risk ratios with a weighting applied\nMake_Risks_Weighted Called to update weighted risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Weighted","text":"Updates matrices place: Risk, Risk ratios","code":""},{"path":"/reference/Make_Risks_Weighted_Single.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate the risk with a weighting applied and no derivatives calculated\nMake_Risks_Weighted_Single Called to update weighted risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Weighted_Single","title":"Utility function to calculate the risk with a weighting applied and no derivatives calculated\nMake_Risks_Weighted_Single Called to update weighted risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Weighted_Single","text":"Utility function calculate risk weighting applied derivatives calculated Make_Risks_Weighted_Single Called update weighted risk matrices, Splits cases based model form, Uses lists term numbers types apply different derivative formulas","code":""},{"path":"/reference/Make_Risks_Weighted_Single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate the risk with a weighting applied and no derivatives calculated\nMake_Risks_Weighted_Single Called to update weighted risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Weighted_Single","text":"","code":"Make_Risks_Weighted_Single(   modelform,   tform,   Term_n,   totalnum,   fir,   s_weights,   T0,   Te,   R,   Dose,   nonDose,   TTerm,   nonDose_LIN,   nonDose_PLIN,   nonDose_LOGLIN,   nthreads,   debugging,   KeepConstant,   gmix_theta,   gmix_term )"},{"path":"/reference/Make_Risks_Weighted_Single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate the risk with a weighting applied and no derivatives calculated\nMake_Risks_Weighted_Single Called to update weighted risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Weighted_Single","text":"modelform string model identifier tform subterm types Term_n Term numbers totalnum total number parameters fir st term number s_weights vector weights every row T0 Term value subterm Te temporary term storage matrix R risk vector Dose term matrix nonDose term matrix TTerm Total term matrix nonDose_LIN Linear term matrix nonDose_PLIN Product linear term matrix nonDose_LOGLIN Loglinear term matrix nthreads number threads available debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters gmix_theta theta value geometric-mixture model gmix_term list 0/1 identify terms set Relative Risk (0) Excess Risk (1)","code":""},{"path":"/reference/Make_Risks_Weighted_Single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate the risk with a weighting applied and no derivatives calculated\nMake_Risks_Weighted_Single Called to update weighted risk matrices, Splits into cases based on model form, Uses lists of term numbers and types to apply different derivative formulas — Make_Risks_Weighted_Single","text":"Updates matrices place: Risk, Risk ratios","code":""},{"path":"/reference/Make_subterms.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate the term and subterm values\nMake_subterms Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms","title":"Utility function to calculate the term and subterm values\nMake_subterms Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms","text":"Utility function calculate term subterm values Make_subterms Called update term matrices, Uses lists term numbers types apply formulas","code":""},{"path":"/reference/Make_subterms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate the term and subterm values\nMake_subterms Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms","text":"","code":"Make_subterms(   totalnum,   Term_n,   tform,   dfc,   fir,   T0,   Td0,   Tdd0,   Dose,   nonDose,   TTerm,   nonDose_LIN,   nonDose_PLIN,   nonDose_LOGLIN,   beta_0,   df0,   dint,   dslp,   nthreads,   debugging,   KeepConstant )"},{"path":"/reference/Make_subterms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate the term and subterm values\nMake_subterms Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms","text":"totalnum total number parameters Term_n Term numbers tform subterm types dfc vector matching subterm number matrix column fir st term number T0 Term value subterm Td0 Term subterm derivative matrix Tdd0 Term subterm second derivative matrix Dose term matrix nonDose term matrix TTerm Total term matrix nonDose_LIN Linear term matrix nonDose_PLIN Product linear term matrix nonDose_LOGLIN Loglinear term matrix beta_0 parameter estimates df0 matrix covariate values dint value used threshold derivative finite step dslp value used slope derivative finite step nthreads number threads available debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Make_subterms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate the term and subterm values\nMake_subterms Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms","text":"Updates matrices place: subterm matrices, Term matrices","code":""},{"path":"/reference/Make_subterms_Basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate the term and subterm values with the basic model\nMake_subterms_Basic Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms_Basic","title":"Utility function to calculate the term and subterm values with the basic model\nMake_subterms_Basic Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms_Basic","text":"Utility function calculate term subterm values basic model Make_subterms_Basic Called update term matrices, Uses lists term numbers types apply formulas","code":""},{"path":"/reference/Make_subterms_Basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate the term and subterm values with the basic model\nMake_subterms_Basic Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms_Basic","text":"","code":"Make_subterms_Basic(totalnum, dfc, T0, beta_0, df0, nthreads, debugging)"},{"path":"/reference/Make_subterms_Basic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate the term and subterm values with the basic model\nMake_subterms_Basic Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms_Basic","text":"totalnum total number parameters dfc vector matching subterm number matrix column T0 Term value subterm beta_0 parameter estimates df0 matrix covariate values nthreads number threads available debugging additional boolean verbosity testing","code":""},{"path":"/reference/Make_subterms_Basic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate the term and subterm values with the basic model\nMake_subterms_Basic Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms_Basic","text":"Updates matrices place: subterm matrices, Term matrices","code":""},{"path":"/reference/Make_subterms_Single.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate the term and subterm values, but not derivatives\nMake_subterms_Single Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms_Single","title":"Utility function to calculate the term and subterm values, but not derivatives\nMake_subterms_Single Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms_Single","text":"Utility function calculate term subterm values, derivatives Make_subterms_Single Called update term matrices, Uses lists term numbers types apply formulas","code":""},{"path":"/reference/Make_subterms_Single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate the term and subterm values, but not derivatives\nMake_subterms_Single Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms_Single","text":"","code":"Make_subterms_Single(   totalnum,   Term_n,   tform,   dfc,   fir,   T0,   Dose,   nonDose,   TTerm,   nonDose_LIN,   nonDose_PLIN,   nonDose_LOGLIN,   beta_0,   df0,   nthreads,   debugging,   KeepConstant )"},{"path":"/reference/Make_subterms_Single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate the term and subterm values, but not derivatives\nMake_subterms_Single Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms_Single","text":"totalnum total number parameters Term_n Term numbers tform subterm types dfc vector matching subterm number matrix column fir st term number T0 Term value subterm Dose term matrix nonDose term matrix TTerm Total term matrix nonDose_LIN Linear term matrix nonDose_PLIN Product linear term matrix nonDose_LOGLIN Loglinear term matrix beta_0 parameter estimates df0 matrix covariate values nthreads number threads available debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Make_subterms_Single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate the term and subterm values, but not derivatives\nMake_subterms_Single Called to update term matrices, Uses lists of term numbers and types to apply formulas — Make_subterms_Single","text":"Updates matrices place: subterm matrices, Term matrices","code":""},{"path":"/reference/PLOT_SURV.html","id":null,"dir":"Reference","previous_headings":"","what":"Primary Cox PH baseline hazard function\nPLOT_SURV Performs the calls to calculation functions, Uses calculated risks and risk groups to approximate the baseline, With verbose option prints out time stamps and intermediate sums of terms and derivatives — PLOT_SURV","title":"Primary Cox PH baseline hazard function\nPLOT_SURV Performs the calls to calculation functions, Uses calculated risks and risk groups to approximate the baseline, With verbose option prints out time stamps and intermediate sums of terms and derivatives — PLOT_SURV","text":"Primary Cox PH baseline hazard function PLOT_SURV Performs calls calculation functions, Uses calculated risks risk groups approximate baseline, verbose option prints time stamps intermediate sums terms derivatives","code":""},{"path":"/reference/PLOT_SURV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primary Cox PH baseline hazard function\nPLOT_SURV Performs the calls to calculation functions, Uses calculated risks and risk groups to approximate the baseline, With verbose option prints out time stamps and intermediate sums of terms and derivatives — PLOT_SURV","text":"","code":"PLOT_SURV(reqrdnum, R, Rd, a_er, df_groups, tu, verbose, debugging, nthreads)"},{"path":"/reference/PLOT_SURV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Primary Cox PH baseline hazard function\nPLOT_SURV Performs the calls to calculation functions, Uses calculated risks and risk groups to approximate the baseline, With verbose option prints out time stamps and intermediate sums of terms and derivatives — PLOT_SURV","text":"reqrdnum total number free parameters R risk vector Rd Risk first derivative matrix a_er Optimal value standard error df_groups matrix time event information tu Event time vector verbose boolean additional printing debugging additional boolean verbosity testing nthreads number threads available","code":""},{"path":"/reference/PLOT_SURV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Primary Cox PH baseline hazard function\nPLOT_SURV Performs the calls to calculation functions, Uses calculated risks and risk groups to approximate the baseline, With verbose option prints out time stamps and intermediate sums of terms and derivatives — PLOT_SURV","text":"List results: baseline hazard, risk row","code":""},{"path":"/reference/PlotCox_Schoenfeld_Residual.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Schoenfeld residuals for a Cox Proportional Hazards regression and plots\nRunCox_Schoenfeld_Residual uses user provided data, time/event columns, vectors specifying the model, and options to calculate the residuals — PlotCox_Schoenfeld_Residual","title":"Calculates Schoenfeld residuals for a Cox Proportional Hazards regression and plots\nRunCox_Schoenfeld_Residual uses user provided data, time/event columns, vectors specifying the model, and options to calculate the residuals — PlotCox_Schoenfeld_Residual","text":"Calculates Schoenfeld residuals Cox Proportional Hazards regression plots RunCox_Schoenfeld_Residual uses user provided data, time/event columns, vectors specifying model, options calculate residuals","code":""},{"path":"/reference/PlotCox_Schoenfeld_Residual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Schoenfeld residuals for a Cox Proportional Hazards regression and plots\nRunCox_Schoenfeld_Residual uses user provided data, time/event columns, vectors specifying the model, and options to calculate the residuals — PlotCox_Schoenfeld_Residual","text":"","code":"PlotCox_Schoenfeld_Residual(   df,   time1,   time2,   event0,   names,   Term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   der_iden,   control,   age_unit,   Plot_Name,   model_control = list() )"},{"path":"/reference/PlotCox_Schoenfeld_Residual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Schoenfeld residuals for a Cox Proportional Hazards regression and plots\nRunCox_Schoenfeld_Residual uses user provided data, time/event columns, vectors specifying the model, and options to calculate the residuals — PlotCox_Schoenfeld_Residual","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter control list parameters controlling convergence age_unit age unit Plot_Name plot identifier model_control controls alternative model options used","code":""},{"path":"/reference/PlotCox_Schoenfeld_Residual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Schoenfeld residuals for a Cox Proportional Hazards regression and plots\nRunCox_Schoenfeld_Residual uses user provided data, time/event columns, vectors specifying the model, and options to calculate the residuals — PlotCox_Schoenfeld_Residual","text":"saves plots current directory returns string passed","code":""},{"path":"/reference/Plot_Omnibus.html","id":null,"dir":"Reference","previous_headings":"","what":"Primary plotting function.\nPlot_Omnibus Performs the calls to calculation functions — Plot_Omnibus","title":"Primary plotting function.\nPlot_Omnibus Performs the calls to calculation functions — Plot_Omnibus","text":"Primary plotting function. Plot_Omnibus Performs calls calculation functions","code":""},{"path":"/reference/Plot_Omnibus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primary plotting function.\nPlot_Omnibus Performs the calls to calculation functions — Plot_Omnibus","text":"","code":"Plot_Omnibus(   Term_n,   tform,   a_n,   x_all,   dfc,   fir,   der_iden,   modelform,   abs_max,   dose_abs_max,   df_groups,   tu,   verbose,   debugging,   KeepConstant,   term_tot,   ties_method,   nthreads,   STRATA_vals,   cens_weight,   cens_thres,   uniq_v,   strata_bool,   basic_bool,   CR_bool,   Surv_bool,   Risk_bool,   Schoenfeld_bool,   Risk_Sub_bool,   gmix_theta,   gmix_term )"},{"path":"/reference/Plot_Omnibus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Primary plotting function.\nPlot_Omnibus Performs the calls to calculation functions — Plot_Omnibus","text":"Term_n Term numbers tform subterm types a_n starting values x_all covariate matrix dfc vector matching subterm number matrix column fir st term number der_iden subterm number derivative tests modelform string model identifier abs_max Maximum allowed parameter change dose_abs_max Maximum allowed threshold parameter change df_groups matrix time event information tu Event time vector verbose boolean additional printing debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters term_tot total number terms ties_method Ties method nthreads number threads available STRATA_vals vector strata identifier values cens_weight vector censoring weights cens_thres threshold add competing event risk group uniq_v number unique covariate values strata_bool boolean stratification basic_bool boolean multiplicative log-linear model CR_bool boolean competing risks Surv_bool boolean competing risks Risk_bool boolean competing risks Schoenfeld_bool boolean competing risks Risk_Sub_bool boolean competing risks gmix_theta theta value geometric-mixture model gmix_term list 0/1 identify terms set Relative Risk (0) Excess Risk (1)","code":""},{"path":"/reference/Plot_Omnibus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Primary plotting function.\nPlot_Omnibus Performs the calls to calculation functions — Plot_Omnibus","text":"List final results: Log-likelihood optimum, first derivative log-likelihood, second derivative matrix, parameter list, standard deviation estimate, AIC, model information","code":""},{"path":"/reference/Plot_Omnibus_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface between R code and the plotting omnibus function\nPlot_Omnibus_transition Called directly from R, Defines the control variables and calls the plotting functions — Plot_Omnibus_transition","title":"Interface between R code and the plotting omnibus function\nPlot_Omnibus_transition Called directly from R, Defines the control variables and calls the plotting functions — Plot_Omnibus_transition","text":"Interface R code plotting omnibus function Plot_Omnibus_transition Called directly R, Defines control variables calls plotting functions","code":""},{"path":"/reference/Plot_Omnibus_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface between R code and the plotting omnibus function\nPlot_Omnibus_transition Called directly from R, Defines the control variables and calls the plotting functions — Plot_Omnibus_transition","text":"","code":"Plot_Omnibus_transition(   Term_n,   tform,   a_n,   dfc,   x_all,   fir,   der_iden,   modelform,   Control,   df_groups,   tu,   KeepConstant,   term_tot,   STRATA_vals,   cens_vec,   model_control )"},{"path":"/reference/Plot_Omnibus_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface between R code and the plotting omnibus function\nPlot_Omnibus_transition Called directly from R, Defines the control variables and calls the plotting functions — Plot_Omnibus_transition","text":"Term_n Term numbers tform subterm types a_n starting values dfc vector matching subterm number matrix column x_all covariate matrix fir st term number der_iden subterm number derivative tests modelform string model identifier Control control list df_groups matrix time event information tu Event time vector KeepConstant binary vector identify constant parameters term_tot total number terms STRATA_vals vector strata identifier values cens_vec censoring weight list model_control controls alternative model options used","code":""},{"path":"/reference/Plot_Omnibus_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface between R code and the plotting omnibus function\nPlot_Omnibus_transition Called directly from R, Defines the control variables and calls the plotting functions — Plot_Omnibus_transition","text":"LogLik_Cox_PH output : Log-likelihood optimum, first derivative log-likelihood, second derivative matrix, parameter list, standard deviation estimate, AIC, model information","code":""},{"path":"/reference/Pois_Dev_LL_Calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to perform calculation of Log-Likelihood and Deviation for Poisson Omnibus\nPois_Dev_LL_Calc Called to perform repeated term and risk calculations — Pois_Dev_LL_Calc","title":"Utility function to perform calculation of Log-Likelihood and Deviation for Poisson Omnibus\nPois_Dev_LL_Calc Called to perform repeated term and risk calculations — Pois_Dev_LL_Calc","text":"Utility function perform calculation Log-Likelihood Deviation Poisson Omnibus Pois_Dev_LL_Calc Called perform repeated term risk calculations","code":""},{"path":"/reference/Pois_Dev_LL_Calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to perform calculation of Log-Likelihood and Deviation for Poisson Omnibus\nPois_Dev_LL_Calc Called to perform repeated term and risk calculations — Pois_Dev_LL_Calc","text":"","code":"Pois_Dev_LL_Calc(   reqrdnum,   totalnum,   fir,   R,   Rd,   Rdd,   beta_0,   RdR,   RddR,   Ll,   Lld,   Lldd,   PyrC,   dev_temp,   nthreads,   debugging,   KeepConstant,   verbose,   single_bool,   start,   iter_stop,   dev )"},{"path":"/reference/Pois_Dev_LL_Calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to perform calculation of Log-Likelihood and Deviation for Poisson Omnibus\nPois_Dev_LL_Calc Called to perform repeated term and risk calculations — Pois_Dev_LL_Calc","text":"reqrdnum total number free parameters totalnum total number parameters fir st term number R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix beta_0 parameter estimates RdR Risk first derivative ratio matrix RddR Risk second derivative ratio matrix Ll Log-likelihood vector Lld Log-likelihood first derivative matrix Lldd Log-likelihood second derivative matrix PyrC matrix person-years event counts dev_temp temporary storage deviation calculation nthreads number threads available debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters verbose boolean additional printing single_bool boolean single calculation without derivatives start starting time regression iter_stop binary value used tell function continue iteration dev model deviation","code":""},{"path":"/reference/Pois_Dev_LL_Calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to perform calculation of Log-Likelihood and Deviation for Poisson Omnibus\nPois_Dev_LL_Calc Called to perform repeated term and risk calculations — Pois_Dev_LL_Calc","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Pois_Term_Risk_Calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to perform calculation of terms and risks for Poisson Omnibus\nPois_Term_Risk_Calc Called to perform repeated term and risk calculations — Pois_Term_Risk_Calc","title":"Utility function to perform calculation of terms and risks for Poisson Omnibus\nPois_Term_Risk_Calc Called to perform repeated term and risk calculations — Pois_Term_Risk_Calc","text":"Utility function perform calculation terms risks Poisson Omnibus Pois_Term_Risk_Calc Called perform repeated term risk calculations","code":""},{"path":"/reference/Pois_Term_Risk_Calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to perform calculation of terms and risks for Poisson Omnibus\nPois_Term_Risk_Calc Called to perform repeated term and risk calculations — Pois_Term_Risk_Calc","text":"","code":"Pois_Term_Risk_Calc(   modelform,   tform,   Term_n,   totalnum,   fir,   dfc,   term_tot,   T0,   Td0,   Tdd0,   Te,   R,   Rd,   Rdd,   Dose,   nonDose,   beta_0,   df0,   dint,   dslp,   TTerm,   nonDose_LIN,   nonDose_PLIN,   nonDose_LOGLIN,   RdR,   RddR,   s_weights,   nthreads,   debugging,   KeepConstant,   verbose,   strata_bool,   single_bool,   start,   gmix_theta,   gmix_term )"},{"path":"/reference/Pois_Term_Risk_Calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to perform calculation of terms and risks for Poisson Omnibus\nPois_Term_Risk_Calc Called to perform repeated term and risk calculations — Pois_Term_Risk_Calc","text":"modelform string model identifier tform subterm types Term_n Term numbers totalnum total number parameters fir st term number dfc vector matching subterm number matrix column term_tot total number terms T0 Term value subterm Td0 Term subterm derivative matrix Tdd0 Term subterm second derivative matrix Te temporary term storage matrix R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix Dose term matrix nonDose term matrix beta_0 parameter estimates df0 matrix covariate values dint value used threshold derivative finite step dslp value used slope derivative finite step TTerm Total term matrix nonDose_LIN Linear term matrix nonDose_PLIN Product linear term matrix nonDose_LOGLIN Loglinear term matrix RdR Risk first derivative ratio matrix RddR Risk second derivative ratio matrix s_weights vector weights every row nthreads number threads available debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters verbose boolean additional printing strata_bool boolean stratification single_bool boolean single calculation without derivatives start starting time regression gmix_theta theta value geometric-mixture model gmix_term list 0/1 identify terms set Relative Risk (0) Excess Risk (1)","code":""},{"path":"/reference/Pois_Term_Risk_Calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to perform calculation of terms and risks for Poisson Omnibus\nPois_Term_Risk_Calc Called to perform repeated term and risk calculations — Pois_Term_Risk_Calc","text":"Updates matrices place: risk storage matrices","code":""},{"path":"/reference/Poisson_LogLik.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate poisson log-likelihood and derivatives\nPoisson_LogLik Called to update log-likelihoods, Uses list risk matrices and person-years, Sums the log-likelihood contribution from each row — Poisson_LogLik","title":"Utility function to calculate poisson log-likelihood and derivatives\nPoisson_LogLik Called to update log-likelihoods, Uses list risk matrices and person-years, Sums the log-likelihood contribution from each row — Poisson_LogLik","text":"Utility function calculate poisson log-likelihood derivatives Poisson_LogLik Called update log-likelihoods, Uses list risk matrices person-years, Sums log-likelihood contribution row","code":""},{"path":"/reference/Poisson_LogLik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate poisson log-likelihood and derivatives\nPoisson_LogLik Called to update log-likelihoods, Uses list risk matrices and person-years, Sums the log-likelihood contribution from each row — Poisson_LogLik","text":"","code":"Poisson_LogLik(   nthreads,   totalnum,   PyrC,   R,   Rd,   Rdd,   RdR,   RddR,   Ll,   Lld,   Lldd,   debugging,   KeepConstant )"},{"path":"/reference/Poisson_LogLik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate poisson log-likelihood and derivatives\nPoisson_LogLik Called to update log-likelihoods, Uses list risk matrices and person-years, Sums the log-likelihood contribution from each row — Poisson_LogLik","text":"nthreads number threads available totalnum total number parameters PyrC matrix person-years event counts R risk vector Rd Risk first derivative matrix Rdd Risk second derivative matrix RdR Risk first derivative ratio matrix RddR Risk second derivative ratio matrix Ll Log-likelihood vector Lld Log-likelihood first derivative matrix Lldd Log-likelihood second derivative matrix debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters","code":""},{"path":"/reference/Poisson_LogLik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate poisson log-likelihood and derivatives\nPoisson_LogLik Called to update log-likelihoods, Uses list risk matrices and person-years, Sums the log-likelihood contribution from each row — Poisson_LogLik","text":"Updates matrices place: Log-likelihood vectors/matrix","code":""},{"path":"/reference/Poisson_LogLik_Single.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to calculate poisson log-likelihood\nPoisson_LogLik_Single Called to update log-likelihoods, Uses list risk matrices and person-years, Sums the log-likelihood contribution from each row — Poisson_LogLik_Single","title":"Utility function to calculate poisson log-likelihood\nPoisson_LogLik_Single Called to update log-likelihoods, Uses list risk matrices and person-years, Sums the log-likelihood contribution from each row — Poisson_LogLik_Single","text":"Utility function calculate poisson log-likelihood Poisson_LogLik_Single Called update log-likelihoods, Uses list risk matrices person-years, Sums log-likelihood contribution row","code":""},{"path":"/reference/Poisson_LogLik_Single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to calculate poisson log-likelihood\nPoisson_LogLik_Single Called to update log-likelihoods, Uses list risk matrices and person-years, Sums the log-likelihood contribution from each row — Poisson_LogLik_Single","text":"","code":"Poisson_LogLik_Single(nthreads, totalnum, PyrC, R, Ll, debugging)"},{"path":"/reference/Poisson_LogLik_Single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to calculate poisson log-likelihood\nPoisson_LogLik_Single Called to update log-likelihoods, Uses list risk matrices and person-years, Sums the log-likelihood contribution from each row — Poisson_LogLik_Single","text":"nthreads number threads available totalnum total number parameters PyrC matrix person-years event counts R risk vector Ll Log-likelihood vector debugging additional boolean verbosity testing","code":""},{"path":"/reference/Poisson_LogLik_Single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to calculate poisson log-likelihood\nPoisson_LogLik_Single Called to update log-likelihoods, Uses list risk matrices and person-years, Sums the log-likelihood contribution from each row — Poisson_LogLik_Single","text":"Updates matrices place: Log-likelihood vectors/matrix","code":""},{"path":"/reference/Replace_Missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically assigns missing values in listed columns\nReplace_Missing checks each column and fills in NA values — Replace_Missing","title":"Automatically assigns missing values in listed columns\nReplace_Missing checks each column and fills in NA values — Replace_Missing","text":"Automatically assigns missing values listed columns Replace_Missing checks column fills NA values","code":""},{"path":"/reference/Replace_Missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically assigns missing values in listed columns\nReplace_Missing checks each column and fills in NA values — Replace_Missing","text":"","code":"Replace_Missing(df, name_list, MSV, verbose = FALSE)"},{"path":"/reference/Replace_Missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically assigns missing values in listed columns\nReplace_Missing checks each column and fills in NA values — Replace_Missing","text":"df data.table containing columns interest name_list vector string column names check MSV value replace na , used every column used verbose boolean control additional information printed console","code":""},{"path":"/reference/Replace_Missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically assigns missing values in listed columns\nReplace_Missing checks each column and fills in NA values — Replace_Missing","text":"returns filled datatable","code":""},{"path":"/reference/Replace_Missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically assigns missing values in listed columns\nReplace_Missing checks each column and fills in NA values — Replace_Missing","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  NA,  47,  36,  NA,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0)) df <- Replace_Missing(df, c(\"Starting_Age\",\"Ending_Age\"), 70)"},{"path":"/reference/RunCoxNull.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Cox Proportional Hazards regression with the null model\nRunCoxRegression uses user provided data and time/event columns\nto calculate the log-likelihood with constant hazard ratio — RunCoxNull","title":"Performs basic Cox Proportional Hazards regression with the null model\nRunCoxRegression uses user provided data and time/event columns\nto calculate the log-likelihood with constant hazard ratio — RunCoxNull","text":"Performs basic Cox Proportional Hazards regression null model RunCoxRegression uses user provided data time/event columns calculate log-likelihood constant hazard ratio","code":""},{"path":"/reference/RunCoxNull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Cox Proportional Hazards regression with the null model\nRunCoxRegression uses user provided data and time/event columns\nto calculate the log-likelihood with constant hazard ratio — RunCoxNull","text":"","code":"RunCoxNull(df, time1, time2, event0, control)"},{"path":"/reference/RunCoxNull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Cox Proportional Hazards regression with the null model\nRunCoxRegression uses user provided data and time/event columns\nto calculate the log-likelihood with constant hazard ratio — RunCoxNull","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status control list parameters controlling convergence","code":""},{"path":"/reference/RunCoxNull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Cox Proportional Hazards regression with the null model\nRunCoxRegression uses user provided data and time/event columns\nto calculate the log-likelihood with constant hazard ratio — RunCoxNull","text":"returns list final results","code":""},{"path":"/reference/RunCoxNull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Cox Proportional Hazards regression with the null model\nRunCoxRegression uses user provided data and time/event columns\nto calculate the log-likelihood with constant hazard ratio — RunCoxNull","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\"  control <- list(\"Ncores\"=2,'verbose'=FALSE, 'ties'='breslow','double_step'=1)  e <- RunCoxNull(df, time1, time2, event, control)"},{"path":"/reference/RunCoxPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs Cox Proportional Hazard model plots\nRunCoxPlots uses user provided data, time/event columns,\nvectors specifying the model, and options to choose and save plots — RunCoxPlots","title":"Performs Cox Proportional Hazard model plots\nRunCoxPlots uses user provided data, time/event columns,\nvectors specifying the model, and options to choose and save plots — RunCoxPlots","text":"Performs Cox Proportional Hazard model plots RunCoxPlots uses user provided data, time/event columns, vectors specifying model, options choose save plots","code":""},{"path":"/reference/RunCoxPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs Cox Proportional Hazard model plots\nRunCoxPlots uses user provided data, time/event columns,\nvectors specifying the model, and options to choose and save plots — RunCoxPlots","text":"","code":"RunCoxPlots(   df,   time1,   time2,   event0,   names,   Term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   control,   plot_options,   model_control = list() )"},{"path":"/reference/RunCoxPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs Cox Proportional Hazard model plots\nRunCoxPlots uses user provided data, time/event columns,\nvectors specifying the model, and options to choose and save plots — RunCoxPlots","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters control list parameters controlling convergence plot_options list parameters controlling plot options model_control controls alternative model options used","code":""},{"path":"/reference/RunCoxPlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs Cox Proportional Hazard model plots\nRunCoxPlots uses user provided data, time/event columns,\nvectors specifying the model, and options to choose and save plots — RunCoxPlots","text":"saves plots current directory returns string","code":""},{"path":"/reference/RunCoxPlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs Cox Proportional Hazard model plots\nRunCoxPlots uses user provided data, time/event columns,\nvectors specifying the model, and options to choose and save plots — RunCoxPlots","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(-0.1, 0.5, 1.1, -0.3)  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = -1,'halfmax' = 5,    'epsilon' = 1e-3,'dbeta_max' = 0.5,'deriv_epsilon' = 1e-3,    'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,    'verbose'=FALSE, 'ties'='breslow','double_step'=1) #setting maxiter below 0 forces the function to calculate the score # and return plot_options=list(\"type\"=c(\"SURV\",paste(tempfile(),\"run\",sep=\"\")), \"studyID\"=\"UserID\",                   'verbose'=FALSE)  RunCoxPlots(df, time1, time2, event, names, Term_n, tform, keep_constant,             a_n, modelform, fir, control, plot_options) #> [1] \"Passed\""},{"path":"/reference/RunCoxRegression.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Cox Proportional Hazards regression without special options\nRunCoxRegression uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence\nand starting position — RunCoxRegression","title":"Performs basic Cox Proportional Hazards regression without special options\nRunCoxRegression uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence\nand starting position — RunCoxRegression","text":"Performs basic Cox Proportional Hazards regression without special options RunCoxRegression uses user provided data, time/event columns, vectors specifying model, options control convergence starting position","code":""},{"path":"/reference/RunCoxRegression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Cox Proportional Hazards regression without special options\nRunCoxRegression uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence\nand starting position — RunCoxRegression","text":"","code":"RunCoxRegression(   df,   time1,   time2,   event0,   names,   Term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   der_iden,   control )"},{"path":"/reference/RunCoxRegression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Cox Proportional Hazards regression without special options\nRunCoxRegression uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence\nand starting position — RunCoxRegression","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter control list parameters controlling convergence","code":""},{"path":"/reference/RunCoxRegression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Cox Proportional Hazards regression without special options\nRunCoxRegression uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence\nand starting position — RunCoxRegression","text":"returns list final results","code":""},{"path":"/reference/RunCoxRegression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Cox Proportional Hazards regression without special options\nRunCoxRegression uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence\nand starting position — RunCoxRegression","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(0.1, 0.1, 0.1, 0.1)  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,    'epsilon' = 1e-3,'dbeta_max' = 0.5, 'deriv_epsilon' = 1e-3,    'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,    'verbose'=FALSE, 'ties'='breslow','double_step'=1)  e <- RunCoxRegression(df, time1, time2, event, names, Term_n, tform,                      keep_constant, a_n, modelform, fir, der_iden, control)"},{"path":"/reference/RunCoxRegression_Basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Cox Proportional Hazards regression with a multiplicative log-linear model\nRunCoxRegression_Basic uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunCoxRegression_Basic","title":"Performs basic Cox Proportional Hazards regression with a multiplicative log-linear model\nRunCoxRegression_Basic uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunCoxRegression_Basic","text":"Performs basic Cox Proportional Hazards regression multiplicative log-linear model RunCoxRegression_Basic uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions","code":""},{"path":"/reference/RunCoxRegression_Basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Cox Proportional Hazards regression with a multiplicative log-linear model\nRunCoxRegression_Basic uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunCoxRegression_Basic","text":"","code":"RunCoxRegression_Basic(   df,   time1,   time2,   event0,   names,   keep_constant,   a_n,   der_iden,   control )"},{"path":"/reference/RunCoxRegression_Basic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Cox Proportional Hazards regression with a multiplicative log-linear model\nRunCoxRegression_Basic uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunCoxRegression_Basic","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters der_iden number subterm test derivative , used testing runs single varying parameter control list parameters controlling convergence","code":""},{"path":"/reference/RunCoxRegression_Basic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Cox Proportional Hazards regression with a multiplicative log-linear model\nRunCoxRegression_Basic uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunCoxRegression_Basic","text":"returns list final results","code":""},{"path":"/reference/RunCoxRegression_Basic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Cox Proportional Hazards regression with a multiplicative log-linear model\nRunCoxRegression_Basic uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunCoxRegression_Basic","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,    'epsilon' = 1e-3,'dbeta_max' = 0.5,'deriv_epsilon' = 1e-3, 'abs_max'=1.0,    'change_all'=TRUE,'dose_abs_max'=100.0,'verbose'=FALSE,    'ties'='breslow','double_step'=1)  e <- RunCoxRegression_Basic(df, time1, time2, event, names, keep_constant,                             a_n, der_iden, control)"},{"path":"/reference/RunCoxRegression_CR.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Cox Proportional Hazards regression with competing risks\nRunCoxRegression_CR uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence, starting positions, and censoring adjustment — RunCoxRegression_CR","title":"Performs basic Cox Proportional Hazards regression with competing risks\nRunCoxRegression_CR uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence, starting positions, and censoring adjustment — RunCoxRegression_CR","text":"Performs basic Cox Proportional Hazards regression competing risks RunCoxRegression_CR uses user provided data, time/event columns, vectors specifying model, options control convergence, starting positions, censoring adjustment","code":""},{"path":"/reference/RunCoxRegression_CR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Cox Proportional Hazards regression with competing risks\nRunCoxRegression_CR uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence, starting positions, and censoring adjustment — RunCoxRegression_CR","text":"","code":"RunCoxRegression_CR(   df,   time1,   time2,   event0,   names,   Term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   der_iden,   control,   cens_weight )"},{"path":"/reference/RunCoxRegression_CR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Cox Proportional Hazards regression with competing risks\nRunCoxRegression_CR uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence, starting positions, and censoring adjustment — RunCoxRegression_CR","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter control list parameters controlling convergence cens_weight list weights censoring rate","code":""},{"path":"/reference/RunCoxRegression_CR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Cox Proportional Hazards regression with competing risks\nRunCoxRegression_CR uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence, starting positions, and censoring adjustment — RunCoxRegression_CR","text":"returns list final results","code":""},{"path":"/reference/RunCoxRegression_CR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Cox Proportional Hazards regression with competing risks\nRunCoxRegression_CR uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence, starting positions, and censoring adjustment — RunCoxRegression_CR","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   2,   1,   2,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(0.1, 0.1, 0.1, 0.1)  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'dbeta_max' = 0.5,'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1) #weights the probability that a row would continue to extend without censoring, #    for risk group calculation  cens_weight <- c(0.83, 0.37, 0.26, 0.34, 0.55, 0.23, 0.27) #censoring weight is generated by the survival library finegray function, or by hand. #The ratio of weight at event end point to weight at row endpoint is used. e <- RunCoxRegression_CR(df, time1, time2, event, names, Term_n, tform,      keep_constant, a_n, modelform, fir, der_iden, control, cens_weight)"},{"path":"/reference/RunCoxRegression_Guesses_CPP.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Cox Proportional Hazards regression, Allows for multiple starting guesses on c++ side\nRunCoxRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions. Has additional options to starting with several initial guesses — RunCoxRegression_Guesses_CPP","title":"Performs basic Cox Proportional Hazards regression, Allows for multiple starting guesses on c++ side\nRunCoxRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions. Has additional options to starting with several initial guesses — RunCoxRegression_Guesses_CPP","text":"Performs basic Cox Proportional Hazards regression, Allows multiple starting guesses c++ side RunCoxRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions. additional options starting several initial guesses","code":""},{"path":"/reference/RunCoxRegression_Guesses_CPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Cox Proportional Hazards regression, Allows for multiple starting guesses on c++ side\nRunCoxRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions. Has additional options to starting with several initial guesses — RunCoxRegression_Guesses_CPP","text":"","code":"RunCoxRegression_Guesses_CPP(   df,   time1,   time2,   event0,   names,   Term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   der_iden,   control,   guesses_control,   Strat_Col,   model_control = list(),   cens_weight = c(0) )"},{"path":"/reference/RunCoxRegression_Guesses_CPP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Cox Proportional Hazards regression, Allows for multiple starting guesses on c++ side\nRunCoxRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions. Has additional options to starting with several initial guesses — RunCoxRegression_Guesses_CPP","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter control list parameters controlling convergence guesses_control list parameters control guessing works Strat_Col column stratify needed model_control controls alternative model options used cens_weight list weights censoring rate","code":""},{"path":"/reference/RunCoxRegression_Guesses_CPP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Cox Proportional Hazards regression, Allows for multiple starting guesses on c++ side\nRunCoxRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions. Has additional options to starting with several initial guesses — RunCoxRegression_Guesses_CPP","text":"returns list final results","code":""},{"path":"/reference/RunCoxRegression_Guesses_CPP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Cox Proportional Hazards regression, Allows for multiple starting guesses on c++ side\nRunCoxRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions. Has additional options to starting with several initial guesses — RunCoxRegression_Guesses_CPP","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   1,   0,   0,   0,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'dbeta_max' = 0.5,'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1) guesses_control=list(\"maxiter\"=10,\"guesses\"=10,\"lin_min\"=0.001,\"lin_max\"=1,     \"loglin_min\"=-1,\"loglin_max\"=1, \"lin_method\"=\"uniform\",\"loglin_method\"=\"uniform\",strata=FALSE) Strat_Col <- 'e'  e <- RunCoxRegression_Guesses_CPP(df, time1, time2, event, names, Term_n,                               tform, keep_constant, a_n, modelform, fir,                               der_iden, control,guesses_control,Strat_Col)"},{"path":"/reference/RunCoxRegression_Omnibus.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs Cox Proportional Hazards regression using the omnibus function\nRunCoxRegression_Omnibus uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence\nand starting positions. Has additional options for starting with several\ninitial guesses, using stratification, multiplicative loglinear 1-term,\ncompeting risks, and calculation without derivatives — RunCoxRegression_Omnibus","title":"Performs Cox Proportional Hazards regression using the omnibus function\nRunCoxRegression_Omnibus uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence\nand starting positions. Has additional options for starting with several\ninitial guesses, using stratification, multiplicative loglinear 1-term,\ncompeting risks, and calculation without derivatives — RunCoxRegression_Omnibus","text":"Performs Cox Proportional Hazards regression using omnibus function RunCoxRegression_Omnibus uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions. additional options starting several initial guesses, using stratification, multiplicative loglinear 1-term, competing risks, calculation without derivatives","code":""},{"path":"/reference/RunCoxRegression_Omnibus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs Cox Proportional Hazards regression using the omnibus function\nRunCoxRegression_Omnibus uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence\nand starting positions. Has additional options for starting with several\ninitial guesses, using stratification, multiplicative loglinear 1-term,\ncompeting risks, and calculation without derivatives — RunCoxRegression_Omnibus","text":"","code":"RunCoxRegression_Omnibus(   df,   time1 = \"start\",   time2 = \"end\",   event0 = \"event\",   names = c(\"CONST\"),   Term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list(),   Strat_Col = \"null\",   cens_weight = c(1),   model_control = list(),   Cons_Mat = as.matrix(c(0, 0)),   Cons_Vec = c(0) )"},{"path":"/reference/RunCoxRegression_Omnibus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs Cox Proportional Hazards regression using the omnibus function\nRunCoxRegression_Omnibus uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence\nand starting positions. Has additional options for starting with several\ninitial guesses, using stratification, multiplicative loglinear 1-term,\ncompeting risks, and calculation without derivatives — RunCoxRegression_Omnibus","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter control list parameters controlling convergence Strat_Col column stratify needed cens_weight list weights censoring rate model_control controls alternative model options used Cons_Mat Matrix containing coefficients system linear constraints Cons_Vec Vector containing constants system linear constraints","code":""},{"path":"/reference/RunCoxRegression_Omnibus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs Cox Proportional Hazards regression using the omnibus function\nRunCoxRegression_Omnibus uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence\nand starting positions. Has additional options for starting with several\ninitial guesses, using stratification, multiplicative loglinear 1-term,\ncompeting risks, and calculation without derivatives — RunCoxRegression_Omnibus","text":"returns list final results","code":""},{"path":"/reference/RunCoxRegression_Omnibus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs Cox Proportional Hazards regression using the omnibus function\nRunCoxRegression_Omnibus uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence\nand starting positions. Has additional options for starting with several\ninitial guesses, using stratification, multiplicative loglinear 1-term,\ncompeting risks, and calculation without derivatives — RunCoxRegression_Omnibus","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   1,   0,   0,   0,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- list(c(1.1, -0.1, 0.2, 0.5),c(1.6, -0.12, 0.3, 0.4)) #used to test at a specific point Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiters' = c(5,5,5),    'halfmax' = 5,'epsilon' = 1e-3, 'dbeta_max' = 0.5,'deriv_epsilon' = 1e-3,    'abs_max'=1.0,'change_all'=TRUE, 'dose_abs_max'=100.0,'verbose'=FALSE,    'ties'='breslow','double_step'=1, \"guesses\"=2)  e <- RunCoxRegression_Omnibus(df, time1, time2, event,                               names, Term_n, tform, keep_constant,                               a_n, modelform, fir, der_iden, control,                               model_control=list(\"single\"=FALSE,                               \"basic\"=FALSE, \"CR\"=FALSE, 'null'=FALSE))"},{"path":"/reference/RunCoxRegression_STRATA.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Cox Proportional Hazards regression with strata effect\nRunCoxRegression_STRATA uses user provided data,\ntime/event columns, vectors specifying the model, and options to control\nthe convergence and starting positions — RunCoxRegression_STRATA","title":"Performs basic Cox Proportional Hazards regression with strata effect\nRunCoxRegression_STRATA uses user provided data,\ntime/event columns, vectors specifying the model, and options to control\nthe convergence and starting positions — RunCoxRegression_STRATA","text":"Performs basic Cox Proportional Hazards regression strata effect RunCoxRegression_STRATA uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions","code":""},{"path":"/reference/RunCoxRegression_STRATA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Cox Proportional Hazards regression with strata effect\nRunCoxRegression_STRATA uses user provided data,\ntime/event columns, vectors specifying the model, and options to control\nthe convergence and starting positions — RunCoxRegression_STRATA","text":"","code":"RunCoxRegression_STRATA(   df,   time1,   time2,   event0,   names,   Term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   der_iden,   control,   Strat_Col )"},{"path":"/reference/RunCoxRegression_STRATA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Cox Proportional Hazards regression with strata effect\nRunCoxRegression_STRATA uses user provided data,\ntime/event columns, vectors specifying the model, and options to control\nthe convergence and starting positions — RunCoxRegression_STRATA","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter control list parameters controlling convergence Strat_Col column stratify needed","code":""},{"path":"/reference/RunCoxRegression_STRATA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Cox Proportional Hazards regression with strata effect\nRunCoxRegression_STRATA uses user provided data,\ntime/event columns, vectors specifying the model, and options to control\nthe convergence and starting positions — RunCoxRegression_STRATA","text":"returns list final results","code":""},{"path":"/reference/RunCoxRegression_STRATA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Cox Proportional Hazards regression with strata effect\nRunCoxRegression_STRATA uses user provided data,\ntime/event columns, vectors specifying the model, and options to control\nthe convergence and starting positions — RunCoxRegression_STRATA","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   0,   0,   1,   0,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,    'epsilon' = 1e-3,'dbeta_max' = 0.5,'deriv_epsilon' = 1e-3,    'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,    'verbose'=FALSE, 'ties'='breslow','double_step'=1) Strat_Col <- 'e'  e <- RunCoxRegression_STRATA(df, time1, time2, event, names, Term_n,                              tform, keep_constant, a_n, modelform,                              fir, der_iden, control,Strat_Col)"},{"path":"/reference/RunCoxRegression_Single.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Cox Proportional Hazards calculation with no derivative\nRunCoxRegression_Single uses user provided data, time/event columns, vectors specifying the model, and options and returns the log-likelihood — RunCoxRegression_Single","title":"Performs basic Cox Proportional Hazards calculation with no derivative\nRunCoxRegression_Single uses user provided data, time/event columns, vectors specifying the model, and options and returns the log-likelihood — RunCoxRegression_Single","text":"Performs basic Cox Proportional Hazards calculation derivative RunCoxRegression_Single uses user provided data, time/event columns, vectors specifying model, options returns log-likelihood","code":""},{"path":"/reference/RunCoxRegression_Single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Cox Proportional Hazards calculation with no derivative\nRunCoxRegression_Single uses user provided data, time/event columns, vectors specifying the model, and options and returns the log-likelihood — RunCoxRegression_Single","text":"","code":"RunCoxRegression_Single(   df,   time1,   time2,   event0,   names,   Term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   control )"},{"path":"/reference/RunCoxRegression_Single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Cox Proportional Hazards calculation with no derivative\nRunCoxRegression_Single uses user provided data, time/event columns, vectors specifying the model, and options and returns the log-likelihood — RunCoxRegression_Single","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters control list parameters controlling convergence","code":""},{"path":"/reference/RunCoxRegression_Single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Cox Proportional Hazards calculation with no derivative\nRunCoxRegression_Single uses user provided data, time/event columns, vectors specifying the model, and options and returns the log-likelihood — RunCoxRegression_Single","text":"returns list final results","code":""},{"path":"/reference/RunCoxRegression_Single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Cox Proportional Hazards calculation with no derivative\nRunCoxRegression_Single uses user provided data, time/event columns, vectors specifying the model, and options and returns the log-likelihood — RunCoxRegression_Single","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point  keep_constant <- c(0,0,0,0)  control <- list(\"Ncores\"=2,'verbose'=FALSE, 'ties'='breslow','double_step'=1)  e <- RunCoxRegression_Single(df, time1, time2, event, names, Term_n, tform,                              keep_constant, a_n, modelform, fir, control)"},{"path":"/reference/RunCoxRegression_Tier_Guesses.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic cox regression, with multiple guesses, starts with\nsolving for a single term\nRunCoxRegression_Tier_Guesses uses user provided data, time/event\ncolumns, vectors specifying the model, and options to control the\nconvergence and starting positions, with additional guesses — RunCoxRegression_Tier_Guesses","title":"Performs basic cox regression, with multiple guesses, starts with\nsolving for a single term\nRunCoxRegression_Tier_Guesses uses user provided data, time/event\ncolumns, vectors specifying the model, and options to control the\nconvergence and starting positions, with additional guesses — RunCoxRegression_Tier_Guesses","text":"Performs basic cox regression, multiple guesses, starts solving single term RunCoxRegression_Tier_Guesses uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions, additional guesses","code":""},{"path":"/reference/RunCoxRegression_Tier_Guesses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic cox regression, with multiple guesses, starts with\nsolving for a single term\nRunCoxRegression_Tier_Guesses uses user provided data, time/event\ncolumns, vectors specifying the model, and options to control the\nconvergence and starting positions, with additional guesses — RunCoxRegression_Tier_Guesses","text":"","code":"RunCoxRegression_Tier_Guesses(   df,   time1,   time2,   event0,   names,   Term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   der_iden,   control,   guesses_control,   Strat_Col,   model_control = list(),   cens_weight = c(0) )"},{"path":"/reference/RunCoxRegression_Tier_Guesses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic cox regression, with multiple guesses, starts with\nsolving for a single term\nRunCoxRegression_Tier_Guesses uses user provided data, time/event\ncolumns, vectors specifying the model, and options to control the\nconvergence and starting positions, with additional guesses — RunCoxRegression_Tier_Guesses","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter control list parameters controlling convergence guesses_control list parameters control guessing works Strat_Col column stratify needed model_control controls alternative model options used cens_weight list weights censoring rate","code":""},{"path":"/reference/RunCoxRegression_Tier_Guesses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic cox regression, with multiple guesses, starts with\nsolving for a single term\nRunCoxRegression_Tier_Guesses uses user provided data, time/event\ncolumns, vectors specifying the model, and options to control the\nconvergence and starting positions, with additional guesses — RunCoxRegression_Tier_Guesses","text":"returns list final results","code":""},{"path":"/reference/RunCoxRegression_Tier_Guesses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic cox regression, with multiple guesses, starts with\nsolving for a single term\nRunCoxRegression_Tier_Guesses uses user provided data, time/event\ncolumns, vectors specifying the model, and options to control the\nconvergence and starting positions, with additional guesses — RunCoxRegression_Tier_Guesses","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   0,   0,   1,   0,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,    'epsilon' = 1e-3,'dbeta_max' = 0.5,'deriv_epsilon' = 1e-3,    'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,    'verbose'=FALSE, 'ties'='breslow','double_step'=1) guesses_control=list(\"Iterations\"=10,\"guesses\"=10,\"lin_min\"=0.001,    \"lin_max\"=1,\"loglin_min\"=-1,\"loglin_max\"=1, \"lin_method\"=\"uniform\",    \"loglin_method\"=\"uniform\",strata=TRUE,term_initial = c(0,1)) Strat_Col <- 'e'  e <- RunCoxRegression_Tier_Guesses(df, time1, time2, event, names,                                    Term_n, tform, keep_constant,                                    a_n, modelform, fir, der_iden,                                    control,guesses_control,                                    Strat_Col)"},{"path":"/reference/RunPoissonRegression.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic poisson regression\nRunPoissonRegression uses user provided data, person-year/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunPoissonRegression","title":"Performs basic poisson regression\nRunPoissonRegression uses user provided data, person-year/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunPoissonRegression","text":"Performs basic poisson regression RunPoissonRegression uses user provided data, person-year/event columns, vectors specifying model, options control convergence starting positions","code":""},{"path":"/reference/RunPoissonRegression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic poisson regression\nRunPoissonRegression uses user provided data, person-year/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunPoissonRegression","text":"","code":"RunPoissonRegression(   df,   pyr0,   event0,   names,   Term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   der_iden,   control )"},{"path":"/reference/RunPoissonRegression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic poisson regression\nRunPoissonRegression uses user provided data, person-year/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunPoissonRegression","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter control list parameters controlling convergence","code":""},{"path":"/reference/RunPoissonRegression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic poisson regression\nRunPoissonRegression uses user provided data, person-year/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunPoissonRegression","text":"returns list final results","code":""},{"path":"/reference/RunPoissonRegression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic poisson regression\nRunPoissonRegression uses user provided data, person-year/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunPoissonRegression","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case df$pyr <- df$Ending_Age - df$Starting_Age pyr <- 'pyr' event <- \"Cancer_Status\" names <- c('a','b','c','d') Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(0.1, 0.1, 0.1, 0.1)  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'dbeta_max' = 0.5,'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'double_step'=1)  e <- RunPoissonRegression(df, pyr, event, names, Term_n, tform, keep_constant,                           a_n, modelform, fir, der_iden, control)"},{"path":"/reference/RunPoissonRegression_Guesses_CPP.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Poisson regression, Allows for multiple starting guesses on c++ side\nRunPoissonRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions. Has additional options to starting with several initial guesses — RunPoissonRegression_Guesses_CPP","title":"Performs basic Poisson regression, Allows for multiple starting guesses on c++ side\nRunPoissonRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions. Has additional options to starting with several initial guesses — RunPoissonRegression_Guesses_CPP","text":"Performs basic Poisson regression, Allows multiple starting guesses c++ side RunPoissonRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions. additional options starting several initial guesses","code":""},{"path":"/reference/RunPoissonRegression_Guesses_CPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Poisson regression, Allows for multiple starting guesses on c++ side\nRunPoissonRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions. Has additional options to starting with several initial guesses — RunPoissonRegression_Guesses_CPP","text":"","code":"RunPoissonRegression_Guesses_CPP(   df,   pyr0,   event0,   names,   Term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   der_iden,   control,   guesses_control,   Strat_Col = c(\"null\"),   model_control = list() )"},{"path":"/reference/RunPoissonRegression_Guesses_CPP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Poisson regression, Allows for multiple starting guesses on c++ side\nRunPoissonRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions. Has additional options to starting with several initial guesses — RunPoissonRegression_Guesses_CPP","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter control list parameters controlling convergence guesses_control list parameters control guessing works Strat_Col column stratify needed model_control controls alternative model options used","code":""},{"path":"/reference/RunPoissonRegression_Guesses_CPP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Poisson regression, Allows for multiple starting guesses on c++ side\nRunPoissonRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions. Has additional options to starting with several initial guesses — RunPoissonRegression_Guesses_CPP","text":"returns list final results","code":""},{"path":"/reference/RunPoissonRegression_Guesses_CPP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Poisson regression, Allows for multiple starting guesses on c++ side\nRunPoissonRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions. Has additional options to starting with several initial guesses — RunPoissonRegression_Guesses_CPP","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   1,   0,   0,   0,   1)) # For the interval case pyr <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'dbeta_max' = 0.5,'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1) guesses_control <- list(\"maxiter\"=10,\"guesses\"=10,\"lin_min\"=0.001,\"lin_max\"=1,     \"loglin_min\"=-1,\"loglin_max\"=1, \"lin_method\"=\"uniform\",\"loglin_method\"=\"uniform\",strata=FALSE) Strat_Col <- 'e'  e <- RunPoissonRegression_Guesses_CPP(df, pyr, event, names, Term_n,                               tform, keep_constant, a_n, modelform, fir,                               der_iden, control,guesses_control,Strat_Col)"},{"path":"/reference/RunPoissonRegression_Omnibus.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Poisson regression using the omnibus function\nRunPoissonRegression_Omnibus uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence and starting positions.\nHas additional options to starting with several initial guesses — RunPoissonRegression_Omnibus","title":"Performs basic Poisson regression using the omnibus function\nRunPoissonRegression_Omnibus uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence and starting positions.\nHas additional options to starting with several initial guesses — RunPoissonRegression_Omnibus","text":"Performs basic Poisson regression using omnibus function RunPoissonRegression_Omnibus uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions. additional options starting several initial guesses","code":""},{"path":"/reference/RunPoissonRegression_Omnibus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Poisson regression using the omnibus function\nRunPoissonRegression_Omnibus uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence and starting positions.\nHas additional options to starting with several initial guesses — RunPoissonRegression_Omnibus","text":"","code":"RunPoissonRegression_Omnibus(   df,   pyr0 = \"pyr\",   event0 = \"event\",   names = c(\"CONST\"),   Term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list(),   Strat_Col = \"null\",   model_control = list(),   Cons_Mat = as.matrix(c(0, 0)),   Cons_Vec = c(0) )"},{"path":"/reference/RunPoissonRegression_Omnibus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Poisson regression using the omnibus function\nRunPoissonRegression_Omnibus uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence and starting positions.\nHas additional options to starting with several initial guesses — RunPoissonRegression_Omnibus","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter control list parameters controlling convergence Strat_Col column stratify needed model_control controls alternative model options used Cons_Mat Matrix containing coefficients system linear constraints Cons_Vec Vector containing constants system linear constraints","code":""},{"path":"/reference/RunPoissonRegression_Omnibus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Poisson regression using the omnibus function\nRunPoissonRegression_Omnibus uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence and starting positions.\nHas additional options to starting with several initial guesses — RunPoissonRegression_Omnibus","text":"returns list final results","code":""},{"path":"/reference/RunPoissonRegression_Omnibus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Poisson regression using the omnibus function\nRunPoissonRegression_Omnibus uses user provided data, time/event columns,\nvectors specifying the model, and options to control the convergence and starting positions.\nHas additional options to starting with several initial guesses — RunPoissonRegression_Omnibus","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   1,   0,   0,   0,   1)) # For the interval case pyr <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'dbeta_max' = 0.5,'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1) guesses_control <- list(\"maxiter\"=10,\"guesses\"=10,\"lin_min\"=0.001,\"lin_max\"=1,     \"loglin_min\"=-1,\"loglin_max\"=1, \"lin_method\"=\"uniform\",\"loglin_method\"=\"uniform\",      strata=FALSE) Strat_Col <- 'e' e <- RunPoissonRegression_Omnibus(df, pyr, event, names, Term_n, tform, keep_constant,                                   a_n, modelform, fir, der_iden, control,Strat_Col)"},{"path":"/reference/RunPoissonRegression_STRATA.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs poisson regression with strata effect\nRunPoissonRegression_STRATA uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunPoissonRegression_STRATA","title":"Performs poisson regression with strata effect\nRunPoissonRegression_STRATA uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunPoissonRegression_STRATA","text":"Performs poisson regression strata effect RunPoissonRegression_STRATA uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions","code":""},{"path":"/reference/RunPoissonRegression_STRATA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs poisson regression with strata effect\nRunPoissonRegression_STRATA uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunPoissonRegression_STRATA","text":"","code":"RunPoissonRegression_STRATA(   df,   pyr0,   event0,   names,   Term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   der_iden,   control,   Strat_Cols )"},{"path":"/reference/RunPoissonRegression_STRATA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs poisson regression with strata effect\nRunPoissonRegression_STRATA uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunPoissonRegression_STRATA","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter control list parameters controlling convergence Strat_Cols column stratify ","code":""},{"path":"/reference/RunPoissonRegression_STRATA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs poisson regression with strata effect\nRunPoissonRegression_STRATA uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunPoissonRegression_STRATA","text":"returns list final results","code":""},{"path":"/reference/RunPoissonRegression_STRATA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs poisson regression with strata effect\nRunPoissonRegression_STRATA uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions — RunPoissonRegression_STRATA","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   0,   0,   1,   0,   1)) # For the interval case df$pyr <- df$Ending_Age - df$Starting_Age pyr <- 'pyr' event <- \"Cancer_Status\" names <- c('a','b','c','d') Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(0.1, 0.1, 0.1, 0.1)  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,              'epsilon' = 1e-3,'dbeta_max' = 0.5, 'deriv_epsilon' = 1e-3,              'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,              'verbose'=FALSE, 'double_step'=1) Strat_Col <- c(\"e\") e <- RunPoissonRegression_STRATA(df, pyr, event, names, Term_n, tform, keep_constant,      a_n, modelform, fir, der_iden, control, Strat_Col)"},{"path":"/reference/RunPoissonRegression_Single.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs poisson regression with no derivative calculations\nRunPoissonRegression_Single uses user provided data, person-year/event columns, vectors specifying the model, and returns the results — RunPoissonRegression_Single","title":"Performs poisson regression with no derivative calculations\nRunPoissonRegression_Single uses user provided data, person-year/event columns, vectors specifying the model, and returns the results — RunPoissonRegression_Single","text":"Performs poisson regression derivative calculations RunPoissonRegression_Single uses user provided data, person-year/event columns, vectors specifying model, returns results","code":""},{"path":"/reference/RunPoissonRegression_Single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs poisson regression with no derivative calculations\nRunPoissonRegression_Single uses user provided data, person-year/event columns, vectors specifying the model, and returns the results — RunPoissonRegression_Single","text":"","code":"RunPoissonRegression_Single(   df,   pyr0,   event0,   names,   Term_n,   tform,   a_n,   modelform,   fir,   control,   keep_constant = rep(0, length(names)) )"},{"path":"/reference/RunPoissonRegression_Single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs poisson regression with no derivative calculations\nRunPoissonRegression_Single uses user provided data, person-year/event columns, vectors specifying the model, and returns the results — RunPoissonRegression_Single","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters control list parameters controlling convergence keep_constant binary values denote parameters change","code":""},{"path":"/reference/RunPoissonRegression_Single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs poisson regression with no derivative calculations\nRunPoissonRegression_Single uses user provided data, person-year/event columns, vectors specifying the model, and returns the results — RunPoissonRegression_Single","text":"returns list final results","code":""},{"path":"/reference/RunPoissonRegression_Single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs poisson regression with no derivative calculations\nRunPoissonRegression_Single uses user provided data, person-year/event columns, vectors specifying the model, and returns the results — RunPoissonRegression_Single","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case df$pyr <- df$Ending_Age - df$Starting_Age pyr <- 'pyr' event <- \"Cancer_Status\" names <- c('a','b','c','d') Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(0.1, 0.1, 0.1, 0.1)  keep_constant <- c(0,0,0,0)  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,              'epsilon' = 1e-3,'dbeta_max' = 0.5, 'deriv_epsilon' = 1e-3,              'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,              'verbose'=FALSE, 'double_step'=1)  e <- RunPoissonRegression_Single(df, pyr, event, names, Term_n, tform, a_n, modelform, fir, control)"},{"path":"/reference/RunPoissonRegression_Tier_Guesses.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic poisson regression, with multiple guesses, starts with a single term\nRunPoissonRegression_Tier_Guesses uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions, with additional guesses — RunPoissonRegression_Tier_Guesses","title":"Performs basic poisson regression, with multiple guesses, starts with a single term\nRunPoissonRegression_Tier_Guesses uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions, with additional guesses — RunPoissonRegression_Tier_Guesses","text":"Performs basic poisson regression, multiple guesses, starts single term RunPoissonRegression_Tier_Guesses uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions, additional guesses","code":""},{"path":"/reference/RunPoissonRegression_Tier_Guesses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic poisson regression, with multiple guesses, starts with a single term\nRunPoissonRegression_Tier_Guesses uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions, with additional guesses — RunPoissonRegression_Tier_Guesses","text":"","code":"RunPoissonRegression_Tier_Guesses(   df,   pyr0,   event0,   names,   Term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   der_iden,   control,   guesses_control,   Strat_Cols )"},{"path":"/reference/RunPoissonRegression_Tier_Guesses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic poisson regression, with multiple guesses, starts with a single term\nRunPoissonRegression_Tier_Guesses uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions, with additional guesses — RunPoissonRegression_Tier_Guesses","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status names columns elements model, used identify data columns Term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters modelform string specifying model type fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter control list parameters controlling convergence guesses_control list parameters control guessing works Strat_Cols column stratify ","code":""},{"path":"/reference/RunPoissonRegression_Tier_Guesses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic poisson regression, with multiple guesses, starts with a single term\nRunPoissonRegression_Tier_Guesses uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions, with additional guesses — RunPoissonRegression_Tier_Guesses","text":"returns list final results","code":""},{"path":"/reference/RunPoissonRegression_Tier_Guesses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic poisson regression, with multiple guesses, starts with a single term\nRunPoissonRegression_Tier_Guesses uses user provided data, time/event columns, vectors specifying the model, and options to control the convergence and starting positions, with additional guesses — RunPoissonRegression_Tier_Guesses","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   0,   0,   1,   0,   1)) # For the interval case df$pyr <- df$Ending_Age - df$Starting_Age pyr <- 'pyr' event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point Term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"Ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'dbeta_max' = 0.5,'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE,'double_step'=1) guesses_control <- list(\"Iterations\"=10,\"guesses\"=10,\"lin_min\"=0.001,\"lin_max\"=1,   \"loglin_min\"=-1,\"loglin_max\"=1,\"lin_method\"=\"uniform\",   \"loglin_method\"=\"uniform\",strata=TRUE,term_initial = c(0,1)) Strat_Cols=c('e')  e <- RunPoissonRegression_Tier_Guesses(df, pyr, event, names,      Term_n, tform, keep_constant, a_n, modelform,      fir, der_iden, control, guesses_control, Strat_Cols)"},{"path":"/reference/Schoenfeld_Calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Primary Cox PH schoenfeld residual function\nSchoenfeld_Calc Performs the calls to calculation functions, Uses calculated risks and risk groups to calculate the residuals, With verbose option prints out time stamps and intermediate sums of terms and derivatives — Schoenfeld_Calc","title":"Primary Cox PH schoenfeld residual function\nSchoenfeld_Calc Performs the calls to calculation functions, Uses calculated risks and risk groups to calculate the residuals, With verbose option prints out time stamps and intermediate sums of terms and derivatives — Schoenfeld_Calc","text":"Primary Cox PH schoenfeld residual function Schoenfeld_Calc Performs calls calculation functions, Uses calculated risks risk groups calculate residuals, verbose option prints time stamps intermediate sums terms derivatives","code":""},{"path":"/reference/Schoenfeld_Calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primary Cox PH schoenfeld residual function\nSchoenfeld_Calc Performs the calls to calculation functions, Uses calculated risks and risk groups to calculate the residuals, With verbose option prints out time stamps and intermediate sums of terms and derivatives — Schoenfeld_Calc","text":"","code":"Schoenfeld_Calc(   ntime,   totalnum,   beta_0,   df0,   R,   Lldd_inv,   RiskFail,   RiskGroup,   dfc,   verbose,   debugging,   KeepConstant,   nthreads )"},{"path":"/reference/Schoenfeld_Calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Primary Cox PH schoenfeld residual function\nSchoenfeld_Calc Performs the calls to calculation functions, Uses calculated risks and risk groups to calculate the residuals, With verbose option prints out time stamps and intermediate sums of terms and derivatives — Schoenfeld_Calc","text":"ntime number risk groups totalnum total number parameters beta_0 parameter estimates df0 matrix covariate values R risk vector Lldd_inv inverse second derivative Log-Likelihood matrix RiskFail matrix indexes event rows risk group RiskGroup list string indices every risk group dfc vector matching subterm number matrix column verbose boolean additional printing debugging additional boolean verbosity testing KeepConstant binary vector identify constant parameters nthreads number threads available","code":""},{"path":"/reference/Schoenfeld_Calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Primary Cox PH schoenfeld residual function\nSchoenfeld_Calc Performs the calls to calculation functions, Uses calculated risks and risk groups to calculate the residuals, With verbose option prints out time stamps and intermediate sums of terms and derivatives — Schoenfeld_Calc","text":"List results: scaled schoenfeld residuals","code":""},{"path":"/reference/Time_Since.html","id":null,"dir":"Reference","previous_headings":"","what":"Automates creating a date since a reference column\nTime_Since generates a new dataframe with a column containing time since a reference in a given unit — Time_Since","title":"Automates creating a date since a reference column\nTime_Since generates a new dataframe with a column containing time since a reference in a given unit — Time_Since","text":"Automates creating date since reference column Time_Since generates new dataframe column containing time since reference given unit","code":""},{"path":"/reference/Time_Since.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automates creating a date since a reference column\nTime_Since generates a new dataframe with a column containing time since a reference in a given unit — Time_Since","text":"","code":"Time_Since(df, dcol0, tref, col_name, units = \"days\")"},{"path":"/reference/Time_Since.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automates creating a date since a reference column\nTime_Since generates a new dataframe with a column containing time since a reference in a given unit — Time_Since","text":"df data.table containing columns interest dcol0 list ending month, day, year tref reference time date format col_name new column name units time unit use","code":""},{"path":"/reference/Time_Since.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automates creating a date since a reference column\nTime_Since generates a new dataframe with a column containing time since a reference in a given unit — Time_Since","text":"returns updated dataframe","code":""},{"path":"/reference/Time_Since.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automates creating a date since a reference column\nTime_Since generates a new dataframe with a column containing time since a reference in a given unit — Time_Since","text":"","code":"library(data.table) m0 <- c(1,1,2,2) m1 <- c(2,2,3,3) d0 <- c(1,2,3,4) d1 <- c(6,7,8,9) y0 <- c(1990,1991,1997,1998) y1 <- c(2001,2003,2005,2006) df <- data.table(\"m0\"=m0,\"m1\"=m1,\"d0\"=d0,\"d1\"=d1,\"y0\"=y0,\"y1\"=y1) tref <- strptime( \"3-22-1997\", format = \"%m-%d-%Y\",tz = 'UTC') df <- Time_Since(df,c(\"m1\",\"d1\",\"y1\"),tref,\"date_since\")"},{"path":"/reference/Write_Time_Dep.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates csv file with time-dependent columns\nWrite_Time_Dep Called directly from R, Defines a new matrix which interpolates time-dependent values on a grid — Write_Time_Dep","title":"Generates csv file with time-dependent columns\nWrite_Time_Dep Called directly from R, Defines a new matrix which interpolates time-dependent values on a grid — Write_Time_Dep","text":"Generates csv file time-dependent columns Write_Time_Dep Called directly R, Defines new matrix interpolates time-dependent values grid","code":""},{"path":"/reference/Write_Time_Dep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates csv file with time-dependent columns\nWrite_Time_Dep Called directly from R, Defines a new matrix which interpolates time-dependent values on a grid — Write_Time_Dep","text":"","code":"Write_Time_Dep(   df0_Times,   df0_dep,   df0_const,   df0_event,   dt,   filename,   tform_tdep,   tu,   iscox,   nthreads )"},{"path":"/reference/Write_Time_Dep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates csv file with time-dependent columns\nWrite_Time_Dep Called directly from R, Defines a new matrix which interpolates time-dependent values on a grid — Write_Time_Dep","text":"df0_Times Matrix (starting time, ending time) df0_dep matrix pairs (covariate start, covariate end) time-dependent covariate df0_const matrix values held constant df0_event matrix event status, zero last entry original row dt spacing time filename file save data tform_tdep vector types time dependent variables tu Event time vector iscox boolean cox formatting used nthreads number threads available","code":""},{"path":"/reference/Write_Time_Dep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates csv file with time-dependent columns\nWrite_Time_Dep Called directly from R, Defines a new matrix which interpolates time-dependent values on a grid — Write_Time_Dep","text":"saves dataframe used time-dependent covariate analysis","code":""},{"path":"/reference/cox_ph_Omnibus_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface between R code and the Cox PH omnibus regression function\ncox_ph_Omnibus_transition Called directly from R, Defines the control variables and calls the regression function — cox_ph_Omnibus_transition","title":"Interface between R code and the Cox PH omnibus regression function\ncox_ph_Omnibus_transition Called directly from R, Defines the control variables and calls the regression function — cox_ph_Omnibus_transition","text":"Interface R code Cox PH omnibus regression function cox_ph_Omnibus_transition Called directly R, Defines control variables calls regression function","code":""},{"path":"/reference/cox_ph_Omnibus_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface between R code and the Cox PH omnibus regression function\ncox_ph_Omnibus_transition Called directly from R, Defines the control variables and calls the regression function — cox_ph_Omnibus_transition","text":"","code":"cox_ph_Omnibus_transition(   Term_n,   tform,   a_ns,   dfc,   x_all,   fir,   der_iden,   modelform,   Control,   df_groups,   tu,   KeepConstant,   term_tot,   STRATA_vals,   cens_vec,   model_control,   Cons_Mat,   Cons_Vec )"},{"path":"/reference/cox_ph_Omnibus_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface between R code and the Cox PH omnibus regression function\ncox_ph_Omnibus_transition Called directly from R, Defines the control variables and calls the regression function — cox_ph_Omnibus_transition","text":"Term_n Term numbers tform subterm types a_ns matrix starting values dfc vector matching subterm number matrix column x_all covariate matrix fir st term number der_iden subterm number derivative tests modelform string model identifier Control control list df_groups matrix time event information tu Event time vector KeepConstant binary vector identify constant parameters term_tot total number terms STRATA_vals vector strata identifier values cens_vec censoring weight list model_control controls alternative model options used Cons_Mat Matrix containing coefficients system linear constraints Cons_Vec Vector containing constants system linear constraints","code":""},{"path":"/reference/cox_ph_Omnibus_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface between R code and the Cox PH omnibus regression function\ncox_ph_Omnibus_transition Called directly from R, Defines the control variables and calls the regression function — cox_ph_Omnibus_transition","text":"LogLik_Cox_PH output : Log-likelihood optimum, first derivative log-likelihood, second derivative matrix, parameter list, standard deviation estimate, AIC, model information","code":""},{"path":"/reference/factorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits a parameter into factors\nfactorize uses user provided list of columns to define new parameter for each unique value and update the data.table.\nNot for interaction terms — factorize","title":"Splits a parameter into factors\nfactorize uses user provided list of columns to define new parameter for each unique value and update the data.table.\nNot for interaction terms — factorize","text":"Splits parameter factors factorize uses user provided list columns define new parameter unique value update data.table. interaction terms","code":""},{"path":"/reference/factorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits a parameter into factors\nfactorize uses user provided list of columns to define new parameter for each unique value and update the data.table.\nNot for interaction terms — factorize","text":"","code":"factorize(df, col_list, verbose = FALSE)"},{"path":"/reference/factorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits a parameter into factors\nfactorize uses user provided list of columns to define new parameter for each unique value and update the data.table.\nNot for interaction terms — factorize","text":"df data.table containing columns interest col_list array column names factor terms defined verbose boolean control additional information printed console","code":""},{"path":"/reference/factorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits a parameter into factors\nfactorize uses user provided list of columns to define new parameter for each unique value and update the data.table.\nNot for interaction terms — factorize","text":"returns list two named fields. df updated dataframe, cols new column names","code":""},{"path":"/reference/factorize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Splits a parameter into factors\nfactorize uses user provided list of columns to define new parameter for each unique value and update the data.table.\nNot for interaction terms — factorize","text":"","code":"library(data.table) a <- c(0,1,2,3,4,5,6) b <- c(1,2,3,4,5,6,7) c <- c(0,1,2,1,0,1,0) df <- data.table(\"a\"=a,\"b\"=b,\"c\"=c) col_list <- c(\"c\") val <- factorize(df,col_list) df <- val$df new_col <- val$cols"},{"path":"/reference/factorize_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits a parameter into factors in parallel\nfactorize_par uses user provided list of columns to define new parameter for each unique value and update the data.table.\nNot for interaction terms — factorize_par","title":"Splits a parameter into factors in parallel\nfactorize_par uses user provided list of columns to define new parameter for each unique value and update the data.table.\nNot for interaction terms — factorize_par","text":"Splits parameter factors parallel factorize_par uses user provided list columns define new parameter unique value update data.table. interaction terms","code":""},{"path":"/reference/factorize_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits a parameter into factors in parallel\nfactorize_par uses user provided list of columns to define new parameter for each unique value and update the data.table.\nNot for interaction terms — factorize_par","text":"","code":"factorize_par(   df,   col_list,   verbose = FALSE,   nthreads = as.numeric(detectCores()) )"},{"path":"/reference/factorize_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits a parameter into factors in parallel\nfactorize_par uses user provided list of columns to define new parameter for each unique value and update the data.table.\nNot for interaction terms — factorize_par","text":"df data.table containing columns interest col_list array column names factor terms defined verbose boolean control additional information printed console nthreads number threads use","code":""},{"path":"/reference/factorize_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits a parameter into factors in parallel\nfactorize_par uses user provided list of columns to define new parameter for each unique value and update the data.table.\nNot for interaction terms — factorize_par","text":"returns list two named fields. df updated dataframe, cols new column names","code":""},{"path":"/reference/factorize_par.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Splits a parameter into factors in parallel\nfactorize_par uses user provided list of columns to define new parameter for each unique value and update the data.table.\nNot for interaction terms — factorize_par","text":"","code":"library(data.table) a <- c(0,1,2,3,4,5,6) b <- c(1,2,3,4,5,6,7) c <- c(0,1,2,1,0,1,0) df <- data.table(\"a\"=a,\"b\"=b,\"c\"=c) col_list <- c(\"c\") val <- factorize_par(df,col_list,FALSE,2) df <- val$df new_col <- val$cols"},{"path":"/reference/gen_time_dep.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies time dependence to parameters\ngen_time_dep generates a new dataframe with time dependent covariates by applying a grid in time — gen_time_dep","title":"Applies time dependence to parameters\ngen_time_dep generates a new dataframe with time dependent covariates by applying a grid in time — gen_time_dep","text":"Applies time dependence parameters gen_time_dep generates new dataframe time dependent covariates applying grid time","code":""},{"path":"/reference/gen_time_dep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies time dependence to parameters\ngen_time_dep generates a new dataframe with time dependent covariates by applying a grid in time — gen_time_dep","text":"","code":"gen_time_dep(   df,   time1,   time2,   event0,   iscox,   dt,   new_names,   dep_cols,   func_form,   fname,   tform,   nthreads = as.numeric(detectCores()) )"},{"path":"/reference/gen_time_dep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies time dependence to parameters\ngen_time_dep generates a new dataframe with time dependent covariates by applying a grid in time — gen_time_dep","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status iscox boolean rows event times kept dt spacing time new rows new_names list new names use instead default, default used entry '' dep_cols columns needed new dataframe func_form vector functions apply time-dependent covariate. form func(df, time) returning vector new column value fname filename used new dataframe tform list string function identifiers, used linear/step nthreads number threads use","code":""},{"path":"/reference/gen_time_dep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies time dependence to parameters\ngen_time_dep generates a new dataframe with time dependent covariates by applying a grid in time — gen_time_dep","text":"returns updated dataframe","code":""},{"path":"/reference/gen_time_dep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Applies time dependence to parameters\ngen_time_dep generates a new dataframe with time dependent covariates by applying a grid in time — gen_time_dep","text":"","code":"library(data.table) #Adapted from the tests a <- c(20,20,5,10,15) b <- c(1,2,1,1,2) c <- c(0,0,1,1,1) df <- data.table(\"a\"=a,\"b\"=b,\"c\"=c) time1 <- \"%trunc%\" time2 <- \"a\" event <- \"c\" control <- list('lr' = 0.75,'maxiter' = -1,'halfmax' = 5,'epsilon' = 1e-9,'dbeta_max' = 0.5,            'deriv_epsilon' = 1e-9, 'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,            'verbose'=FALSE, 'ties'='breslow','double_step'=1) grt_f <- function(df,time_col){     return ((df[,\"b\"] * df[,get(time_col)])[[1]]) } func_form <- c(\"lin\") df_new <- gen_time_dep(df,time1,time2,event,TRUE,0.01,c(\"grt\"),c(),        c(grt_f),paste(\"test\",\"_new.csv\",sep=\"\"), func_form,2) file.remove('test_new.csv') #> [1] TRUE"},{"path":"/reference/interact_them.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines Interactions\ninteract_them uses user provided interactions define interaction terms and update the data.table. assumes interaction is ","title":"Defines Interactions\ninteract_them uses user provided interactions define interaction terms and update the data.table. assumes interaction is ","text":"Defines Interactions interact_them uses user provided interactions define interaction terms update data.table. assumes interaction \"+\" \"*\" applies basic anti-aliasing avoid duplicates","code":""},{"path":"/reference/interact_them.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines Interactions\ninteract_them uses user provided interactions define interaction terms and update the data.table. assumes interaction is ","text":"","code":"interact_them(df, interactions, new_names, verbose = FALSE)"},{"path":"/reference/interact_them.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines Interactions\ninteract_them uses user provided interactions define interaction terms and update the data.table. assumes interaction is ","text":"df data.table containing columns interest interactions array strings, one form term1?*?term2\" term1 interaction type * term2, \"?\" dlimits new_names list new names use instead default, default used entry '' verbose boolean control additional information printed console","code":""},{"path":"/reference/interact_them.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines Interactions\ninteract_them uses user provided interactions define interaction terms and update the data.table. assumes interaction is ","text":"returns list two named fields. df updated dataframe, cols new column names","code":""},{"path":"/reference/interact_them.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defines Interactions\ninteract_them uses user provided interactions define interaction terms and update the data.table. assumes interaction is ","text":"","code":"library(data.table) a <- c(0,1,2,3,4,5,6) b <- c(1,2,3,4,5,6,7) c <- c(0,1,2,1,0,1,0) df <- data.table(\"a\"=a,\"b\"=b,\"c\"=c) interactions <- c(\"a?+?b\",\"a?*?c\") new_names <- c(\"ab\",\"ac\") vals <- interact_them(df, interactions, new_names) df <- vals$df new_col <- vals$cols"},{"path":"/reference/pois_Omnibus_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface between R code and the poisson omnibus regression function\npois_Omnibus_transition Called directly from R, Defines the control variables and calls the regression function — pois_Omnibus_transition","title":"Interface between R code and the poisson omnibus regression function\npois_Omnibus_transition Called directly from R, Defines the control variables and calls the regression function — pois_Omnibus_transition","text":"Interface R code poisson omnibus regression function pois_Omnibus_transition Called directly R, Defines control variables calls regression function","code":""},{"path":"/reference/pois_Omnibus_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface between R code and the poisson omnibus regression function\npois_Omnibus_transition Called directly from R, Defines the control variables and calls the regression function — pois_Omnibus_transition","text":"","code":"pois_Omnibus_transition(   dfe,   Term_n,   tform,   a_ns,   dfc,   x_all,   fir,   der_iden,   modelform,   Control,   KeepConstant,   term_tot,   df0,   model_control,   Cons_Mat,   Cons_Vec )"},{"path":"/reference/pois_Omnibus_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface between R code and the poisson omnibus regression function\npois_Omnibus_transition Called directly from R, Defines the control variables and calls the regression function — pois_Omnibus_transition","text":"dfe Matrix person-year/event count information Term_n Term numbers tform subterm types a_ns matrix starting values dfc vector matching subterm number matrix column x_all covariate matrix fir st term number der_iden subterm number derivative tests modelform string model identifier Control control list KeepConstant binary vector identify constant parameters term_tot total number terms df0 matrix covariate values model_control controls alternative model options used Cons_Mat Matrix containing coefficients system linear constraints Cons_Vec Vector containing constants system linear constraints","code":""},{"path":"/reference/pois_Omnibus_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface between R code and the poisson omnibus regression function\npois_Omnibus_transition Called directly from R, Defines the control variables and calls the regression function — pois_Omnibus_transition","text":"LogLik_Cox_PH output : Log-likelihood optimum, first derivative log-likelihood, second derivative matrix, parameter list, standard deviation estimate, AIC, model information","code":""},{"path":"/reference/risk_check_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface between R code and the risk check\ncox_ph_transition_single Called directly from R, Defines the control variables and calls the function which only calculates the log-likelihood — risk_check_transition","title":"Interface between R code and the risk check\ncox_ph_transition_single Called directly from R, Defines the control variables and calls the function which only calculates the log-likelihood — risk_check_transition","text":"Interface R code risk check cox_ph_transition_single Called directly R, Defines control variables calls function calculates log-likelihood","code":""},{"path":"/reference/risk_check_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface between R code and the risk check\ncox_ph_transition_single Called directly from R, Defines the control variables and calls the function which only calculates the log-likelihood — risk_check_transition","text":"","code":"risk_check_transition(   Term_n,   tform,   a_n,   dfc,   x_all,   fir,   modelform,   Control,   model_control,   KeepConstant,   term_tot )"},{"path":"/reference/risk_check_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface between R code and the risk check\ncox_ph_transition_single Called directly from R, Defines the control variables and calls the function which only calculates the log-likelihood — risk_check_transition","text":"Term_n Term numbers tform subterm types a_n starting values dfc vector matching subterm number matrix column x_all covariate matrix fir st term number modelform string model identifier Control control list model_control controls alternative model options used KeepConstant binary vector identify constant parameters term_tot total number terms","code":""},{"path":"/reference/risk_check_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface between R code and the risk check\ncox_ph_transition_single Called directly from R, Defines the control variables and calls the function which only calculates the log-likelihood — risk_check_transition","text":"LogLik_Cox_PH output : Log-likelihood optimum, first derivative log-likelihood, second derivative matrix, parameter list, standard deviation estimate, AIC, model information","code":""},{"path":"/news/index.html","id":"colossus-09","dir":"Changelog","previous_headings":"","what":"Colossus 0.9","title":"Colossus 0.9","text":"Added NEWS.md file track changes package.","code":""},{"path":"/news/index.html","id":"colossus-092","dir":"Changelog","previous_headings":"","what":"Colossus 0.9.2","title":"Colossus 0.9.2","text":"Preparing package submission Incomplete functions moved experimental branch","code":""}]
