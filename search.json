[{"path":"/articles/Alt_Distrib_Starts.html","id":"general-theory","dir":"Articles","previous_headings":"","what":"General Theory","title":"Distributed Start Framework","text":"many instances, final value returned regression may depend starting point regression. cases user gets around running multiple regressions different starting points different learning rates. Colossus includes several functions built automate process several situations user may find . vignette cover descriptions several situations use distributed start functions, descriptions inputs function.","code":""},{"path":[]},{"path":"/articles/Alt_Distrib_Starts.html","id":"large-multi-dimensional-space","dir":"Articles","previous_headings":"Common Convergence Issues","what":"Large Multi-Dimensional Space","title":"Distributed Start Framework","text":"Generally speaking optimization methods used Colossus similar software based using derivatives improve log-likelihood measure deviance. methods search optimum, guaranteed global optimum. final solution may dependent initial regression conditions. model small number covariates well understood relationship covariate event, user may able start regression near global optimum. model composed hundreds covariates, becomes less likely. solution experienced user might come try multiple starting points see converge solution. Colossus tries make easier automating process. user provides Colossus initial starting point try parameters controlling many random points try generate . Currently Colossus supports uniformly generated points user provided minimum maximum values. log-linear terms generally different range acceptable values linear terms, different minimum maximum values can given log-linear terms options. one special case large multi-dimensional spaces given separate function. general multi-term models. case assumes model can split multiple independent terms can solved separately. Colossus automates splitting model simplified form, searching solution, substituting final solution simplified model full model, searching solution full model near solution simplified model.","code":""},{"path":"/articles/Alt_Distrib_Starts.html","id":"infeasible-parameter-spaces","dir":"Articles","previous_headings":"Common Convergence Issues","what":"Infeasible Parameter Spaces","title":"Distributed Start Framework","text":"risks calculated Cox Proportional Hazards Poisson model regressions generally assumed strictly positive values. use log-likelihoods scoring metric possible without assumption. However possible , regression, risk may calculated set parameters give negative probability event. illustrate consider following Poisson model. λ(α,z,β,x)=(1+α*z×exp(β×x))E(α,z,β,x,t)=λ(α,z,β,x)*t \\begin{aligned}     \\lambda(\\alpha,z, \\beta, x) = (1+\\alpha*z \\times \\exp{(\\beta \\times x)})\\\\     E(\\alpha,z, \\beta, x, t) =  \\lambda(\\alpha,z, \\beta, x) * t \\end{aligned} number events predicted interval proportional risk number person-years. exponential term always strictly positive, α\\alpha negative risk number events can also negative. Suppose several ranges parameters give negative event rates get following plot score parameter values: -2*Log-Likelihood Infeasible Points Removed plot, ranges missing data show points infeasible. goal regression reduce Log-Likelihood close 0, solution near point (−2,−2)(-2,-2). regression started near origin may end either infeasible ranges. user might catch issue -hand start regression carefully avoid infeasible ranges. Colossus can automate process sampling across range possible values automatically remove infeasible points.","code":"x <- c(-2.0, -1.667, -1.333, -1.0, -0.667, -0.333, 0.0, -2.0, -1.667, -1.333, -1.0, -0.667,        -0.333, 0.0, -2.0, -1.667, -1.333, -1.0, -0.667, -0.333, 0.0, -2.0, -1.667, -1.333,        -1.0, -0.667, -0.333, 0.0, -2.333, -2.0, -1.667, -1.333, -0.667, -0.333, 0.0, -3.0,        -2.667, -2.333, -2.0, -1.667, -0.333, 0.0, -3.0, -2.667, -2.333, -2.0, 0.0, -3.0,        -2.667, -2.333, -2.0, -1.667, -0.333, 0.0, -3.0, -2.667, -2.333, -2.0, -1.667,         -1.333, -0.667, -0.333, 0.0, -3.0, -2.667, -2.333, -2.0, -1.667, -1.333, -1.0,        -0.667, -0.333, 0.0) y <- c(-3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -2.667, -2.667, -2.667, -2.667, -2.667,        -2.667, -2.667, -2.333, -2.333, -2.333, -2.333, -2.333, -2.333, -2.333, -2.0, -2.0,        -2.0, -2.0, -2.0, -2.0, -2.0, -1.667, -1.667, -1.667, -1.667, -1.667, -1.667, -1.667,        -1.333, -1.333, -1.333, -1.333, -1.333, -1.333, -1.333, -1.0, -1.0, -1.0, -1.0,        -1.0, -0.667, -0.667, -0.667, -0.667, -0.667, -0.667, -0.667, -0.333, -0.333,        -0.333, -0.333, -0.333, -0.333, -0.333, -0.333, -0.333, 0.0, 0.0, 0.0, 0.0, 0.0,         0.0, 0.0, 0.0, 0.0, 0.0) c <- c(3.0, 3.85, 4.46, 4.896, 5.209, 5.433, 5.594, 2.278, 3.333, 4.089, 4.631, 5.019, 5.297,        5.496, 1.455, 2.744, 3.667, 4.328, 4.802, 5.142, 5.385, 0.563, 2.105, 3.209, 4.0, 4.567,        4.973, 5.264, 3.674, 2.754, 1.47, 2.754, 4.333, 4.806, 5.144, 5.315, 5.045, 4.667, 4.139,        3.403, 4.667, 5.045, 5.632, 5.487, 5.283, 5.0, 5.0, 5.824, 5.755, 5.658, 5.522, 5.333,        4.702, 5.07, 5.937, 5.912, 5.877, 5.829, 5.761, 5.667, 5.351, 5.094, 5.351, 6.0, 6.0,        6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0) dft <- data.table(\"x\"=x,\"y\"=y,\"c\"=c) g <- ggplot() + geom_point(data=dft, aes(x=.data$x, y=.data$y,     color=.data$c), size=4) +      scale_fill_continuous(guide = guide_colourbar(title=\"-2*Log-Likelihood\")) +     xlab(\"Linear Parameter\") + ylab(\"Log-Linear Parameter\") g + scale_colour_viridis_c()"},{"path":"/articles/Alt_Distrib_Starts.html","id":"provided-functions","dir":"Articles","previous_headings":"","what":"Provided Functions","title":"Distributed Start Framework","text":"use parameters respective Cox Proportional Hazards Poisson model regression functions use, addition control term listing options guessing process. “rmin” “rmax” used, remaining “_min” “_max” values used instead. “guess_constant” values take priority “rmin” “rmax” values.","code":""},{"path":"/articles/Alt_Run_Opt.html","id":"general-options","dir":"Articles","previous_headings":"","what":"General Options","title":"Alternative Regression Options","text":"Cox proportional hazards Poisson model regressions additional functions can account specific situations. general situations follows: following sections review math behind basic functions option changes .","code":""},{"path":[]},{"path":"/articles/Alt_Run_Opt.html","id":"cox-proportional-hazards","dir":"Articles","previous_headings":"Stratification","what":"Cox Proportional Hazards","title":"Alternative Regression Options","text":"Cox Proportional Hazards, Log-Likelihood calculated taking ratio hazard ratio event sum hazard ratios every row risk. defines risk group every event time intervals containing event time. Intervals assumed open left closed right, events assumed take place right end point. gives following common equation Log-Likelihood: Ll=∏(ri∑j:tj∈Rirj)δi \\begin{aligned}     Ll = \\prod_{}^{n} \\left( \\frac{r_{}}{\\sum_{j: t_j \\R_i} r_j} \\right)^{\\delta_i} \\end{aligned} r denotes hazard ratios, denominator sum hazard ratios intervals containing event time, term raised power 1 interval event 0 otherwise. Different tie methods modify denominator based order events assumed, general form still stands. goal compare event interval intervals within similar time span. Stratification adds additional condition. user stratifies covariate “F” risk group split subgroups value “F”. goal becomes compare event intervals intervals similar strata time. done remove influence stratification variables calculations. code done adding additional parameter stratification column using different function call regression.","code":"Strat_Col <- \"e\" e <- RunCoxRegression_STRATA(df, time1, time2, event, names, term_n, tform, keep_constant,                              a_n, modelform, fir, der_iden, control,Strat_Col)"},{"path":"/articles/Alt_Run_Opt.html","id":"poisson-regression","dir":"Articles","previous_headings":"Stratification","what":"Poisson Regression","title":"Alternative Regression Options","text":"Poisson model regression risk groups account , theory . remove influence stratification covariate new term added account effects. Colossus, Log-Linear term. following may model used without stratification: R=∑(xi⋅βi) \\begin{aligned}     R = \\sum_i (x_i \\cdot \\beta_i) \\end{aligned} stratified model may look like : R=(∑(xi⋅βi))×(1+exp(∑j(xj⋅βj))) \\begin{aligned}     R = (\\sum_i (x_i \\cdot \\beta_i)) \\times (1 + \\exp{(\\sum_j (x_j \\cdot \\beta_j))}) \\end{aligned} results associated non-stratified parameters returned default. average event rate calculated every strata level, weights calculated risks. code done adding list stratification columns using different function call regression. Colossus combines list stratification columns single interaction, matter user provides list combines .","code":"Strat_Col <- c(\"e\") e <-RunPoissonRegression_STRATA(df, pyr, event, names, term_n, tform, keep_constant,                                 a_n, modelform, fir, der_iden, control,Strat_Col)"},{"path":"/articles/Alt_Run_Opt.html","id":"simplified-model","dir":"Articles","previous_headings":"","what":"Simplified Model","title":"Alternative Regression Options","text":"inclusion linear subterms, additive models, multiple terms means default Colossus calculates stores every derivative assuming every value needed. equation log-linear one term, many simplifications can made. option designed make simplifications. particular one subterm type means hazard ratios derivatives can calculated directly, subterm type exponential means logarithm hazard ratio Log-Likelihood calculation simplified. tests, using simplified function able save approximately 40% time versus full code used. Assuming general parameters vignettes, code follows:","code":"e <- RunCoxRegression_Basic(df, time1, time2, event, names,                             keep_constant, a_n, der_iden, control)"},{"path":"/articles/Alt_Run_Opt.html","id":"non-derivative-calculation","dir":"Articles","previous_headings":"","what":"Non-Derivative Calculation","title":"Alternative Regression Options","text":"Colossus uses Newton’s method perform regression, can become computationally complex number terms formula increases. Colossus contains functions calculate scores parameter set, skip intensive derivative calculations. results used perform bisection method regression plot dependence score parameter values. Colossus current state use functions, left user’s convenience. code similar previous examples:","code":"e <- RunCoxRegression_Single(df, time1, time2, event, names, term_n, tform,                              a_n, modelform, fir, control)  e <- RunPoissonRegression_Single(df, pyr, event, names, term_n, tform,                                  a_n, modelform, fir, control)"},{"path":[]},{"path":"/articles/Alt_Run_Opt.html","id":"fine-grey","dir":"Articles","previous_headings":"Competing Risks","what":"Fine-Grey","title":"Alternative Regression Options","text":"Cox PH assumption every individual recorded event naturally censored, censoring rates assumed apply every individual. violated competing event occurring. sensitivity analysis two extremes can tested. Either every person competing event treated event interest instead, assumed never experience event interest. However methods find realistic alternative. Colossus applies Fine-Gray model competing risks, instead weights contribution competing event intervals future intervals probability censored. previously established, risk groups formed measure probability individual survived time experienced event interest, given experience event time: λ(t)=limΔt→0(P(t≤T≤t+Δt) (k=1),T≥t)Δt \\begin{aligned}     \\lambda(t) = \\lim_{\\Delta t \\0} \\frac{(P(t \\leq T \\leq t + \\Delta t)\\text{ }(k=1), T \\geq t)}{\\Delta t} \\end{aligned} competing risks model adjusts probability individual survived time experienced event interest, given experience event time survived previous time experienced event: λ(t)=limΔt→0(P(t≤T≤t+Δt) (k=1),(T≥t) ((T<t) (k≠1)))Δt \\begin{aligned}     \\lambda(t) = \\lim_{\\Delta t \\0} \\frac{(P(t \\leq T \\leq t + \\Delta t)\\text{ }(k=1), (T \\geq t)\\text{ }((T < t)\\text{ }(k \\neq 1)))}{\\Delta t} \\end{aligned} means risks groups contain intervals actually risk intervals competing events treated risk. assume time-dependent covariates used, remains weight contribution competing events. goal quantify probability interval uncensored new event time given uncensored competing event time. Colossus handles fitting survival curve censoring using ratio surviving proportion weight intervals. Wi(j)=min(S(tj)S(ti),1) \\begin{aligned}    W_i(j) = min \\left(\\frac{S(t_j)}{S(t_i)},1 \\right) \\end{aligned} given event time, every competing event interval right interval limit event time every interval without events right interval limit event time. competing events weighting 1 every interval weighting set 1. code, call similar standard function. process finding weighting included . example assume event column, lung, contain 0 events, 1 primary event, 2 competing event. ID column used determine individuals events censored.","code":"df$censor <- (df$lung==0) #censoring column made event <- \"censor\" #event type switched to censoring  plot_options <- list(\"name\"=\"run_2\",\"verbose\"=FALSE,\"studyID\"=\"studyID\",\"age_unit\"=\"years\") #modified plotting function used to get censoring weights dft <- GetCensWeight(df, time1, time2, event, names, term_n, tform, keep_constant,                      a_n, modelform, fir, control, plot_options) #generates a survival curve t_ref <- dft$t surv_ref <- dft$surv t_c <- df$t1 cens_weight <- approx(t_ref, surv_ref, t_c,rule=2)$y #the surviving proportions used as censoring weight event <- \"lung\" #event switched back  e <- RunCoxRegression_CR(df, time1, time2, event, names, term_n, tform, keep_constant,                          a_n, modelform, fir, der_iden, control,cens_weight)"},{"path":"/articles/Alt_Run_Opt.html","id":"poisson-joint-analysis","dir":"Articles","previous_headings":"Competing Risks","what":"Poisson Joint Analysis","title":"Alternative Regression Options","text":"dataset multiple outcomes often two ways Poisson models fit. Either multiple independent models fit events combined one model fit several events. methods limit models completely independent identical. true model may combination shared terms terms specific event, modeled methods. fit type model joint analysis method (Cologne, 2019) available Colossus. Suppose one table person-years, covariate, counts two events. Assume fitting event rate (λ\\lambda) event reason believe background rate (β\\beta) event. λy()=β*exp(μy*)λz()=β*exp(μz*) \\begin{aligned}     \\lambda_y() = \\beta*\\exp{(\\mu_y*)}\\\\     \\lambda_z() = \\beta*\\exp{(\\mu_z*)} \\end{aligned} one solve equations separately table split two tables, one event column. premise joint analysis write model can applied every event, including factor covariate select event solved . split tables can recombined multiple events can solved allowing shared event-specific parameters. λ(,αy,αz)=β*exp(μy*(*αy)+μz*(*αz)) \\begin{aligned}     \\lambda(,\\alpha_y,\\alpha_z) = \\beta*\\exp{(\\mu_y*(*\\alpha_y) + \\mu_z*(*\\alpha_z))} \\end{aligned} Colossus includes several functions apply method, function produces input joint analysis regression functions additionally run regressions. general converts table lists model parameters input regression. Colossus generally accepts series vectors describe elements model. joint analysis, Colossus instead expects lists. list expected contain vectors shared elements elements specific event. Colossus expects list names either “shared” event column names. function returns list contains combined table vectors. results used input available regression functions. Colossus also includes wrapper functions directly call Poisson model regression function. method applied Cox model assuming every event baseline hazard. However intended use, wrapper function included.","code":"a <- c(0,0,0,1,1,1) b <- c(1,1,1,2,2,2) c <- c(0,1,2,2,1,0) d <- c(1,1,0,0,1,1) e <- c(0,1,1,1,0,0) df <- data.table('t0'=a,'t1'=b,'e0'=c,'e1'=d,'fac'=e) time1 <- \"t0\" time2 <- \"t1\" df$pyr <- df$t1 - df$t0 pyr <- \"pyr\" events <- c('e0','e1') names_e0 <- c('fac') names_e1 <- c('fac') names_shared <- c('t0','t0') term_n_e0 <- c(0) term_n_e1 <- c(0) term_n_shared <- c(0,0) tform_e0 <- c(\"loglin\") tform_e1 <- c(\"loglin\") tform_shared <- c(\"quad_slope\",\"loglin_top\") keep_constant_e0 <- c(0) keep_constant_e1 <- c(0) keep_constant_shared <- c(0,0) a_n_e0 <- c(-0.1) a_n_e1 <- c(0.1) a_n_shared <- c(0.001, -0.02) name_list <- list('shared'=names_shared,'e0'=names_e0,'e1'=names_e1) term_n_list <- list('shared'=term_n_shared,'e0'=term_n_e0,'e1'=term_n_e1) tform_list <- list('shared'=tform_shared,'e0'=tform_e0,'e1'=tform_e1) keep_constant_list <- list('shared'=keep_constant_shared,                            'e0'=keep_constant_e0,'e1'=keep_constant_e1) a_n_list <- list('shared'=a_n_shared,'e0'=a_n_e0,'e1'=a_n_e1) Joint_Multiple_Events(df, events, name_list, term_n_list,                       tform_list, keep_constant_list, a_n_list) #> $df #>        t0    t1 events    e0    e1   fac   pyr fac_e0 fac_e1 #>     <num> <num>  <num> <num> <num> <num> <num>  <num>  <num> #>  1:     0     1      0     1     0     0     1      0      0 #>  2:     0     1      1     1     0     1     1      1      0 #>  3:     0     1      2     1     0     1     1      1      0 #>  4:     1     2      2     1     0     1     1      1      0 #>  5:     1     2      1     1     0     0     1      0      0 #>  6:     1     2      0     1     0     0     1      0      0 #>  7:     0     1      1     0     1     0     1      0      0 #>  8:     0     1      1     0     1     1     1      0      1 #>  9:     0     1      0     0     1     1     1      0      1 #> 10:     1     2      0     0     1     1     1      0      1 #> 11:     1     2      1     0     1     0     1      0      0 #> 12:     1     2      1     0     1     0     1      0      0 #>  #> $names #> [1] \"t0\"     \"t0\"     \"fac_e0\" \"fac_e1\" #>  #> $term_n #> [1] 0 0 0 0 #>  #> $tform #> [1] \"quad_slope\" \"loglin_top\" \"loglin\"     \"loglin\"     #>  #> $keep_constant #> [1] 0 0 0 0 #>  #> $a_n #> [1]  0.001 -0.020 -0.100  0.100 der_iden <- 0 modelform <- \"M\" fir <- 0 control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 10,'halfmax' = 5,'epsilon' = 1e-3,    'dbeta_max' = 0.5,'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1) guesses_control <- list(\"maxiter\"=10,\"guesses\"=10,\"lin_min\"=0.001,\"lin_max\"=1,     \"loglin_min\"=-1,\"loglin_max\"=1, \"lin_method\"=\"uniform\",\"loglin_method\"=\"uniform\",      strata=FALSE) Strat_Col <- 'f' RunPoissonRegression_Joint_Omnibus(df, pyr, events, name_list, term_n_list,                                         tform_list, keep_constant_list, a_n_list,                                         modelform, fir, der_iden, control,Strat_Col) #> $LogLik #> [1] -10.44542 #>  #> $First_Der #> [1]  0.0002673781 -0.0001428182  0.0004757472  0.0004853580 #>  #> $Second_Der #>           [,1]      [,2]      [,3]      [,4] #> [1,] -4.999733  0.000000 -2.404049 -2.452614 #> [2,]  0.000000 -1.000143  0.000000  0.000000 #> [3,] -2.404049  0.000000 -7.223837 -7.370253 #> [4,] -2.452614  0.000000 -7.370253 -7.519142 #>  #> $beta_0 #> [1]  0.5742600 -1.0349816 -0.0200000 -0.1647421 #>  #> $Standard_Deviation #> [1] 0.4879656 0.9999286       NaN       NaN #>  #> $AIC #> [1] 14.43602 #>  #> $BIC #> [1] 30.83046 #>  #> $Deviation #> [1] 6.436015 #>  #> $Parameter_Lists #> $Parameter_Lists$term_n #> [1] 0 0 0 0 #>  #> $Parameter_Lists$tforms #> [1] \"loglin\"     \"loglin\"     \"loglin_top\" \"quad_slope\" #>  #> $Parameter_Lists$names #> [1] \"fac_e0\" \"fac_e1\" \"t0\"     \"t0\"     #>  #>  #> $Control_List #> $Control_List$Iteration #> [1] 9 #>  #> $Control_List$`Maximum Step` #> [1] 1 #>  #> $Control_List$`Derivative Limiting` #> [1] 0.000485358 #>  #>  #> $Converged #> [1] TRUE #>  #> $Status #> [1] \"PASSED\""},{"path":"/articles/Alt_Run_Opt.html","id":"distributed-starts","dir":"Articles","previous_headings":"","what":"Distributed starts","title":"Alternative Regression Options","text":"distributed start framework built Cox proportional hazards Poisson functions allows user provide list multiple starting points. Regressions 1 guess use “maxiter” control option, regressions multiple guesses use “maxiters” control option pass list iterations per guess. default Colossus runs guess 1 iteration, picks best guess, runs full number iterations starting best guess. Advanced users can select different number iterations guess.","code":"a_n <- list(c(1,1,1),c(1,2,1),c(1,2,2),c(2,1,1))  control$maxiter <- 5 # runs each (4) starts 1 iteration, and then runs the best 5 iterations control$maxiters <- c(1,1,1,1,5) # runs each (4) starts 1 iteration, and then runs the best 5 iterations control$maxiters <- c(5,5,5,5,5) # runs each (4) starts 5 iterations, and then runs the best 5 iterations  e <- RunCoxRegression_Omnibus(df, time1, time2, event,                               names, term_n, tform, keep_constant,                               a_n, modelform,control=control)"},{"path":"/articles/Control_Options.html","id":"general-use","dir":"Articles","previous_headings":"","what":"General Use","title":"List of Control Options","text":"three control lists used Colossus user can use customize regression, three functions defined assign default values missing list items. following sections go control list, used, every item assigned means.","code":""},{"path":"/articles/Control_Options.html","id":"standard-control-list","dir":"Articles","previous_headings":"General Use","what":"Standard Control List","title":"List of Control Options","text":"“control” variable used every regression function. list focuses options control convergence criteria standard Cox proportional hazards options.","code":""},{"path":"/articles/Control_Options.html","id":"model-control-list","dir":"Articles","previous_headings":"General Use","what":"Model Control List","title":"List of Control Options","text":"“model_control” variable used primarily omnibus functions. non-omnibus functions use list select non-standard modeling options. log_bound method used, several additional control options used:","code":""},{"path":"/articles/Control_Options.html","id":"guess-control-list","dir":"Articles","previous_headings":"General Use","what":"Guess Control List","title":"List of Control Options","text":"“guesses_control” variable used distributed start functions. options used control number scope distributed initial parameter sets used.","code":""},{"path":"/articles/Dose_Formula_Inputs.html","id":"dose-response-formula","dir":"Articles","previous_headings":"","what":"Dose Response Formula","title":"Dose Response Formula Terms","text":"previously discussed, Colossus features term composed sum multiple linear non-linear term can used define many dose response curves used radiation epidemiology. terms referred dose response terms, nothing prohibiting used non-dose covariates. following formula available, reproduced starting description vignette. SNL=∑(αi×exp(xi⋅βi))+∑(βi⋅(xi)2)+∑iFLT+∑iFSTP+∑iFLQ+∑iFLEXPFLT={αi⋅(x−βi)(x>βi)0elseFSTP={αi(x>βi)0elseFLQ={βi⋅x(x>αi)λi⋅x2+νielseFLEXP={βi⋅x(x>αi)λi−exp(νi+μ⋅x)elseTj=SLL,j×SL,j×SPL,j×SNL,j \\begin{aligned}     S_{NL}=\\sum_i (\\alpha_i \\times \\exp(x_i \\cdot \\beta_i)) + \\sum_i (\\beta_i \\cdot (x_i)^2) + \\sum_i F_{LT} + \\sum_i F_{STP} + \\sum_i F_{LQ} + \\sum_i F_{LEXP}\\\\     F_{LT} = \\begin{cases} \\alpha_i \\cdot (x-\\beta_i) & (x>\\beta_i) \\\\ 0 &\\text{else} \\end{cases}\\\\     F_{STP} = \\begin{cases} \\alpha_i & (x>\\beta_i) \\\\ 0 &\\text{else} \\end{cases}\\\\     F_{LQ} = \\begin{cases} \\beta_i \\cdot x & (x>\\alpha_i) \\\\ \\lambda_i \\cdot x^2 + \\nu_i &\\text{else} \\end{cases}\\\\     F_{LEXP} = \\begin{cases} \\beta_i \\cdot x & (x>\\alpha_i) \\\\ \\lambda_i - \\exp{(\\nu_i + \\mu \\cdot x)} &\\text{else} \\end{cases}\\\\     T_j=S_{LL,j} \\times S_{L,j} \\times S_{PL,j} \\times S_{NL,j} \\end{aligned} every subterm type 1 3 parameters fully define curve. Linear-Quadratic Linear-Exponential curves continuously-differentiable, 2-3 parameters can set. λLQ=βLQ/(2αLQ)νLQ=(βLQ*αLQ)/2νLEXP=ln(βLEXP)−ln(μLEXP)+μLEXP*αLEXPλLEXP=βLEXP*αLEXP+exp(νLEXP−μLEXP*αLEXP) \\begin{aligned}     \\lambda_{LQ} = \\beta_{LQ}/(2\\alpha_{LQ})\\\\     \\nu_{LQ} = (\\beta_{LQ}*\\alpha_{LQ})/2\\\\     \\nu_{LEXP} = \\ln(\\beta_{LEXP})-\\ln(\\mu_{LEXP})+\\mu_{LEXP}*\\alpha_{LEXP}\\\\     \\lambda_{LEXP} = \\beta_{LEXP}*\\alpha_{LEXP}+exp(\\nu_{LEXP}-\\mu_{LEXP}*\\alpha_{LEXP}) \\end{aligned}","code":""},{"path":"/articles/Dose_Formula_Inputs.html","id":"using-the-different-subterms","dir":"Articles","previous_headings":"","what":"Using The Different subterms","title":"Dose Response Formula Terms","text":"linear-exponential linear-quadratic curves must either completely fixed completely free. contrast exponential, linear threshold, step function curves can partially fixed. exponential term can provided covariate exponent assume magnitude 1. linear threshold step functions can provided fixed threshold covariate, can used define linear--threshold model combination linear step functions known threshold. One issue dose response formulas order important. instance, loglin_slope listed prior loglin_top used. slope Linear Threshold Step Functions given prior intercepts. Slopes listed prior intercept Linear-Quadratic Linear-Exponential models lin_exp_exp_slope listed last. “Correct_Formula_Order” function provided handle correct order. Colossus automatically calls function prior regression.","code":"term_n <- c(0,1,1,0,0) tform <- c(\"loglin\",'quad_slope','lin', \"lin_int\", \"lin_slope\") keep_constant <- c(0,0,0,1,0) a_n <- c(1,2,3,4,5) names <- c(\"a\",\"a\",\"a\",\"a\",\"a\") val <- Correct_Formula_Order(term_n, tform, keep_constant, a_n, names) term_n <- val$term_n tform <- val$tform keep_constant <- val$keep_constant a_n <- val$a_n der_iden <- val$der_iden names <- val$names"},{"path":"/articles/Multi_Realization.html","id":"available-methods","dir":"Articles","previous_headings":"","what":"Available Methods","title":"Multiple Realization Methods","text":"many instances user may want use data known distribution, cases may sufficient use single realization. Colossus provides method run multiple regressions row, different realization. method designed assist circumstances combinations shared unshared error present, two-dimensional Monte Carlo method used generate realizations least one covariate column. Note method apply event/cases interval/duration columns.","code":""},{"path":"/articles/Multi_Realization.html","id":"specifics-of-use","dir":"Articles","previous_headings":"Available Methods","what":"Specifics of Use","title":"Multiple Realization Methods","text":"Let us suppose interested performing regression three covariates: age bin, amount exposure radioisotope interval, average sleep interval. Age bin known, exposure known distribution shared among individuals, sleep randomly distributed independent interval. λ(,r,s)=exp(βa×+βa×r+βa×s) \\begin{aligned}     \\lambda(, r, s) = \\exp{(\\beta_a \\times + \\beta_a \\times r + \\beta_a \\times s)} \\end{aligned} Colossus requires two items apply multiple realizations, list columns replace matrix columns realization. Suppose user generates 5 realizations. two distributed columns five realizations. Colossus finishes regressions realization, returns matrices final parameter estimates, standard deviations, final log-likelihoods regression. results can used create likelihood-weighted parameter distributions, account uncertainty final parameter estimates. Note strict requirement realization columns actually realizations distributed column. user use method compare models formula different covariates. difficulty Colossus refresh parameter estimates realization regressions, number iterations may increased.","code":"names <- c('a','r','s') term_n <- c(0,0,0) tform <- c(\"loglin\",\"loglin\",\"loglin\") modelform <- \"M\" fir <- 0  a_n <- c(0.1, 0.1, 0.1) dose_index <- c('r', 's') #the two columns in the model to replace are the radiation and sleeping covariates dose_realizations <- matrix(c('r0','r1','r2','r3','r4','s0','s1','s2','s3','s4'), nrow=2) #columns to be used for realizations 0-4, rows for each column being replaced"},{"path":"/articles/Plotting_And_Analysis.html","id":"example-setup","dir":"Articles","previous_headings":"","what":"Example Setup","title":"Functions for Plotting and Analysis","text":"use analysis lung dataset survival package visualize different plotting methods available Colossus.","code":"data(cancer, package=\"survival\")  df <- cancer df$UserID <- 1:nrow(df)  df$status <- df$status - 1 df$sex <- df$sex - 1  t0 <- \"%trunc%\" t1 <- \"time\" event <- \"status\"  names <- c('age',\"sex\") tform <- c(\"loglin\", \"loglin\") control <- list(\"Ncores\"=2, 'maxiter'=2, 'verbose'=0)  a_n <- c(0.01701289, -0.51256478) term_n <- c(0,0) keep_constant <- c(0,0) modelform <- 'M' fir <- 0"},{"path":"/articles/Plotting_And_Analysis.html","id":"survival-function-approximation","dir":"Articles","previous_headings":"","what":"Survival Function Approximation","title":"Functions for Plotting and Analysis","text":"fitting Cox proportional hazards model, one may interested baseline survival rate . One method weighting number events event time total risk. absence excess risk hazard point time equal event rate hazard ratio every row equal one, assumption holds case negligible excess risk. λ(t)=d[t]n[t]=d[t]∑=1n(1)=d[t]∑=1n(ri) \\begin{aligned}     \\lambda(t) = \\frac{d[t]}{n[t]} = \\frac{d[t]}{\\sum_{=1}^n(1)} = \\frac{d[t]}{\\sum_{=1}^n(r_i)} \\end{aligned} Suppose every row risk time twice likely experience event baseline. expect twice many events baseline. logic applies case every row risk half likely. generalizes average risk. Colossus allows instantaneous hazard approximated stratified non-stratified models. λ(t)=d[t]∑=1n(ri)=d[t]∑=1n(2)=d[t]/2n[t]λ(t)=d[t]∑=1n(ri)=d[t]∑=1n(0.5)=d[t]*2n[t] \\begin{aligned}      \\lambda(t) = \\frac{d[t]}{\\sum_{=1}^n(r_i)} = \\frac{d[t]}{\\sum_{=1}^n(2)} = \\frac{d[t]/2}{n[t]}\\\\      \\lambda(t) = \\frac{d[t]}{\\sum_{=1}^n(r_i)} = \\frac{d[t]}{\\sum_{=1}^n(0.5)} = \\frac{d[t]*2}{n[t]} \\end{aligned} instantaneous hazard approximated, cumulative hazard can approximated. surviving fraction approximately equal exponential negative cumulative hazard event time. Λ(t)=∫0t(λ(x)dx)S(t)=exp(−Λ(t)) \\begin{aligned}     \\Lambda(t) = \\int_0^t (\\lambda(x) dx)\\\\     S(t) = \\exp{(-\\Lambda(t))} \\end{aligned}","code":"plot_options <- list(\"type\"=c(\"surv\",paste(tempfile(),\"run\",sep=\"\")), \"studyid\"=\"UserID\",                       'verbose'=0, \"surv_curv\"=T, 'martingale'=F,'strat_haz'=F,'km'=F)  e <- RunCoxPlots(df, t0, t1, event, names, term_n, tform, keep_constant, a_n, modelform,                  fir, control, plot_options)  norm_surv <- e[['standard']]  g <- ggplot2::ggplot(norm_surv,ggplot2::aes(x=.data$t, y=.data$h)) +       ggplot2::geom_point(color=\"black\") +      ggplot2::labs(x=\"age\", y=\"Instantaneous Hazard\") g g <- ggplot2::ggplot(norm_surv,ggplot2::aes(x=.data$t, y=.data$ch)) +       ggplot2::geom_line(color=\"black\",alpha=1) +       ggplot2::labs(x=\"age\", y=\"Cumulative Hazard\") g g <- ggplot2::ggplot(norm_surv,ggplot2::aes(x=.data$t, y=.data$surv)) +       ggplot2::geom_line(color=\"black\",alpha=1) +       ggplot2::labs(x=\"age\", y=\"Surviving Fraction\") g plot_options <- list(\"type\"=c(\"surv\",paste(tempfile(),\"run\",sep=\"\")), \"studyid\"=\"UserID\",                      'verbose'=0, \"surv_curv\"=F, 'martingale'=F,'strat_haz'=F,'km'=T)  e <- RunCoxPlots(df, t0, t1, event, names, term_n, tform, keep_constant, a_n, modelform,                  fir, control, plot_options) km <- e[['kaplin-meier']] g <- ggplot2::ggplot(km,ggplot2::aes(x=.data$t_t, y=.data$n_t)) +       ggplot2::geom_line(color=\"black\",alpha=1) +      ggplot2::labs(x=\"age\", y=\"KM Survival\") g"},{"path":"/articles/Plotting_And_Analysis.html","id":"cox-proportional-hazards-model-assumptions","dir":"Articles","previous_headings":"","what":"Cox Proportional Hazards model assumptions","title":"Functions for Plotting and Analysis","text":"Cox proportional hazards model definition assumes proportional hazards independent time. violated, results regression may misleading. two functions Colossus provides can used test assumption, Schoenfeld residuals Martingale residuals. cases premise hazard ratio independent time, residuals also independent time.","code":""},{"path":"/articles/Plotting_And_Analysis.html","id":"schoenfeld-residuals","dir":"Articles","previous_headings":"Cox Proportional Hazards model assumptions","what":"Schoenfeld Residuals","title":"Functions for Plotting and Analysis","text":"Schoenfeld residuals compare average covariate value rows events risk weighted average covariate rows risk. Consistently high low residuals may due hazard much higher lower model predicts. residuals also correlated event time, hazard ratio may dependent event time. also option scale residuals standard-deviation. s(t,x)=∑∈eventsxid[t]−∑inxi*ri∑inri \\begin{aligned}     s(t,x) = \\frac{\\sum_{\\events} x_i}{d[t]} - \\frac{\\sum_i^n x_i*r_i}{\\sum_i^n r_i} \\end{aligned}","code":"plot_options <- list(\"type\"=c(\"schoenfeld\",paste(tempfile(),\"run\",sep=\"\")),                      \"studyid\"=\"UserID\", 'verbose'=0)  res_all <- RunCoxPlots(df, t0, t1, event, names, term_n, tform, keep_constant, a_n,                        modelform, fir, control, plot_options)  res_age <- res_all[['age']]  g <- ggplot2::ggplot(res_age,ggplot2::aes(x=.data$time, y=.data$y)) +     ggplot2::geom_point(color=\"black\") +     ggplot2::labs(x=paste(\"Survival Time\",sep=\"\"),     y=paste(\"Schoenfeld Residual (age)\",sep=\" \")) g g <- ggplot2::ggplot(res_age,ggplot2::aes(x=.data$time, y=.data$y_scale)) +     ggplot2::geom_point(color=\"black\") +     ggplot2::labs(x=paste(\"Survival Time\",sep=\"\"),     y=paste(\"Schoenfeld Residual Scaled (age)\",sep=\" \")) g res_sex <- res_all[['sex']]  g <- ggplot2::ggplot(res_sex,ggplot2::aes(x=.data$time, y=.data$y)) +     ggplot2::geom_point(color=\"black\") +     ggplot2::labs(x=paste(\"Survival Time\",sep=\"\"),     y=paste(\"Schoenfeld Residual (sex)\",sep=\" \")) g g <- ggplot2::ggplot(res_sex,ggplot2::aes(x=.data$time, y=.data$y_scale)) +     ggplot2::geom_point(color=\"black\") +     ggplot2::labs(x=paste(\"Survival Time\",sep=\"\"),     y=paste(\"Schoenfeld Residual Scaled (sex)\",sep=\" \")) g"},{"path":"/articles/Plotting_And_Analysis.html","id":"martingale-residuals","dir":"Articles","previous_headings":"Cox Proportional Hazards model assumptions","what":"Martingale Residuals","title":"Functions for Plotting and Analysis","text":"Martingale residuals compare event status cumulative hazard subject. residual bound open interval (−∞,1)(-\\infty, 1). Negative residuals correspond subjects survive despite high cumulative hazard residuals near unity correspond subject experienced event despite low cumulative hazard. distribution residuals event time can indicate model -predicting -predicting dependent time. mj=δj−∫t0t1λ(t)*rjdt \\begin{aligned}     m_j = \\delta_j - \\int_{t_0}^{t_1} \\lambda(t) * r_j dt \\end{aligned}","code":"plot_options <- list(\"type\"=c(\"surv\",paste(tempfile(),\"run\",sep=\"\")),                      \"studyid\"=\"UserID\", 'verbose'=0, \"surv_curv\"=F,                      'martingale'=T,'strat_haz'=F,'km'=F,'cov_cols'=c('age','sex')) res_all <- RunCoxPlots(df, t0, t1, event, names, term_n, tform, keep_constant, a_n,                        modelform, fir, control, plot_options)  res_age <- res_all[['age']]  g <- ggplot2::ggplot() + ggplot2::geom_point(data=res_age,      ggplot2::aes(x=.data$cov_max, y=.data$res_sum,group=.data$event,color=.data$event)) g <- g + ggplot2::labs(x=\"Max Age\", y=\"Martingale Residuals\") g res_sex <- res_all[['sex']] g <- ggplot2::ggplot() + ggplot2::geom_point(data=res_sex,      ggplot2::aes(x=.data$cov_max, y=.data$res_sum,group=.data$event,color=.data$event)) g <- g + ggplot2::labs(x=\"Sex\", y=\"Martingale Residuals\") g res_surv <- res_all[['survival_time']] g <- ggplot2::ggplot() + ggplot2::geom_point(data=res_surv,      ggplot2::aes(x=.data$time_max, y=.data$res_sum,group=.data$event,color=.data$event)) g <- g + ggplot2::labs(x=\"Survival Time\", y=\"Martingale Residuals\") g"},{"path":"/articles/Plotting_And_Analysis.html","id":"general-evaluation-of-risk","dir":"Articles","previous_headings":"","what":"General Evaluation of Risk","title":"Functions for Plotting and Analysis","text":"Colossus also offers scripts plot relative risk parameter value parameter model, assuming every parameter constant. parameter 10 values assumed constant.","code":"plot_options <- list(\"type\"=c(\"risk\",paste(tempfile(),\"run\",sep=\"\")), \"studyid\"=\"UserID\",                      'verbose'=0) res_all <- RunCoxPlots(df, t0, t1, event, names, term_n, tform, keep_constant, a_n,                        modelform, fir, control, plot_options)  res_age <- res_all[['age']]  g <- ggplot2::ggplot(res_age,ggplot2::aes(x=.data$x, y=.data$y)) +      ggplot2::geom_line(color=\"black\") +      ggplot2::labs(x='Age', y=\"Relative Risk\") g res_sex <- res_all[['sex']] g <- ggplot2::ggplot(res_sex,ggplot2::aes(x=.data$x, y=.data$y)) +      ggplot2::geom_point(color=\"black\") +      ggplot2::labs(x='Sex', y=\"Relative Risk\") g"},{"path":"/articles/Script_Comparison_Epicure.html","id":"introduction-to-colossus","dir":"Articles","previous_headings":"","what":"Introduction to Colossus","title":"Script comparisons with 32-bit Epicure","text":"Colossus developed context radiation epidemiologists wanting use new methods data. time development, 32-bit Epicure popular software running radiation epidemiological analysis. vignette written mind help transitioning users see two similar different, addition providing guidance converting two. script provided discuss Colossus-specific differences well general R capabilities differ Epicure.","code":""},{"path":"/articles/Script_Comparison_Epicure.html","id":"example-epicure-analysis","dir":"Articles","previous_headings":"Introduction to Colossus","what":"Example Epicure Analysis","title":"Script comparisons with 32-bit Epicure","text":"following peanuts script used part validation efforts Colossus. script runs three regressions. linear excess relative risk model, log-linear hazard ratio model dose overall, log-linear hazard ratio model categorical bins dose. script starts loading dataset. example assume file called “EX_DOSE.csv” local directory. Next script sets interval start column, interval end column, designates columns multiple levels. Past point script specifies columns belong subterm term number. case model linear element second term. script additionally sets convergence options. case maximum iterations set 100 convergence criteria set 1e-9. regression also set print deviance parameter estimate iteration, print final estimates covariance regression concludes. Finally regression run results printed console. Past point general process followed two hazard ratio regressions. model definition reset, subterm/term description set, regression run.","code":"RECORDS 4100000 @ WSOPT VARMAX 30 @ USETXT EX_DOSE.csv @ INPUT @ ENTRY age_entry @ EXIT age_exit @ EVENT nonCLL @  levels SES_CAT YOB_CAT sexm dose_cat @ LOGLINEAR 0 SES_CAT YOB_CAT sexm @ LINEAR 1 cumulative_dose @  FITOPT P V ITER 100 CONV -9 @ FIT @ NOMODEL @  LOGLINEAR 0 SES_CAT YOB_CAT sexm cumulative_dose @  FIT @  NOMODEL @  LOGLINEAR 0 SES_CAT YOB_CAT sexm dose_cat @  FIT @  NOMODEL @"},{"path":"/articles/Script_Comparison_Epicure.html","id":"colossus-script","dir":"Articles","previous_headings":"Introduction to Colossus","what":"Colossus Script","title":"Script comparisons with 32-bit Epicure","text":"part, steps performed Colossus. script starts reading input file. difference R require memory set aside prior reading file. next step defines covariates levels assigns interval/event column information. main difference Colossus currently automatically split factored columns. first several lines transform dataset include factored columns, later user list factored columns. Next script defines model control information. Colossus stores model information like columns table. expects lists column names, subterm types, term numbers, etc. case non-default values column names subterm types. “control” variable serves similar purpose “FITOPT” option Epicure. Finally regression run, list results returned variable “e”. similar process run two hazard ratio regressions.","code":"df_Dose   <- fread(\"EX_DOSE.csv\") col_list <- c(\"SES_CAT\",\"YOB_CAT\",\"dose_cat\") val <- factorize(df_Dose,col_list) df_Dose <- val$df  t0 <- \"age_entry\" t1 <- \"age_exit\" event <- \"nonCLL\" # ERR names <- c('cumulative_dose',\"SES_CAT_1\", \"SES_CAT_2\", \"YOB_CAT_1\",\"YOB_CAT_2\",\"YOB_CAT_3\",\"YOB_CAT_4\", \"sexm\") tform <- c(\"plin\",rep('loglin',length(names)-1)) control <- list(\"Ncores\"=8, 'maxiter'=50, 'verbose'=F) e <- RunCoxRegression(df_Dose, t0, t1, event, names, tform=tform, control = control) # HR names <- c('cumulative_dose',\"SES_CAT_1\", \"SES_CAT_2\", \"YOB_CAT_1\",\"YOB_CAT_2\",\"YOB_CAT_3\",\"YOB_CAT_4\", \"sexm\") tform <- rep('loglin',length(names)) e <- RunCoxRegression(df_Dose, t0, t1, event, names, tform=tform, control = control)  # Categorical names <- c('dose_cat_1','dose_cat_2','dose_cat_3','dose_cat_4','dose_cat_5','dose_cat_6', \"SES_CAT_1\", \"SES_CAT_2\", \"YOB_CAT_1\",\"YOB_CAT_2\",\"YOB_CAT_3\",\"YOB_CAT_4\", \"sexm\") tform <- rep('loglin',length(names)) e <- RunCoxRegression(df_Dose, t0, t1, event, names, tform=tform, control = control)"},{"path":[]},{"path":"/articles/Starting-Description.html","id":"model-structure","dir":"Articles","previous_headings":"","what":"Model Structure","title":"Colossus Description","text":"full potential, Colossus able analyze vast number possible risk/rate models. Specifically Colossus designed allow combination linear non-linear models estimate cox proportional hazard ratios, Poisson model rates, Fine-Grey Competing risks ratios. simplest exponential model. simplest model generally used hazard ratios survival analysis exponential linear function covariates. R(β→,x→)=exp(β→⋅x→) \\begin{aligned}     R(\\vec{\\beta},\\vec{x})=\\exp(\\vec{\\beta} \\cdot \\vec{x}) \\end{aligned} Colossus, general model extended abstracting sum product terms subterms. vignette, value calculated quantify risk event denoted risk, R, however exact meaning differs. Cox proportional hazard modeling, risk calculated hazard ratio. Poisson modeling risk calculated estimated number events per person-year. risk (RR) set formula dependent terms (TT). term formula dependent product subterms (SS). subterm function single covariate (xx) several parameters (α,β\\alpha,\\beta). currently five types risk models available. risk can expressed additive model (RAR_A), product additive model (RPAR_{PA}), Product additive excess model (RPAER_{PAE}), multiplicative excess model (RMR_M), geometric mixture model relative risks excess risks (RGMIXR_{GMIX}). RA=∑=0nTiRPA=T0×∑=1nTiRPAE=T0×(1+∑=1nTi)RM=T0×∏=1n(1+Ti)RGMIX=T0×(∏=1n(Ti*))θ×(1+∑=1n(Ti*−1))1−θTi*={TiRelative RiskTi+1Excess Risk \\begin{aligned}     R_{}= \\sum_{=0}^n T_i\\\\     R_{PA}= T_0 \\times \\sum_{=1}^n T_i\\\\     R_{PAE}= T_0 \\times (1 + \\sum_{=1}^n T_i)\\\\     R_{M}= T_0 \\times \\prod_{=1}^n( 1 + T_i)\\\\     R_{GMIX} = T_0 \\times \\left(\\prod_{=1}^n(T^{*}_i) \\right) ^ \\theta \\times \\left( 1 + \\sum_{=1}^n (T^{*}_i - 1) \\right)^{1-\\theta}\\\\     T^{*}_i = \\begin{cases} T_i &\\text{Relative Risk} \\\\ T_i+1 &\\text{Excess Risk} \\end{cases}\\\\ \\end{aligned} term composed combination 4 types subterms. Every covariate part log-linear subterm, linear subterm, product-linear subterm, general non-linear term. log-linear subterm (SLLS_{LL}) exponential linear combination covariates. linear subterm (SLS_L) linear combination covariates. product-linear subterm (SPLS_{PL}) one plus linear combination covariates. general non-linear term (SNLS_{NL}) sum exponential terms, quadratic terms, linear-threshold terms (FLTF_{LT}), step function terms (FSTPF_{STP}), linear-quadratic terms (FLQF_{LQ}), linear-exponential terms (FLEXPF_{LEXP}). term product non-empty subterms. SLL=∏(exp(xi⋅βi))SL=∑(xi⋅βi)SPL=1+∑(xi⋅βi)SNL=∑(αi×exp(xi⋅βi))+∑(βi⋅(xi)2)+∑iFLT+∑iFSTP+∑iFLQ+∑iFLEXPFLT={αi⋅(x−βi)(x>βi)0elseFSTP={αi(x>βi)0elseFLQ={βi⋅x(x>αi)λi⋅x2+νielseFLEXP={βi⋅x(x>αi)λi−exp(νi+μ⋅x)elseTj=SLL,j×SL,j×SPL,j×SNL,j \\begin{aligned}     S_{LL}=\\prod_{} (\\exp{(x_i \\cdot \\beta_i)})\\\\     S_{L}=\\sum_i (x_i \\cdot \\beta_i)\\\\     S_{PL}=1+ \\sum (x_i \\cdot \\beta_i)\\\\     S_{NL}=\\sum_i (\\alpha_i \\times \\exp(x_i \\cdot \\beta_i)) + \\sum_i (\\beta_i \\cdot (x_i)^2) + \\sum_i F_{LT} + \\sum_i F_{STP} + \\sum_i F_{LQ} + \\sum_i F_{LEXP}\\\\     F_{LT} = \\begin{cases} \\alpha_i \\cdot (x-\\beta_i) & (x>\\beta_i) \\\\ 0 &\\text{else} \\end{cases}\\\\     F_{STP} = \\begin{cases} \\alpha_i & (x>\\beta_i) \\\\ 0 &\\text{else} \\end{cases}\\\\     F_{LQ} = \\begin{cases} \\beta_i \\cdot x & (x>\\alpha_i) \\\\ \\lambda_i \\cdot x^2 + \\nu_i &\\text{else} \\end{cases}\\\\     F_{LEXP} = \\begin{cases} \\beta_i \\cdot x & (x>\\alpha_i) \\\\ \\lambda_i - \\exp{(\\nu_i + \\mu \\cdot x)} &\\text{else} \\end{cases}\\\\     T_j=S_{LL,j} \\times S_{L,j} \\times S_{PL,j} \\times S_{NL,j} \\end{aligned} short, every element risk model subterm type, term number, covariate, parameter value.","code":""},{"path":"/articles/Starting-Description.html","id":"using-the-standard-model","dir":"Articles","previous_headings":"","what":"Using The Standard Model","title":"Colossus Description","text":"Colossus every equation defined similar fashion. user side code, elements risk equation can viewed rows table. columns store covariate names, term numbers, subterms types, starting point. complex regression parameters can also set remain constant regression. forces parameter value remain constant remove element risk calculations. Constant elements used risk calculation, used calculating steps standard deviations. multiplicative excess risk model following table equation equivalent. R=exp(βa⋅xa)×(1+βb⋅xb+βc⋅xc) \\begin{aligned}     R = \\exp{(\\beta_{} \\cdot x_{})} \\times (1+\\beta_{b} \\cdot x_{b} + \\beta_{c} \\cdot x_{c}) \\end{aligned} user wanted update model include new term product-linear subterm, table need updated new row. R=exp(βa⋅xa)×(1+(βb⋅xb+βc⋅xc))×(2+βd⋅xd) \\begin{aligned}     R = \\exp{(\\beta_{} \\cdot x_{})} \\times (1 + (\\beta_{b} \\cdot x_{b} + \\beta_{c} \\cdot x_{c})) \\times (2 + \\beta_{d} \\cdot x_{d}) \\end{aligned} Note multiplicative model taking product terms, product subterms. equation may written subterms distributed different terms multiplicative model without changing final value. exception subterms moved “first” term multiplicative excess model. equation expressed ways different computational complexity. specific model options passed code separate variables. model identifier (, M, PA, PAE, GMIX) passed string. Every model except additive model distinction first remaining terms. Colossus defaults term 0 unique term, however can set used term number without producing error. final table also equivalent following code names denotes column names used, term_n denotes term numbers, tform denotes subterm formula, modelform denotes term formula, fir denotes “first” term indexed zero defaults 0, a_n denotes initial guesses parameter values. assumed order. function called prior regression reorders inputs order terms, subterm types, etc.","code":"names <- c('a','b','c','d') term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  a_n <- c(0.1, 0.1, 0.1, 0.1)"},{"path":"/articles/Starting-Description.html","id":"survival-time-and-event-data","dir":"Articles","previous_headings":"","what":"Survival Time and Event Data","title":"Colossus Description","text":"Colossus performs survival analysis via either Cox Proportional Hazards Poisson model regression. cases user specifies columns contain time duration events interest. Poisson model regression column contains person-years number events row data. Cox Proportional Hazards regression user identifies columns provide starting ending times, column gives event status. event status assumed binary covariate 1 intervals containing event. Colossus supports left censored data, right censored data, interval censored data. data interval censored default, left right censoring handled defining interval endpoints outside minimum maximum event times. Poisson model regression user provides columns person-years per row number events. Poisson model regression supports non-negative number events. user side, names columns containing time events need given. Lets assume dataframe organized follows: Cox Proportional Hazard need provide three column names: starting age, ending age, event happened interval. case “Starting_Age”, “Ending_Age”, “Cancer_Status”. example interval data, however may always case. Colossus designed allow user input “%trunc%” -place missing side interval. Colossus assumes means person missing endpoint outside available data range creates dummy column reference interval endpoint. code variables look like : Suppose instead interested Poisson model regression, difference instead providing interval endpoints give column interval lengths. case need define new column, may case general. Suppose now working following table: just provide duration column event column, “Person_Years” “Cancer_Status”. code looks like following:","code":"df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\"  # Supposing we had left truncated data the following would change time1 <- \"Starting_Age\" time2 <- \"%trunc%\"  # and with right truncated data the following is used time1 <- \"%trunc%\" time2 <- \"Ending_Age\"  #setting back to normal time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" df$Person_Years <- df$Ending_Age -df$Starting_Age pyr <- \"Person_Years\" event <- \"Cancer_Status\""},{"path":"/articles/Starting-Description.html","id":"control-and-verbosity","dir":"Articles","previous_headings":"","what":"Control and Verbosity","title":"Colossus Description","text":"Colossus offers several options control input data used returned. can split two general categories. first category convergence parameters. cover number iterations used, limits parameter changes, stopping criteria. second category parameters used debugging additional information. common option verbosity. verbose mode prints time-steps intermediate values sum terms, sum risks, log-likelihood iteration. less common option der_iden parameter, used change one parameter time set amount. used debugging process recording intermediate values plane. option used user conjunction verbose option plot intermediate values parameter value. convergence parameters currently supported general follows: additional information parameters currently supported follows: previous options contained within list parameters, however additional standalone parameters control convergence information. follows: Going back example, code may look like following: example, parameters held constant, 100 iterations 5 half-steps used, regression performed matrix step solutions, breslow’s method tied event times used. errors unused control parameters used, simply ignored. Every commonly required control parameter default value automatically used declared. includes optional list model control options. used nonstandard model options covered vignette.","code":"keep_constant <- c(0,0,0,0) der_iden <- 0  control=list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 100,'halfmax' = 5,'epsilon' = 1e-9,              'dbeta_max' = 0.5,'deriv_epsilon' = 1e-9, 'abs_max'=1.0,'change_all'=TRUE,              'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1)"},{"path":"/articles/Starting-Description.html","id":"running-the-regression-and-output","dir":"Articles","previous_headings":"","what":"Running the Regression and Output","title":"Colossus Description","text":"Finally user calls regression function need. names used throughout vignette defaults assumed. Cox PH regression Poisson model regression called directly return list results. Colossus contains suite additional checks runs inputs prior starting calculations, designed output explicit details issues. Printing error details may require verbose option TRUE. code functions called follows: following output: cases, regressions converge. Given examples arbitrary unexpected. Cox PH ran iterations decrease step limit, restarted new optimal guess expected continue converging. Poisson model regression exited due step limit threshold, means hit local optimum. find better solution user likely either change model equation provide new starting guess. example interpret results Colossus run. additional variants functions described outside section. return similar list results.","code":"# assuming the table of covariates is stored in a data.table \"df\"  e <- RunCoxRegression(df, time1, time2, event, names, term_n, tform, keep_constant,                       a_n, modelform, fir, der_iden, control) print(e) #> $LogLik #> [1] -0.6753644 #>  #> $First_Der #> [1]  0.000000e+00 -7.187040e-05  7.361232e-05  1.919948e-04 #>  #> $Second_Der #>              [,1]         [,2]          [,3]          [,4] #> [1,] 0.000000e+00 0.000000e+00  0.000000e+00  4.965508e-19 #> [2,] 0.000000e+00 1.742209e-08  7.238366e-07  2.311365e-07 #> [3,] 0.000000e+00 7.238366e-07 -1.501037e-06 -2.356033e-07 #> [4,] 4.965508e-19 2.311365e-07 -2.356033e-07 -3.687577e-06 #>  #> $beta_0 #> [1]  41.26157  98.72266  96.82311 101.10000 #>  #> $Standard_Deviation #> [1]      NaN      NaN 177.9643   0.0000 #>  #> $AIC #> [1] 9.350729 #>  #> $BIC #> [1] 8.517767 #>  #> $Parameter_Lists #> $Parameter_Lists$term_n #> [1] 0 1 1 2 #>  #> $Parameter_Lists$tforms #> [1] \"loglin\" \"lin\"    \"lin\"    \"plin\"   #>  #> $Parameter_Lists$names #> [1] \"a\" \"b\" \"c\" \"d\" #>  #>  #> $Control_List #> $Control_List$Iteration #> [1] 100 #>  #> $Control_List$`Maximum Step` #> [1] 1 #>  #> $Control_List$`Derivative Limiting` #> [1] 0.0001919948 #>  #>  #> $Converged #> [1] FALSE #>  #> $Status #> [1] \"PASSED\"  #or a Poisson model regression a_n <- c(0.1, 0.1, 0.1, 0.1) #a_n is updated when either regression is called e <- RunPoissonRegression(df, pyr, event, names, term_n, tform, keep_constant, a_n,                           modelform, fir, der_iden, control) print(e) #> $LogLik #> [1] -44.73982 #>  #> $First_Der #> [1]   -19.67462  -290.53655 -2314.56447   -19.64770 #>  #> $Second_Der #>              [,1]      [,2]        [,3]          [,4] #> [1,]   -21.674624 -153.3672  -1393.0153    -4.8644043 #> [2,]  -153.367172 -108.7036   -666.9745  -101.9254174 #> [3,] -1393.015328 -666.9745 -21096.6437 -1058.8112374 #> [4,]    -4.864404 -101.9254  -1058.8112    -0.5929361 #>  #> $beta_0 #> [1] -0.40680015 -0.01846667 -0.07585910 -0.70133825 #>  #> $Standard_Deviation #> [1] 0.383529879 0.092209643 0.008136992 0.535536589 #>  #> $AIC #> [1] 93.47964 #>  #> $BIC #> [1] 97.26328 #>  #> $Deviation #> [1] 85.47964 #>  #> $Parameter_Lists #> $Parameter_Lists$term_n #> [1] 0 1 1 2 #>  #> $Parameter_Lists$tforms #> [1] \"loglin\" \"lin\"    \"lin\"    \"plin\"   #>  #> $Parameter_Lists$names #> [1] \"a\" \"b\" \"c\" \"d\" #>  #>  #> $Control_List #> $Control_List$Iteration #> [1] 12 #>  #> $Control_List$`Maximum Step` #> [1] 2.910383e-11 #>  #> $Control_List$`Derivative Limiting` #> [1] 2314.564 #>  #>  #> $Converged #> [1] FALSE #>  #> $Status #> [1] \"PASSED\""},{"path":"/articles/Time_Dep_Cov.html","id":"general-usage","dir":"Articles","previous_headings":"","what":"General Usage","title":"Time Dependent Covariate Use","text":"Cox Proportional Hazards regression, model generally assumed independent event time. However complex models, Colossus capability perform regression using covariates change time. can split two general types covariates, step functions changing time multiplicative interactions time. Colossus generates new dataset splitting row original dataset smaller intervals. assumes interval values every covariate approximately constant. Cox Proportional Hazards, rows contain event time used regression, Colossus option use small intervals around event time. option time dependent covariate evaluated event times. data-sets small number discrete event times can save memory.","code":""},{"path":"/articles/Time_Dep_Cov.html","id":"multiplicative-interaction","dir":"Articles","previous_headings":"","what":"Multiplicative Interaction","title":"Time Dependent Covariate Use","text":"simplest type time dependent covariate interaction term time another covariate. Suppose row dataset factor covariate “group” arbitrary endpoints time interval. Colossus starts using user provided function calculate value time dependent covariate endpoints. assume value “group” constant interval time changing linearly. Colossus calculates value time dependent covariate intervals linearly interpolating value endpoints. process assumes interaction linear interval small enough interaction approximately linear. Linear Interpolated Function Y(x)=x2+1 \\begin{aligned}     Y(x)=x^2 + 1 \\end{aligned} helpful situation user continuous data series intervals believes values can interpolated within interval.","code":"dft <- data.table(\"x\"=c(1,2,3),\"y\"=c(2,5,10)) g <- ggplot2::ggplot(dft,ggplot2::aes(x=.data$x, y=.data$y)) +       ggplot2::geom_point(color=\"black\") +       ggplot2::geom_line(color=\"black\",alpha=1) +       ggplot2::labs(x=\"age (days)\", y=\"Covariate Value\") x <- seq(1,3,by=0.1) y <- 1+x^2 dft <- data.table(\"x\"=x,\"y\"=y) g <- g + ggplot2::geom_line(data=dft, ggplot2::aes(x=.data$x, y=.data$y),                             color=\"black\",linetype = \"dashed\") g"},{"path":"/articles/Time_Dep_Cov.html","id":"step-function-interaction","dir":"Articles","previous_headings":"","what":"Step Function Interaction","title":"Time Dependent Covariate Use","text":"second type time dependent covariate one changes based conditional statements. One example covariate split data bins time. Colossus uses string identify change value. user inputs string form “#l?” time value “#”, condition “l”, question mark delimiter. Colossus allows four conditions: l: less equal g: greater equal : strictly b: strictly following equivalent “0g?6g?12g?0g?6g?12g?” Monotonic Step Function Applied Y(x)={0(x<0)1(x≥0)2(x≥6)3(x≥12) \\begin{aligned}     Y(x)=\\begin{cases} 0 &(x < 0) \\\\ 1 & (x \\ge 0) \\\\ 2 &(x \\ge 6) \\\\ 3 &(x \\ge 12) \\end{cases}\\\\ \\end{aligned} Meanwhile following equivalent “0g?6g?12l?0g?6g?12l?” Step Function Applied Y(x)={1(x<0)2(x≥0)3(x≥6)2(x≥12) \\begin{aligned}     Y(x)=\\begin{cases} 1 &(x < 0) \\\\ 2 & (x \\ge 0) \\\\ 3 &(x \\ge 6) \\\\ 2 &(x \\ge 12) \\end{cases}\\\\ \\end{aligned} helpful situations user reason believe effect covariate events uniform time despite covariate constant interval. allows user generate list factors interact covariate interest.","code":"dft <- data.table(\"x\"=c(-1,1,5,8,13),\"y\"=c(0,1,1,2,3)) g <- ggplot2::ggplot(dft,ggplot2::aes(x=.data$x, y=.data$y)) +      ggplot2::geom_point(color=\"black\") dft <- data.table(\"x\"=c(-1,-0.01,0,1,5.99,6,11.99,12,13),\"y\"=c(0,0,1,1,1,2,2,3,3)) g <- g + ggplot2::geom_line(data=dft, ggplot2::aes(x=.data$x, y=.data$y), color=\"black\") +          ggplot2::labs(x=\"age (days)\", y=\"Covariate Value\") g dft <- data.table(\"x\"=c(-1,1,5,8,13),\"y\"=c(1,2,2,3,2)) g <- ggplot2::ggplot(dft,ggplot2::aes(x=.data$x, y=.data$y)) +      ggplot2::geom_point(color=\"black\") dft <- data.table(\"x\"=c(-1,-0.01,0,1,5.99,6,11.99,12,13),\"y\"=c(1,1,2,2,2,3,3,2,2)) g <- g + ggplot2::geom_line(data=dft, ggplot2::aes(x=.data$x, y=.data$y), color=\"black\") +          ggplot2::labs(x=\"age (days)\", y=\"Covariate Value\") g"},{"path":"/articles/Wald_and_Log_Bound.html","id":"available-methods","dir":"Articles","previous_headings":"","what":"Available Methods","title":"Confidence Interval Selection","text":"Colossus supports two methods calculating confidence interval model parameters Cox proportional hazards models. Wald method likelihood-based bound method. vignette focused differences issues may arise.","code":""},{"path":"/articles/Wald_and_Log_Bound.html","id":"wald-method","dir":"Articles","previous_headings":"Available Methods","what":"Wald Method","title":"Confidence Interval Selection","text":"Colossus finishes Cox regression, returns parameter estimates standard errors. simplest form confidence interval assuming normal distribution parameter mean deviation. standard errors calculated covariance matrix, calculated negative inverse information matrix (II) equal second derivative Log-Likelihood. ≈∂2LL∂β→2\\begin{gather}     \\approx \\frac{\\partial^2 LL}{\\partial \\vec{\\beta}^2} \\end{gather} every row (ii) event (δi=1\\delta_i=1) second derivative function relative risk derivatives event row (,BA, B) sum relative risks derivatives every row risk (C,D,EC, D, E) based rows risk group (l∈Ril \\R_i). ∂2LL∂β→j∂β→k=∑=0N(δi((Ai,j,k−Bi,j*Bi,k)−(Ci,j,k−Di,j*Di,k)))Ai,j,k=∂2ri∂β→j∂β→kri,Bi,j=∂ri∂β→jriCi,j,k=∑l∈Ri∂2rl∂β→j∂β→kEi,Di,j=∑l∈Ri∂rl∂β→jEi,Ei=∑l∈Rirl\\begin{gather}     \\frac{\\partial^2 LL}{\\partial \\vec{\\beta}_j \\partial \\vec{\\beta}_k} = \\sum_{=0}^N \\left( \\delta_i \\left( (A_{,j,k} - B_{,j}*B_{,k} ) - (C_{,j,k} - D_{,j}*D_{,k} )  \\right)\\right)\\\\     A_{,j,k} = \\frac{\\frac{\\partial^2 r_i}{\\partial \\vec{\\beta}_j \\partial \\vec{\\beta}_k}}{r_i}, B_{,j} = \\frac{\\frac{\\partial r_i}{\\partial \\vec{\\beta}_j}}{r_i}\\\\     C_{,j,k} = \\frac{\\sum_{l \\R_i} \\frac{\\partial^2 r_l}{\\partial \\vec{\\beta}_j \\partial \\vec{\\beta}_k}}{E_i}, D_{,j} = \\frac{\\sum_{l \\R_i} \\frac{\\partial r_l}{\\partial \\vec{\\beta}_j}}{E_i}, E_{} = \\sum_{l \\R_i} r_l \\end{gather} gives symmetric parameter confidence interval often accurate single term log-linear models. However approximation often inaccurate models linear effects, particularly confidence interval includes negative values. Wald method approximates likelihood confidence interval, guarantee model defined interval.","code":""},{"path":"/articles/Wald_and_Log_Bound.html","id":"likelihood-based-bound","dir":"Articles","previous_headings":"Available Methods","what":"Likelihood-Based Bound","title":"Confidence Interval Selection","text":"exact solution directly solve boundary. basic premise model can optimized parameter (β\\beta) fixed. value β\\beta corresponding maximum log-likelihood. confidence interval range values β\\beta maximum log-likelihood threshold, taken asymptotic χ2\\chi^2 distribution generalized likelihood ratio test. Colossus uses Venzon-Moolgavkar algorithm iteratively solve interval endpoints. one main issues can arise method. algorithm uses Newton-Raphson algorithm, may solve local solutions instead global solution. Similar general Colossus regressions, limitations can placed step size limit effects. However, analogue selecting multiple starting locations. basis ongoing work code alternative can directly solve true optimum. method directly solves confidence interval, linear cases may non-symmetric even upper lower bounds. Linear models may defined parameter threshold. optimum value parameter threshold χ2\\chi^2 threshold value, interval lower bound.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eric Giunta. Author, maintainer. Amir Bahadori. Contributor. Dan Andresen. Contributor. Linda Walsh. Contributor. Benjamin French. Contributor. Lawrence Dauer. Contributor. John Boice Jr. Contributor. Kansas State University. Copyright holder. NASA. Funder. NCRP. Funder. NRC. Funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Giunta E, Bahadori , Andresen D, Walsh L, French B, Dauer L, Boice Jr J (2024). Colossus: Risk Model Regression Analysis Complex Non-Linear Models. https://github.com/ericgiunta/Colossus. Giunta E, Stutzman D, Cohen S, French B, Walsh L, Dauer L, Boice Jr J, Blattnig S, Andresen D, Bahadori (2024). “Colossus: Software radiation epidemiologic studies big data.” https://burkclients.com/IRPA/2024/site/welcome.html.","code":"@Manual{,   title = {Colossus: Risk Model Regression and Analysis with Complex Non-Linear Models},   author = {Eric Giunta and Amir Bahadori and Dan Andresen and Linda Walsh and Benjamin French and Lawrence Dauer and John {Boice Jr}},   year = {2024},   url = {https://github.com/ericgiunta/Colossus}, } @Misc{,   title = {Colossus: Software for radiation epidemiologic studies with big data},   author = {Eric Giunta and Dawson Stutzman and Sarah Cohen and Benjamin French and Linda Walsh and Lawrence Dauer and John {Boice Jr} and Steve Blattnig and Dan Andresen and Amir Bahadori},   year = {2024},   url = {https://burkclients.com/IRPA/2024/site/welcome.html},   publisher = {IRPA 16}, }"},{"path":"/index.html","id":"colossus","dir":"","previous_headings":"","what":"","title":"","text":"goal Colossus provide open-source means performing survival analysis big data complex risk formula. Colossus designed perform Cox Proportional Hazard regressions Poisson regressions datasets loaded data.tables data.frames. risk models allowed sums products linear, log-linear, several radiation dose response formula highlighted vignettes. Additional plotting capabilities available. default fully portable version code compiled, support OpenMP every system. Please consult GitHub details libraries required OS interested using OpenMP linux. Note Colossus requires OpenMP support perform parallel calculations. configuration stage installation, text starting “CONFIG NOTE” denote OS/Compiler detected OpenMP support configured. Currently OpenMP support configured linux compiling clang MacOS systems.","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"","text":"basic example shows solve common problem:","code":"library(data.table) library(parallel) library(Colossus) ## basic example code reproduced from the starting-description vignette  df <- data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\"  names <- c('a','b','c','d') term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  a_n <- c(0.1, 0.1, 0.1, 0.1)  keep_constant <- c(0,0,0,0) der_iden <- 0  control=list('lr' = 0.75,'maxiter' = 100,'halfmax' = 5,'epsilon' = 1e-9,              'dbeta_max' = 0.5,'deriv_epsilon' = 1e-9, 'abs_max'=1.0,              'change_all'=TRUE,'dose_abs_max'=100.0,'verbose'=FALSE,              'ties'='breslow','double_step'=1)  e <- RunCoxRegression(df, time1, time2, event, names, term_n, tform, keep_constant, a_n, modelform, fir, der_iden, control) print(e) #> $LogLik #> [1] -0.6753644 #>  #> $First_Der #> [1]  0.000000e+00 -7.187040e-05  7.361232e-05  1.919948e-04 #>  #> $Second_Der #>              [,1]         [,2]          [,3]          [,4] #> [1,] 0.000000e+00 0.000000e+00  0.000000e+00  4.965508e-19 #> [2,] 0.000000e+00 1.742209e-08  7.238366e-07  2.311365e-07 #> [3,] 0.000000e+00 7.238366e-07 -1.501037e-06 -2.356033e-07 #> [4,] 4.965508e-19 2.311365e-07 -2.356033e-07 -3.687577e-06 #>  #> $beta_0 #> [1]  41.26157  98.72266  96.82311 101.10000 #>  #> $Standard_Deviation #> [1]      NaN      NaN 177.9643   0.0000 #>  #> $AIC #> [1] 9.350729 #>  #> $BIC #> [1] 8.517767 #>  #> $Parameter_Lists #> $Parameter_Lists$term_n #> [1] 0 1 1 2 #>  #> $Parameter_Lists$tforms #> [1] \"loglin\" \"lin\"    \"lin\"    \"plin\"   #>  #> $Parameter_Lists$names #> [1] \"a\" \"b\" \"c\" \"d\" #>  #>  #> $Control_List #> $Control_List$Iteration #> [1] 100 #>  #> $Control_List$`Maximum Step` #> [1] 1 #>  #> $Control_List$`Derivative Limiting` #> [1] 0.0001919948 #>  #>  #> $Converged #> [1] FALSE"},{"path":"/reference/Check_Dupe_Columns.html","id":null,"dir":"Reference","previous_headings":"","what":"checks for duplicated column names — Check_Dupe_Columns","title":"checks for duplicated column names — Check_Dupe_Columns","text":"Check_Dupe_Columns checks duplicated columns, columns values, columns single value. Currently updated multi-terms","code":""},{"path":"/reference/Check_Dupe_Columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checks for duplicated column names — Check_Dupe_Columns","text":"","code":"Check_Dupe_Columns(df, cols, term_n, verbose = 0, factor_check = FALSE)"},{"path":"/reference/Check_Dupe_Columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checks for duplicated column names — Check_Dupe_Columns","text":"df data.table containing columns interest cols columns check term_n term numbers element model verbose integer valued 0-4 controlling information printed terminal. level includes lower levels. 0: silent, 1: errors printed, 2: warnings printed, 3: notes printed, 4: debug information printed. Errors situations stop regression, warnings situations assume default values user might intended, notes provide information regression progress, debug prints C++ progress intermediate results. default level 2 True/False converted 3/0. factor_check boolean used skip comparing columns form ?_? initial string, used factored columns","code":""},{"path":"/reference/Check_Dupe_Columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checks for duplicated column names — Check_Dupe_Columns","text":"returns usable columns","code":""},{"path":[]},{"path":"/reference/Check_Dupe_Columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"checks for duplicated column names — Check_Dupe_Columns","text":"","code":"library(data.table) a <- c(0,1,2,3,4,5,6) b <- c(1,2,3,4,5,6,7) c <- c(0,1,2,1,0,1,0) df <- data.table::data.table(\"a\"=a,\"b\"=b,\"c\"=c) cols <- c(\"a\",\"b\",\"c\") term_n <- c(0,0,1) unique_cols <- Check_Dupe_Columns(df, cols, term_n)"},{"path":"/reference/Check_Trunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies time duration truncation limits to create columns for Cox model — Check_Trunc","title":"Applies time duration truncation limits to create columns for Cox model — Check_Trunc","text":"Check_Trunc creates columns use truncation","code":""},{"path":"/reference/Check_Trunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies time duration truncation limits to create columns for Cox model — Check_Trunc","text":"","code":"Check_Trunc(df, ce, verbose = 0)"},{"path":"/reference/Check_Trunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies time duration truncation limits to create columns for Cox model — Check_Trunc","text":"df data.table containing columns interest ce columns check truncation, (t0, t1, event) verbose integer valued 0-4 controlling information printed terminal. level includes lower levels. 0: silent, 1: errors printed, 2: warnings printed, 3: notes printed, 4: debug information printed. Errors situations stop regression, warnings situations assume default values user might intended, notes provide information regression progress, debug prints C++ progress intermediate results. default level 2 True/False converted 3/0.","code":""},{"path":"/reference/Check_Trunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies time duration truncation limits to create columns for Cox model — Check_Trunc","text":"returns updated data time period columns","code":""},{"path":[]},{"path":"/reference/Check_Trunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Applies time duration truncation limits to create columns for Cox model — Check_Trunc","text":"","code":"library(data.table)  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" ce <- c(\"%trunc%\",\"Ending_Age\") val <- Check_Trunc(df, ce) df <- val$df ce <- val$ce"},{"path":"/reference/Check_Verbose.html","id":null,"dir":"Reference","previous_headings":"","what":"General purpose verbosity check — Check_Verbose","title":"General purpose verbosity check — Check_Verbose","text":"Check_Verbose checks assigns verbosity values","code":""},{"path":"/reference/Check_Verbose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General purpose verbosity check — Check_Verbose","text":"","code":"Check_Verbose(verbose)"},{"path":"/reference/Check_Verbose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General purpose verbosity check — Check_Verbose","text":"verbose integer valued 0-4 controlling information printed terminal. level includes lower levels. 0: silent, 1: errors printed, 2: warnings printed, 3: notes printed, 4: debug information printed. Errors situations stop regression, warnings situations assume default values user might intended, notes provide information regression progress, debug prints C++ progress intermediate results. default level 2 True/False converted 3/0.","code":""},{"path":"/reference/Check_Verbose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General purpose verbosity check — Check_Verbose","text":"returns correct verbose value","code":""},{"path":[]},{"path":"/reference/Correct_Formula_Order.html","id":null,"dir":"Reference","previous_headings":"","what":"Corrects the order of terms/formula/etc — Correct_Formula_Order","title":"Corrects the order of terms/formula/etc — Correct_Formula_Order","text":"Correct_Formula_Order checks order formulas given corrects ordering issues, orders alphabetically, term number, etc.","code":""},{"path":"/reference/Correct_Formula_Order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Corrects the order of terms/formula/etc — Correct_Formula_Order","text":"","code":"Correct_Formula_Order(   term_n,   tform,   keep_constant,   a_n,   names,   der_iden = 0,   cons_mat = matrix(c(0)),   cons_vec = c(0),   verbose = FALSE,   model_control = list(para_number = 0) )"},{"path":"/reference/Correct_Formula_Order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Corrects the order of terms/formula/etc — Correct_Formula_Order","text":"term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. names columns elements model, used identify data columns der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 cons_mat Matrix containing coefficients system linear constraints, formatted matrix cons_vec Vector containing constants system linear constraints, formatted vector verbose integer valued 0-4 controlling information printed terminal. level includes lower levels. 0: silent, 1: errors printed, 2: warnings printed, 3: notes printed, 4: debug information printed. Errors situations stop regression, warnings situations assume default values user might intended, notes provide information regression progress, debug prints C++ progress intermediate results. default level 2 True/False converted 3/0. model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details","code":""},{"path":"/reference/Correct_Formula_Order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Corrects the order of terms/formula/etc — Correct_Formula_Order","text":"returns corrected lists","code":""},{"path":[]},{"path":"/reference/Correct_Formula_Order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Corrects the order of terms/formula/etc — Correct_Formula_Order","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  term_n <- c(0,1,1,0,0) tform <- c(\"loglin\",'quad_slope','lin', \"lin_int\", \"lin_slope\") keep_constant <- c(0,0,0,1,0) a_n <- c(1,2,3,4,5) names <- c(\"a\",\"a\",\"a\",\"a\",\"a\") val <- Correct_Formula_Order(term_n, tform, keep_constant,                              a_n, names, cons_mat=matrix(c(0)),                              cons_vec=c(0)) term_n <- val$term_n tform <- val$tform keep_constant <- val$keep_constant a_n <- val$a_n der_iden <- val$der_iden names <- val$names"},{"path":"/reference/Cox_Relative_Risk.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates hazard ratios for a reference vector — Cox_Relative_Risk","title":"Calculates hazard ratios for a reference vector — Cox_Relative_Risk","text":"RunCoxRegression uses user provided data,  vectors specifying model, options calculate relative risk every row provided data","code":""},{"path":"/reference/Cox_Relative_Risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates hazard ratios for a reference vector — Cox_Relative_Risk","text":"","code":"Cox_Relative_Risk(   df,   time1 = \"start\",   time2 = \"end\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   control = list(),   model_control = list() )"},{"path":"/reference/Cox_Relative_Risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates hazard ratios for a reference vector — Cox_Relative_Risk","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details","code":""},{"path":"/reference/Cox_Relative_Risk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates hazard ratios for a reference vector — Cox_Relative_Risk","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/Cox_Relative_Risk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates hazard ratios for a reference vector — Cox_Relative_Risk","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') term_n <- c(0,1,1,2) fir <- 0 tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" a_n <- c(1.1, 0.1, 0.2, 0.5) #used to test at a specific point  keep_constant <- c(0,0,0,0)  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,    'epsilon' = 1e-3,    'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1)  e <- Cox_Relative_Risk(df, time1, time2, event, names, term_n, tform,      keep_constant, a_n, modelform, fir, control)"},{"path":"/reference/Date_Shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Automates creating a date difference column — Date_Shift","title":"Automates creating a date difference column — Date_Shift","text":"Date_Shift generates new dataframe column containing time difference given unit","code":""},{"path":"/reference/Date_Shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automates creating a date difference column — Date_Shift","text":"","code":"Date_Shift(df, dcol0, dcol1, col_name, units = \"days\")"},{"path":"/reference/Date_Shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automates creating a date difference column — Date_Shift","text":"df data.table containing columns interest dcol0 list starting month, day, year dcol1 list ending month, day, year col_name vector new column names units time unit use","code":""},{"path":"/reference/Date_Shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automates creating a date difference column — Date_Shift","text":"returns updated dataframe","code":""},{"path":[]},{"path":"/reference/Date_Shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automates creating a date difference column — Date_Shift","text":"","code":"library(data.table) m0 <- c(1,1,2,2) m1 <- c(2,2,3,3) d0 <- c(1,2,3,4) d1 <- c(6,7,8,9) y0 <- c(1990,1991,1997,1998) y1 <- c(2001,2003,2005,2006) df <- data.table::data.table(\"m0\"=m0,\"m1\"=m1,\"d0\"=d0,\"d1\"=d1,\"y0\"=y0,\"y1\"=y1) df <- Date_Shift(df,c(\"m0\",\"d0\",\"y0\"),c(\"m1\",\"d1\",\"y1\"),\"date_since\")"},{"path":"/reference/Def_Control.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically assigns missing control values — Def_Control","title":"Automatically assigns missing control values — Def_Control","text":"Def_Control checks assigns default values","code":""},{"path":"/reference/Def_Control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically assigns missing control values — Def_Control","text":"","code":"Def_Control(control)"},{"path":"/reference/Def_Control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically assigns missing control values — Def_Control","text":"control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\")","code":""},{"path":"/reference/Def_Control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically assigns missing control values — Def_Control","text":"returns filled list","code":""},{"path":[]},{"path":"/reference/Def_Control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically assigns missing control values — Def_Control","text":"","code":"library(data.table) control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5, 'ties'='breslow','double_step'=1) control <- Def_Control(control)"},{"path":"/reference/Def_Control_Guess.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically assigns missing guessing control values — Def_Control_Guess","title":"Automatically assigns missing guessing control values — Def_Control_Guess","text":"Def_Control_Guess checks assigns default values","code":""},{"path":"/reference/Def_Control_Guess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically assigns missing guessing control values — Def_Control_Guess","text":"","code":"Def_Control_Guess(guesses_control, a_n)"},{"path":"/reference/Def_Control_Guess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically assigns missing guessing control values — Def_Control_Guess","text":"guesses_control list parameters control guessing works, see Def_Control_Guess() options vignette(\"Control_Options\") a_n list initial parameter values, used determine number parameters. May either list vectors single vector.","code":""},{"path":"/reference/Def_Control_Guess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically assigns missing guessing control values — Def_Control_Guess","text":"returns filled list","code":""},{"path":[]},{"path":"/reference/Def_Control_Guess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically assigns missing guessing control values — Def_Control_Guess","text":"","code":"library(data.table) guesses_control <- list(\"maxiter\"=10,\"guesses\"=10,     \"loglin_min\"=-1,\"loglin_max\"=1,\"loglin_method\"=\"uniform\") a_n <- c(0.1,2,1.3) guesses_control <- Def_Control_Guess(guesses_control, a_n)"},{"path":"/reference/Def_model_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically assigns missing model control values — Def_model_control","title":"Automatically assigns missing model control values — Def_model_control","text":"Def_model_control checks assigns default values","code":""},{"path":"/reference/Def_model_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically assigns missing model control values — Def_model_control","text":"","code":"Def_model_control(control)"},{"path":"/reference/Def_model_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically assigns missing model control values — Def_model_control","text":"control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\")","code":""},{"path":"/reference/Def_model_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically assigns missing model control values — Def_model_control","text":"returns filled list","code":""},{"path":[]},{"path":"/reference/Def_model_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically assigns missing model control values — Def_model_control","text":"","code":"library(data.table) control <- list(\"single\"=TRUE) control <- Def_model_control(control)"},{"path":"/reference/Def_modelform_fix.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically assigns geometric-mixture values and checks that a valid modelform is used — Def_modelform_fix","title":"Automatically assigns geometric-mixture values and checks that a valid modelform is used — Def_modelform_fix","text":"Def_model_control checks assigns default values modelform options","code":""},{"path":"/reference/Def_modelform_fix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically assigns geometric-mixture values and checks that a valid modelform is used — Def_modelform_fix","text":"","code":"Def_modelform_fix(control, model_control, modelform, term_n)"},{"path":"/reference/Def_modelform_fix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically assigns geometric-mixture values and checks that a valid modelform is used — Def_modelform_fix","text":"control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E term_n term numbers element model","code":""},{"path":"/reference/Def_modelform_fix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically assigns geometric-mixture values and checks that a valid modelform is used — Def_modelform_fix","text":"returns filled list","code":""},{"path":[]},{"path":"/reference/Def_modelform_fix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically assigns geometric-mixture values and checks that a valid modelform is used — Def_modelform_fix","text":"","code":"library(data.table) control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5, 'ties'='breslow','double_step'=1) control <- Def_Control(control) model_control <- list(\"single\"=TRUE) model_control <- Def_model_control(model_control) term_n <- c(0,1,1) modelform <- 'a' val <- Def_modelform_fix(control,model_control,modelform,term_n) model_control <- val$model_control modelform <- val$modelform"},{"path":"/reference/Gather_Guesses_CPP.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs checks to gather a list of guesses and iterations — Gather_Guesses_CPP","title":"Performs checks to gather a list of guesses and iterations — Gather_Guesses_CPP","text":"Gather_Guesses_CPP called within R, uses list options model definition generate list parameters iterations produce errors","code":""},{"path":"/reference/Gather_Guesses_CPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs checks to gather a list of guesses and iterations — Gather_Guesses_CPP","text":"","code":"Gather_Guesses_CPP(   df,   dfc,   names,   term_n,   tform,   keep_constant,   a_n,   x_all,   a_n_default,   modelform,   fir,   control,   guesses_control,   model_control = list() )"},{"path":"/reference/Gather_Guesses_CPP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs checks to gather a list of guesses and iterations — Gather_Guesses_CPP","text":"df data.table containing columns interest dfc vector matching subterm number matrix column names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. x_all covariate matrix a_n_default center parameter distribution guessing scope modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") guesses_control list parameters control guessing works, see Def_Control_Guess() options vignette(\"Control_Options\") model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details","code":""},{"path":"/reference/Gather_Guesses_CPP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs checks to gather a list of guesses and iterations — Gather_Guesses_CPP","text":"returns list final results","code":""},{"path":"/reference/Gather_Guesses_CPP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs checks to gather a list of guesses and iterations — Gather_Guesses_CPP","text":"","code":"library(data.table) a <- c(0,1,2,3,4,5,6) b <- c(1,2,3,4,5,6,7) c <- c(0,1,0,0,0,1,0) d <- c(3,4,5,6,7,8,9) df <- data.table::data.table(\"a\"=a,\"b\"=b,\"c\"=c,\"d\"=d) time1 <- \"a\" time2 <- \"b\" event <- \"c\" names <- c(\"d\") term_n <- c(0) tform <- c(\"loglin\") keep_constant <- c(0) a_n <- c(-0.1) a_n_default <- a_n modelform <- \"M\" fir <- 0 der_iden <- 0 control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = -1,'halfmax' = 5,'epsilon' = 1e-9,             'deriv_epsilon' = 1e-9, 'abs_max'=1.0,'change_all'=TRUE,             'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1) guesses_control <- list() model_control <- list() all_names <- unique(names(df)) dfc <- match(names,all_names) term_tot <- max(term_n)+1 x_all <- as.matrix(df[,all_names, with = FALSE]) control <- Def_Control(control) guesses_control <- Def_Control_Guess(guesses_control, a_n) model_control <- Def_model_control(model_control) Gather_Guesses_CPP(df, dfc, names, term_n, tform, keep_constant, a_n, x_all, a_n_default,                    modelform, fir, control, guesses_control) #> Warning: Warning: rmin and rmax lists not equal size, defaulting to lin and loglin min/max values #> $a_ns #>  [1] -0.100000000  0.613150009  0.753092897  0.004755189  0.054131389 #>  [6]  0.274895491 -0.610563541 -1.010765683  0.719709113 -0.958637562 #>  #> $maxiters #>  [1] 5 5 5 5 5 5 5 5 5 5 #>"},{"path":"/reference/GetCensWeight.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates and returns data for time by hazard and survival to estimate censoring rate — GetCensWeight","title":"Calculates and returns data for time by hazard and survival to estimate censoring rate — GetCensWeight","text":"GetCensWeight uses user provided data, time/event columns, vectors specifying model, options generate estimate censoring rate, plots, returns data","code":""},{"path":"/reference/GetCensWeight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates and returns data for time by hazard and survival to estimate censoring rate — GetCensWeight","text":"","code":"GetCensWeight(   df,   time1,   time2,   event0,   names,   term_n,   tform,   keep_constant,   a_n,   modelform,   fir,   control,   plot_options,   model_control = list(),   strat_col = \"e\" )"},{"path":"/reference/GetCensWeight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates and returns data for time by hazard and survival to estimate censoring rate — GetCensWeight","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") plot_options list parameters controlling plot options, see RunCoxPlots() different options model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details strat_col column stratify needed","code":""},{"path":"/reference/GetCensWeight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates and returns data for time by hazard and survival to estimate censoring rate — GetCensWeight","text":"saves plots current directory returns data.table time corresponding hazard, cumulative hazard, survival","code":""},{"path":"/reference/GetCensWeight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates and returns data for time by hazard and survival to estimate censoring rate — GetCensWeight","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(0.1, 0.1, 0.1, 0.1)  keep_constant <- c(0,0,0,0) der_iden <- 0 df$censor <- (df$Cancer_Status==0) event <- \"censor\" control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 20,'halfmax' = 5,    'epsilon' = 1e-6,'deriv_epsilon' = 1e-6,    'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,'verbose'=FALSE,    'ties'='breslow','double_step'=1) plot_options <- list(\"name\"=paste(tempfile(),\"run_06\",sep=\"\"),\"verbose\"=FALSE,                      \"studyID\"=\"studyID\",\"age_unit\"=\"years\") dft <- GetCensWeight(df, time1, time2, event, names, term_n, tform,                      keep_constant, a_n, modelform, fir, control, plot_options) t_ref <- dft$t surv_ref <- dft$surv t_c <- df$t1 cens_weight <- approx(t_ref, surv_ref, t_c,rule=2)$y"},{"path":"/reference/Joint_Multiple_Events.html","id":null,"dir":"Reference","previous_headings":"","what":"Automates creating data for a joint competing risks analysis — Joint_Multiple_Events","title":"Automates creating data for a joint competing risks analysis — Joint_Multiple_Events","text":"Joint_Multiple_Events generates input regression multiple non-independent events models","code":""},{"path":"/reference/Joint_Multiple_Events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automates creating data for a joint competing risks analysis — Joint_Multiple_Events","text":"","code":"Joint_Multiple_Events(   df,   events,   name_list,   term_n_list = list(),   tform_list = list(),   keep_constant_list = list(),   a_n_list = list() )"},{"path":"/reference/Joint_Multiple_Events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automates creating data for a joint competing risks analysis — Joint_Multiple_Events","text":"df data.table containing columns interest events vector event column names name_list list vectors columns event specific shared model elements, required term_n_list list vectors term numbers event specific shared model elements, defaults term 0 tform_list list vectors subterm types event specific shared model elements, defaults loglinear keep_constant_list list vectors constant elements event specific shared model elements, defaults free (0) a_n_list list vectors parameter values event specific shared model elements, defaults term 0","code":""},{"path":"/reference/Joint_Multiple_Events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automates creating data for a joint competing risks analysis — Joint_Multiple_Events","text":"returns updated dataframe model inputs","code":""},{"path":[]},{"path":"/reference/Joint_Multiple_Events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automates creating data for a joint competing risks analysis — Joint_Multiple_Events","text":"","code":"library(data.table) a <- c(0,0,0,1,1,1) b <- c(1,1,1,2,2,2) c <- c(0,1,2,2,1,0) d <- c(1,1,0,0,1,1) e <- c(0,1,1,1,0,0) df <- data.table('t0'=a,'t1'=b,'e0'=c,'e1'=d,'fac'=e) time1 <- \"t0\" time2 <- \"t1\" df$pyr <- df$t1 - df$t0 pyr <- \"pyr\" events <- c('e0','e1') names_e0 <- c('fac') names_e1 <- c('fac') names_shared <- c('t0','t0') term_n_e0 <- c(0) term_n_e1 <- c(0) term_n_shared <- c(0,0) tform_e0 <- c(\"loglin\") tform_e1 <- c(\"loglin\") tform_shared <- c(\"quad_slope\",\"loglin_top\") keep_constant_e0 <- c(0) keep_constant_e1 <- c(0) keep_constant_shared <- c(0,0) a_n_e0 <- c(-0.1) a_n_e1 <- c(0.1) a_n_shared <- c(0.001, -0.02) name_list <- list('shared'=names_shared,'e0'=names_e0,'e1'=names_e1) term_n_list <- list('shared'=term_n_shared,'e0'=term_n_e0,'e1'=term_n_e1) tform_list <- list('shared'=tform_shared,'e0'=tform_e0,'e1'=tform_e1) keep_constant_list <- list('shared'=keep_constant_shared,                            'e0'=keep_constant_e0,'e1'=keep_constant_e1) a_n_list <- list('shared'=a_n_shared,'e0'=a_n_e0,'e1'=a_n_e1) val <- Joint_Multiple_Events(df, events, name_list, term_n_list,                              tform_list, keep_constant_list, a_n_list)"},{"path":"/reference/Likelihood_Ratio_Test.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines the likelihood ratio test — Likelihood_Ratio_Test","title":"Defines the likelihood ratio test — Likelihood_Ratio_Test","text":"Likelihood_Ratio_Test uses two models calculates ratio","code":""},{"path":"/reference/Likelihood_Ratio_Test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines the likelihood ratio test — Likelihood_Ratio_Test","text":"","code":"Likelihood_Ratio_Test(alternative_model, null_model)"},{"path":"/reference/Likelihood_Ratio_Test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines the likelihood ratio test — Likelihood_Ratio_Test","text":"alternative_model new model interest list form, output poisson regression null_model model compare , list form","code":""},{"path":"/reference/Likelihood_Ratio_Test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines the likelihood ratio test — Likelihood_Ratio_Test","text":"returns score statistic","code":""},{"path":"/reference/Likelihood_Ratio_Test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defines the likelihood ratio test — Likelihood_Ratio_Test","text":"","code":"library(data.table) #In an actual example, one would run two seperate RunCoxRegression regressions, #    assigning the results to e0 and e1 e0 <- list(\"name\"=\"First Model\",\"LogLik\"=-120) e1 <- list(\"name\"=\"New Model\",\"LogLik\"=-100) score <- Likelihood_Ratio_Test(e1, e0)"},{"path":"/reference/Linked_Dose_Formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Full Parameter list for Special Dose Formula — Linked_Dose_Formula","title":"Calculates Full Parameter list for Special Dose Formula — Linked_Dose_Formula","text":"Linked_Dose_Formula Calculates parameters linear-quadratic linear-exponential linked formulas","code":""},{"path":"/reference/Linked_Dose_Formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Full Parameter list for Special Dose Formula — Linked_Dose_Formula","text":"","code":"Linked_Dose_Formula(tforms, paras, verbose = 0)"},{"path":"/reference/Linked_Dose_Formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Full Parameter list for Special Dose Formula — Linked_Dose_Formula","text":"tforms list formula types paras list formula parameters verbose integer valued 0-4 controlling information printed terminal. level includes lower levels. 0: silent, 1: errors printed, 2: warnings printed, 3: notes printed, 4: debug information printed. Errors situations stop regression, warnings situations assume default values user might intended, notes provide information regression progress, debug prints C++ progress intermediate results. default level 2 True/False converted 3/0.","code":""},{"path":"/reference/Linked_Dose_Formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Full Parameter list for Special Dose Formula — Linked_Dose_Formula","text":"returns list full parameters","code":""},{"path":"/reference/Linked_Dose_Formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Full Parameter list for Special Dose Formula — Linked_Dose_Formula","text":"","code":"library(data.table) tforms <- list(\"cov_0\"=\"quad\", \"cov_1\"=\"exp\") paras <- list(\"cov_0\"=c(1,3.45), \"cov_1\"=c(1.2, 4.5, 0.1)) full_paras <- Linked_Dose_Formula(tforms, paras)"},{"path":"/reference/Linked_Lin_Exp_Para.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates The Additional Parameter For a linear-exponential formula with known maximum — Linked_Lin_Exp_Para","title":"Calculates The Additional Parameter For a linear-exponential formula with known maximum — Linked_Lin_Exp_Para","text":"Linked_Lin_Exp_Para Calculates additional parameter desired maximum","code":""},{"path":"/reference/Linked_Lin_Exp_Para.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates The Additional Parameter For a linear-exponential formula with known maximum — Linked_Lin_Exp_Para","text":"","code":"Linked_Lin_Exp_Para(y, a0, a1_goal, verbose = 0)"},{"path":"/reference/Linked_Lin_Exp_Para.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates The Additional Parameter For a linear-exponential formula with known maximum — Linked_Lin_Exp_Para","text":"y point formula switch a0 linear slope a1_goal exponential maximum desired verbose integer valued 0-4 controlling information printed terminal. level includes lower levels. 0: silent, 1: errors printed, 2: warnings printed, 3: notes printed, 4: debug information printed. Errors situations stop regression, warnings situations assume default values user might intended, notes provide information regression progress, debug prints C++ progress intermediate results. default level 2 True/False converted 3/0.","code":""},{"path":"/reference/Linked_Lin_Exp_Para.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates The Additional Parameter For a linear-exponential formula with known maximum — Linked_Lin_Exp_Para","text":"returns parameter used Colossus","code":""},{"path":"/reference/Linked_Lin_Exp_Para.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates The Additional Parameter For a linear-exponential formula with known maximum — Linked_Lin_Exp_Para","text":"","code":"library(data.table) y <- 7.6 a0 <- 1.2 a1_goal <- 15 full_paras <- Linked_Lin_Exp_Para(y,a0,a1_goal)"},{"path":"/reference/OMP_Check.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the OMP flag — OMP_Check","title":"Checks the OMP flag — OMP_Check","text":"OMP_Check Called directly R, checks omp flag returns omp enabled","code":""},{"path":"/reference/OMP_Check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the OMP flag — OMP_Check","text":"","code":"OMP_Check()"},{"path":"/reference/OMP_Check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the OMP flag — OMP_Check","text":"boolean: True OMP allowed","code":""},{"path":"/reference/Rcomp_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks how R was compiled — Rcomp_version","title":"Checks how R was compiled — Rcomp_version","text":"Rcomp_version Checks R compiled, part configuration script","code":""},{"path":"/reference/Rcomp_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks how R was compiled — Rcomp_version","text":"","code":"Rcomp_version()"},{"path":"/reference/Rcomp_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks how R was compiled — Rcomp_version","text":"returns string representation gcc, clang, R CMD config CC output","code":""},{"path":"/reference/Rcpp_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks default R c++ compiler — Rcpp_version","title":"Checks default R c++ compiler — Rcpp_version","text":"Rcpp_version checks ~/.R/Makevars script default compilers set, part configuration script","code":""},{"path":"/reference/Rcpp_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks default R c++ compiler — Rcpp_version","text":"","code":"Rcpp_version()"},{"path":"/reference/Rcpp_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks default R c++ compiler — Rcpp_version","text":"returns string representation gcc, clang, head ~/.R/Makevars","code":""},{"path":"/reference/Replace_Missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically assigns missing values in listed columns — Replace_Missing","title":"Automatically assigns missing values in listed columns — Replace_Missing","text":"Replace_Missing checks column fills NA values","code":""},{"path":"/reference/Replace_Missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically assigns missing values in listed columns — Replace_Missing","text":"","code":"Replace_Missing(df, name_list, msv, verbose = FALSE)"},{"path":"/reference/Replace_Missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically assigns missing values in listed columns — Replace_Missing","text":"df data.table containing columns interest name_list vector string column names check msv value replace na , used every column used verbose integer valued 0-4 controlling information printed terminal. level includes lower levels. 0: silent, 1: errors printed, 2: warnings printed, 3: notes printed, 4: debug information printed. Errors situations stop regression, warnings situations assume default values user might intended, notes provide information regression progress, debug prints C++ progress intermediate results. default level 2 True/False converted 3/0.","code":""},{"path":"/reference/Replace_Missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically assigns missing values in listed columns — Replace_Missing","text":"returns filled datatable","code":""},{"path":[]},{"path":"/reference/Replace_Missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically assigns missing values in listed columns — Replace_Missing","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  NA,  47,  36,  NA,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0)) df <- Replace_Missing(df, c(\"Starting_Age\",\"Ending_Age\"), 70)"},{"path":"/reference/RunCoxNull.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Cox Proportional Hazards regression with the null model — RunCoxNull","title":"Performs basic Cox Proportional Hazards regression with the null model — RunCoxNull","text":"RunCoxRegression uses user provided data time/event columns calculate log-likelihood constant hazard ratio","code":""},{"path":"/reference/RunCoxNull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Cox Proportional Hazards regression with the null model — RunCoxNull","text":"","code":"RunCoxNull(   df,   time1 = \"start\",   time2 = \"end\",   event0 = \"event\",   control = list() )"},{"path":"/reference/RunCoxNull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Cox Proportional Hazards regression with the null model — RunCoxNull","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\")","code":""},{"path":"/reference/RunCoxNull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Cox Proportional Hazards regression with the null model — RunCoxNull","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunCoxNull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Cox Proportional Hazards regression with the null model — RunCoxNull","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\"  control <- list(\"ncores\"=2,'verbose'=FALSE, 'ties'='breslow','double_step'=1)  e <- RunCoxNull(df, time1, time2, event, control)"},{"path":"/reference/RunCoxPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs Cox Proportional Hazard model plots — RunCoxPlots","title":"Performs Cox Proportional Hazard model plots — RunCoxPlots","text":"RunCoxPlots uses user provided data, time/event columns, vectors specifying model, options choose save plots","code":""},{"path":"/reference/RunCoxPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs Cox Proportional Hazard model plots — RunCoxPlots","text":"","code":"RunCoxPlots(   df,   time1 = \"start\",   time2 = \"end\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   control = list(),   plot_options = list(),   model_control = list() )"},{"path":"/reference/RunCoxPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs Cox Proportional Hazard model plots — RunCoxPlots","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") plot_options list parameters controlling plot options, see RunCoxPlots() different options model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details","code":""},{"path":"/reference/RunCoxPlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs Cox Proportional Hazard model plots — RunCoxPlots","text":"saves plots current directory returns string","code":""},{"path":[]},{"path":"/reference/RunCoxPlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs Cox Proportional Hazard model plots — RunCoxPlots","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(-0.1, 0.5, 1.1, -0.3)  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = -1,'halfmax' = 5,    'epsilon' = 1e-3,'deriv_epsilon' = 1e-3,    'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,    'verbose'=FALSE, 'ties'='breslow','double_step'=1) #setting maxiter below 0 forces the function to calculate the score # and return plot_options <- list(\"type\"=c(\"surv\",paste(tempfile(),\"run\",sep=\"\")), \"studyid\"=\"UserID\",                   'verbose'=FALSE)  RunCoxPlots(df, time1, time2, event, names, term_n, tform, keep_constant,             a_n, modelform, fir, control, plot_options) #> list()"},{"path":"/reference/RunCoxRegression.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Cox Proportional Hazards regression without special options — RunCoxRegression","title":"Performs basic Cox Proportional Hazards regression without special options — RunCoxRegression","text":"RunCoxRegression uses user provided data, time/event columns, vectors specifying model, options control convergence starting position","code":""},{"path":"/reference/RunCoxRegression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Cox Proportional Hazards regression without special options — RunCoxRegression","text":"","code":"RunCoxRegression(   df,   time1 = \"start\",   time2 = \"end\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list() )"},{"path":"/reference/RunCoxRegression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Cox Proportional Hazards regression without special options — RunCoxRegression","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\")","code":""},{"path":"/reference/RunCoxRegression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Cox Proportional Hazards regression without special options — RunCoxRegression","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunCoxRegression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Cox Proportional Hazards regression without special options — RunCoxRegression","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(0.1, 0.1, 0.1, 0.1)  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,    'epsilon' = 1e-3, 'deriv_epsilon' = 1e-3,    'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,    'verbose'=FALSE, 'ties'='breslow','double_step'=1)  e <- RunCoxRegression(df, time1, time2, event, names, term_n, tform,                      keep_constant, a_n, modelform, fir, der_iden, control)"},{"path":"/reference/RunCoxRegression_Basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Cox Proportional Hazards regression with a multiplicative log-linear model — RunCoxRegression_Basic","title":"Performs basic Cox Proportional Hazards regression with a multiplicative log-linear model — RunCoxRegression_Basic","text":"RunCoxRegression_Basic uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions","code":""},{"path":"/reference/RunCoxRegression_Basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Cox Proportional Hazards regression with a multiplicative log-linear model — RunCoxRegression_Basic","text":"","code":"RunCoxRegression_Basic(   df,   time1 = \"start\",   time2 = \"end\",   event0 = \"event\",   names = c(\"CONST\"),   keep_constant = c(0),   a_n = c(0),   der_iden = 0,   control = list() )"},{"path":"/reference/RunCoxRegression_Basic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Cox Proportional Hazards regression with a multiplicative log-linear model — RunCoxRegression_Basic","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\")","code":""},{"path":"/reference/RunCoxRegression_Basic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Cox Proportional Hazards regression with a multiplicative log-linear model — RunCoxRegression_Basic","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunCoxRegression_Basic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Cox Proportional Hazards regression with a multiplicative log-linear model — RunCoxRegression_Basic","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,    'epsilon' = 1e-3,'deriv_epsilon' = 1e-3, 'abs_max'=1.0,    'change_all'=TRUE,'dose_abs_max'=100.0,'verbose'=FALSE,    'ties'='breslow','double_step'=1)  e <- RunCoxRegression_Basic(df, time1, time2, event, names, keep_constant,                             a_n, der_iden, control)"},{"path":"/reference/RunCoxRegression_CR.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Cox Proportional Hazards regression with competing risks — RunCoxRegression_CR","title":"Performs basic Cox Proportional Hazards regression with competing risks — RunCoxRegression_CR","text":"RunCoxRegression_CR uses user provided data, time/event columns, vectors specifying model, options control convergence, starting positions, censoring adjustment","code":""},{"path":"/reference/RunCoxRegression_CR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Cox Proportional Hazards regression with competing risks — RunCoxRegression_CR","text":"","code":"RunCoxRegression_CR(   df,   time1 = \"start\",   time2 = \"end\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list(),   cens_weight = \"null\" )"},{"path":"/reference/RunCoxRegression_CR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Cox Proportional Hazards regression with competing risks — RunCoxRegression_CR","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") cens_weight column containing row weights","code":""},{"path":"/reference/RunCoxRegression_CR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Cox Proportional Hazards regression with competing risks — RunCoxRegression_CR","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunCoxRegression_CR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Cox Proportional Hazards regression with competing risks — RunCoxRegression_CR","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   2,   1,   2,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(0.1, 0.1, 0.1, 0.1)  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1) #weights the probability that a row would continue to extend without censoring, #    for risk group calculation  df$cens_weight <- c(0.83, 0.37, 0.26, 0.34, 0.55, 0.23, 0.27) #censoring weight is generated by the survival library finegray function, or by hand. #The ratio of weight at event end point to weight at row endpoint is used. e <- RunCoxRegression_CR(df, time1, time2, event, names, term_n, tform,      keep_constant, a_n, modelform, fir, der_iden, control, 'cens_weight')"},{"path":"/reference/RunCoxRegression_Guesses_CPP.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Cox Proportional Hazards regression, Generates multiple starting guesses on c++ side — RunCoxRegression_Guesses_CPP","title":"Performs basic Cox Proportional Hazards regression, Generates multiple starting guesses on c++ side — RunCoxRegression_Guesses_CPP","text":"RunCoxRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions. additional options starting several initial guesses","code":""},{"path":"/reference/RunCoxRegression_Guesses_CPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Cox Proportional Hazards regression, Generates multiple starting guesses on c++ side — RunCoxRegression_Guesses_CPP","text":"","code":"RunCoxRegression_Guesses_CPP(   df,   time1 = \"start\",   time2 = \"end\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list(),   guesses_control = list(),   strat_col = \"null\",   model_control = list(),   cens_weight = \"null\" )"},{"path":"/reference/RunCoxRegression_Guesses_CPP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Cox Proportional Hazards regression, Generates multiple starting guesses on c++ side — RunCoxRegression_Guesses_CPP","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") guesses_control list parameters control guessing works, see Def_Control_Guess() options vignette(\"Control_Options\") strat_col column stratify needed model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details cens_weight column containing row weights","code":""},{"path":"/reference/RunCoxRegression_Guesses_CPP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Cox Proportional Hazards regression, Generates multiple starting guesses on c++ side — RunCoxRegression_Guesses_CPP","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunCoxRegression_Guesses_CPP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Cox Proportional Hazards regression, Generates multiple starting guesses on c++ side — RunCoxRegression_Guesses_CPP","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   1,   0,   0,   0,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1) guesses_control <- list(\"maxiter\"=10,\"guesses\"=10,\"lin_min\"=0.001,\"lin_max\"=1,     \"loglin_min\"=-1,\"loglin_max\"=1, \"lin_method\"=\"uniform\",\"loglin_method\"=\"uniform\",strata=FALSE) strat_col <- 'e'  e <- RunCoxRegression_Guesses_CPP(df, time1, time2, event, names, term_n,                               tform, keep_constant, a_n, modelform, fir,                               der_iden, control,guesses_control,strat_col) #> Warning: Warning: rmin and rmax lists not equal size, defaulting to lin and loglin min/max values"},{"path":"/reference/RunCoxRegression_Omnibus.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs Cox Proportional Hazards regression using the omnibus function — RunCoxRegression_Omnibus","title":"Performs Cox Proportional Hazards regression using the omnibus function — RunCoxRegression_Omnibus","text":"RunCoxRegression_Omnibus uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions. additional options starting several initial guesses, using stratification, multiplicative loglinear 1-term, competing risks, calculation without derivatives","code":""},{"path":"/reference/RunCoxRegression_Omnibus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs Cox Proportional Hazards regression using the omnibus function — RunCoxRegression_Omnibus","text":"","code":"RunCoxRegression_Omnibus(   df,   time1 = \"start\",   time2 = \"end\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list(),   strat_col = \"null\",   cens_weight = \"null\",   model_control = list(),   cons_mat = as.matrix(c(0)),   cons_vec = c(0) )"},{"path":"/reference/RunCoxRegression_Omnibus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs Cox Proportional Hazards regression using the omnibus function — RunCoxRegression_Omnibus","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") strat_col column stratify needed cens_weight column containing row weights model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details cons_mat Matrix containing coefficients system linear constraints, formatted matrix cons_vec Vector containing constants system linear constraints, formatted vector","code":""},{"path":"/reference/RunCoxRegression_Omnibus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs Cox Proportional Hazards regression using the omnibus function — RunCoxRegression_Omnibus","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunCoxRegression_Omnibus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs Cox Proportional Hazards regression using the omnibus function — RunCoxRegression_Omnibus","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   1,   0,   0,   0,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- list(c(1.1, -0.1, 0.2, 0.5),c(1.6, -0.12, 0.3, 0.4)) #used to test at a specific point term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiters' = c(5,5,5),    'halfmax' = 5,'epsilon' = 1e-3, 'deriv_epsilon' = 1e-3,    'abs_max'=1.0,'change_all'=TRUE, 'dose_abs_max'=100.0,'verbose'=FALSE,    'ties'='breslow','double_step'=1, \"guesses\"=2)  e <- RunCoxRegression_Omnibus(df, time1, time2, event,                               names, term_n, tform, keep_constant,                               a_n, modelform, fir, der_iden, control,                               model_control=list(\"single\"=FALSE,                               \"basic\"=FALSE, \"cr\"=FALSE, 'null'=FALSE))"},{"path":"/reference/RunCoxRegression_Omnibus_Multidose.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs Cox Proportional Hazards regression using the omnibus function with multiple column realizations — RunCoxRegression_Omnibus_Multidose","title":"Performs Cox Proportional Hazards regression using the omnibus function with multiple column realizations — RunCoxRegression_Omnibus_Multidose","text":"RunCoxRegression_Omnibus_Multidose uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions. Used 2DMC column uncertainty methods. Returns optimized parameters, log-likelihood, standard deviation realization. additional options using stratification, multiplicative loglinear 1-term, competing risks, calculation without derivatives","code":""},{"path":"/reference/RunCoxRegression_Omnibus_Multidose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs Cox Proportional Hazards regression using the omnibus function with multiple column realizations — RunCoxRegression_Omnibus_Multidose","text":"","code":"RunCoxRegression_Omnibus_Multidose(   df,   time1 = \"start\",   time2 = \"end\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   realization_columns = matrix(c(\"temp00\", \"temp01\", \"temp10\", \"temp11\"), nrow = 2),   realization_index = c(\"temp0\", \"temp1\"),   control = list(),   strat_col = \"null\",   cens_weight = \"null\",   model_control = list(),   cons_mat = as.matrix(c(0)),   cons_vec = c(0) )"},{"path":"/reference/RunCoxRegression_Omnibus_Multidose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs Cox Proportional Hazards regression using the omnibus function with multiple column realizations — RunCoxRegression_Omnibus_Multidose","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 realization_columns used multi-realization regressions. Matrix column names rows column realizations, columns realization realization_index used multi-realization regressions. Vector column names, one column realizations. name used \"names\" variable equation definition control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") strat_col column stratify needed cens_weight column containing row weights model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details cons_mat Matrix containing coefficients system linear constraints, formatted matrix cons_vec Vector containing constants system linear constraints, formatted vector","code":""},{"path":"/reference/RunCoxRegression_Omnibus_Multidose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs Cox Proportional Hazards regression using the omnibus function with multiple column realizations — RunCoxRegression_Omnibus_Multidose","text":"returns list final results realization","code":""},{"path":[]},{"path":"/reference/RunCoxRegression_Omnibus_Multidose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs Cox Proportional Hazards regression using the omnibus function with multiple column realizations — RunCoxRegression_Omnibus_Multidose","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   1,   0,   0,   0,   1),                       \"a0\"=c(0,   1,   1,   0,   1,   0,   1),                       \"a1\"=c(0,   1,   1,   0,   1,   0,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- list(c(1.1, -0.1, 0.2, 0.5),c(1.6, -0.12, 0.3, 0.4)) #used to test at a specific point term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0 realization_columns = matrix(c(\"a0\",\"a1\"),nrow=1) realization_index=c(\"a\")  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiters' = c(5,5,5),    'halfmax' = 5,'epsilon' = 1e-3, 'deriv_epsilon' = 1e-3,    'abs_max'=1.0,'change_all'=TRUE, 'dose_abs_max'=100.0,'verbose'=FALSE,    'ties'='breslow','double_step'=1, \"guesses\"=2)  #e <- RunCoxRegression_Omnibus_Multidose(df, time1, time2, event, #                              names, term_n, tform, keep_constant, #                              a_n, modelform, fir, der_iden, #                              realization_columns, realization_index,control, #                              model_control=list(\"single\"=FALSE, #                              \"basic\"=FALSE, \"cr\"=FALSE, 'null'=FALSE))"},{"path":"/reference/RunCoxRegression_STRATA.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Cox Proportional Hazards regression with strata effect — RunCoxRegression_STRATA","title":"Performs basic Cox Proportional Hazards regression with strata effect — RunCoxRegression_STRATA","text":"RunCoxRegression_STRATA uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions","code":""},{"path":"/reference/RunCoxRegression_STRATA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Cox Proportional Hazards regression with strata effect — RunCoxRegression_STRATA","text":"","code":"RunCoxRegression_STRATA(   df,   time1 = \"start\",   time2 = \"end\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list(),   strat_col = \"null\" )"},{"path":"/reference/RunCoxRegression_STRATA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Cox Proportional Hazards regression with strata effect — RunCoxRegression_STRATA","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") strat_col column stratify needed","code":""},{"path":"/reference/RunCoxRegression_STRATA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Cox Proportional Hazards regression with strata effect — RunCoxRegression_STRATA","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunCoxRegression_STRATA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Cox Proportional Hazards regression with strata effect — RunCoxRegression_STRATA","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   0,   0,   1,   0,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,    'epsilon' = 1e-3,'deriv_epsilon' = 1e-3,    'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,    'verbose'=FALSE, 'ties'='breslow','double_step'=1) strat_col <- 'e'  e <- RunCoxRegression_STRATA(df, time1, time2, event, names, term_n,                              tform, keep_constant, a_n, modelform,                              fir, der_iden, control,strat_col)"},{"path":"/reference/RunCoxRegression_Single.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Cox Proportional Hazards calculation with no derivative — RunCoxRegression_Single","title":"Performs basic Cox Proportional Hazards calculation with no derivative — RunCoxRegression_Single","text":"RunCoxRegression_Single uses user provided data, time/event columns, vectors specifying model, options returns log-likelihood","code":""},{"path":"/reference/RunCoxRegression_Single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Cox Proportional Hazards calculation with no derivative — RunCoxRegression_Single","text":"","code":"RunCoxRegression_Single(   df,   time1 = \"start\",   time2 = \"end\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   control = list() )"},{"path":"/reference/RunCoxRegression_Single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Cox Proportional Hazards calculation with no derivative — RunCoxRegression_Single","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\")","code":""},{"path":"/reference/RunCoxRegression_Single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Cox Proportional Hazards calculation with no derivative — RunCoxRegression_Single","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunCoxRegression_Single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Cox Proportional Hazards calculation with no derivative — RunCoxRegression_Single","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point  keep_constant <- c(0,0,0,0)  control <- list(\"ncores\"=2,'verbose'=FALSE, 'ties'='breslow','double_step'=1)  e <- RunCoxRegression_Single(df, time1, time2, event, names, term_n, tform,                              keep_constant, a_n, modelform, fir, control)"},{"path":"/reference/RunCoxRegression_Tier_Guesses.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic cox regression, with multiple guesses, starts with solving for a single term — RunCoxRegression_Tier_Guesses","title":"Performs basic cox regression, with multiple guesses, starts with solving for a single term — RunCoxRegression_Tier_Guesses","text":"RunCoxRegression_Tier_Guesses uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions, additional guesses","code":""},{"path":"/reference/RunCoxRegression_Tier_Guesses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic cox regression, with multiple guesses, starts with solving for a single term — RunCoxRegression_Tier_Guesses","text":"","code":"RunCoxRegression_Tier_Guesses(   df,   time1 = \"start\",   time2 = \"end\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list(),   guesses_control = list(),   strat_col = \"null\",   model_control = list(),   cens_weight = \"null\" )"},{"path":"/reference/RunCoxRegression_Tier_Guesses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic cox regression, with multiple guesses, starts with solving for a single term — RunCoxRegression_Tier_Guesses","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") guesses_control list parameters control guessing works, see Def_Control_Guess() options vignette(\"Control_Options\") strat_col column stratify needed model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details cens_weight column containing row weights","code":""},{"path":"/reference/RunCoxRegression_Tier_Guesses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic cox regression, with multiple guesses, starts with solving for a single term — RunCoxRegression_Tier_Guesses","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunCoxRegression_Tier_Guesses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic cox regression, with multiple guesses, starts with solving for a single term — RunCoxRegression_Tier_Guesses","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   0,   0,   1,   0,   1)) # For the interval case time1 <- \"Starting_Age\" time2 <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,    'epsilon' = 1e-3,'deriv_epsilon' = 1e-3,    'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,    'verbose'=FALSE, 'ties'='breslow','double_step'=1) guesses_control <- list(\"iterations\"=10,\"guesses\"=10,\"lin_min\"=0.001,    \"lin_max\"=1,\"loglin_min\"=-1,\"loglin_max\"=1, \"lin_method\"=\"uniform\",    \"loglin_method\"=\"uniform\",strata=TRUE,term_initial = c(0,1)) strat_col <- 'e'  e <- RunCoxRegression_Tier_Guesses(df, time1, time2, event, names,                                    term_n, tform, keep_constant,                                    a_n, modelform, fir, der_iden,                                    control,guesses_control,                                    strat_col) #> Warning: Warning: rmin/rmax not equal size, lin/loglin min/max used #> Warning: Warning: rmin and rmax lists not equal size, defaulting to lin and loglin min/max values #> Warning: Warning: rmin and rmax lists not equal size, defaulting to lin and loglin min/max values"},{"path":"/reference/RunPoissonEventAssignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicts how many events are due to baseline vs excess — RunPoissonEventAssignment","title":"Predicts how many events are due to baseline vs excess — RunPoissonEventAssignment","text":"RunPoissonEventAssignment uses user provided data, person-year/event columns, vectors specifying model, options calculate background excess events","code":""},{"path":"/reference/RunPoissonEventAssignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicts how many events are due to baseline vs excess — RunPoissonEventAssignment","text":"","code":"RunPoissonEventAssignment(   df,   pyr0 = \"pyr\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list(),   strat_col = \"null\",   model_control = list() )"},{"path":"/reference/RunPoissonEventAssignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicts how many events are due to baseline vs excess — RunPoissonEventAssignment","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") strat_col column stratify needed model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details","code":""},{"path":"/reference/RunPoissonEventAssignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicts how many events are due to baseline vs excess — RunPoissonEventAssignment","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunPoissonEventAssignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicts how many events are due to baseline vs excess — RunPoissonEventAssignment","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case df$pyr <- df$Ending_Age - df$Starting_Age pyr <- 'pyr' event <- \"Cancer_Status\" names <- c('a','b','c','d') term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(0.1, 0.1, 0.1, 0.1)  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'double_step'=1)  e <- RunPoissonEventAssignment(df, pyr, event, names, term_n, tform, keep_constant,                           a_n, modelform, fir, der_iden, control)"},{"path":"/reference/RunPoissonEventAssignment_bound.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicts how many events are due to baseline vs excess at the confidence bounds of a single parameter — RunPoissonEventAssignment_bound","title":"Predicts how many events are due to baseline vs excess at the confidence bounds of a single parameter — RunPoissonEventAssignment_bound","text":"RunPoissonEventAssignment_bound uses user provided data, results poisson regression, options calculate background excess events","code":""},{"path":"/reference/RunPoissonEventAssignment_bound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicts how many events are due to baseline vs excess at the confidence bounds of a single parameter — RunPoissonEventAssignment_bound","text":"","code":"RunPoissonEventAssignment_bound(   df,   pyr0 = \"pyr\",   event0 = \"event\",   alternative_model = list(),   keep_constant = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   check_num = 1,   z = 2,   control = list(),   strat_col = \"null\",   model_control = list() )"},{"path":"/reference/RunPoissonEventAssignment_bound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicts how many events are due to baseline vs excess at the confidence bounds of a single parameter — RunPoissonEventAssignment_bound","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status alternative_model new model interest list form, output poisson regression keep_constant binary values denote parameters change modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 check_num parameter number check bounds , indexed 1 using order returned Colossus z Z score use confidence interval control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") strat_col column stratify needed model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details","code":""},{"path":"/reference/RunPoissonEventAssignment_bound.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicts how many events are due to baseline vs excess at the confidence bounds of a single parameter — RunPoissonEventAssignment_bound","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunPoissonEventAssignment_bound.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicts how many events are due to baseline vs excess at the confidence bounds of a single parameter — RunPoissonEventAssignment_bound","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   1,   0,   0,   0,   1)) # For the interval case pyr <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1) guesses_control <- list(\"maxiter\"=10,\"guesses\"=10,\"lin_min\"=0.001,\"lin_max\"=1,     \"loglin_min\"=-1,\"loglin_max\"=1, \"lin_method\"=\"uniform\",\"loglin_method\"=\"uniform\",      strata=FALSE) strat_col <- 'e' e0 <- RunPoissonRegression_Omnibus(df, pyr, event, names, term_n, tform, keep_constant,                                   a_n, modelform, fir, der_iden, control,strat_col)  e <- RunPoissonEventAssignment_bound(df, pyr, event, e0, keep_constant,                           modelform, fir, der_iden, 4, 2, control)"},{"path":"/reference/RunPoissonRegression.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic poisson regression — RunPoissonRegression","title":"Performs basic poisson regression — RunPoissonRegression","text":"RunPoissonRegression uses user provided data, person-year/event columns, vectors specifying model, options control convergence starting positions special options","code":""},{"path":"/reference/RunPoissonRegression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic poisson regression — RunPoissonRegression","text":"","code":"RunPoissonRegression(   df,   pyr0 = \"pyr\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list() )"},{"path":"/reference/RunPoissonRegression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic poisson regression — RunPoissonRegression","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\")","code":""},{"path":"/reference/RunPoissonRegression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic poisson regression — RunPoissonRegression","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunPoissonRegression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic poisson regression — RunPoissonRegression","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case df$pyr <- df$Ending_Age - df$Starting_Age pyr <- 'pyr' event <- \"Cancer_Status\" names <- c('a','b','c','d') term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(0.1, 0.1, 0.1, 0.1)  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'double_step'=1)  e <- RunPoissonRegression(df, pyr, event, names, term_n, tform, keep_constant,                           a_n, modelform, fir, der_iden, control)"},{"path":"/reference/RunPoissonRegression_Guesses_CPP.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Poisson regression, generates multiple starting guesses on c++ side — RunPoissonRegression_Guesses_CPP","title":"Performs basic Poisson regression, generates multiple starting guesses on c++ side — RunPoissonRegression_Guesses_CPP","text":"RunPoissonRegression_Guesses_CPP uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions. additional options starting several initial guesses","code":""},{"path":"/reference/RunPoissonRegression_Guesses_CPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Poisson regression, generates multiple starting guesses on c++ side — RunPoissonRegression_Guesses_CPP","text":"","code":"RunPoissonRegression_Guesses_CPP(   df,   pyr0 = \"pyr\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list(),   guesses_control = list(),   strat_col = \"null\",   model_control = list() )"},{"path":"/reference/RunPoissonRegression_Guesses_CPP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Poisson regression, generates multiple starting guesses on c++ side — RunPoissonRegression_Guesses_CPP","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") guesses_control list parameters control guessing works, see Def_Control_Guess() options vignette(\"Control_Options\") strat_col column stratify needed model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details","code":""},{"path":"/reference/RunPoissonRegression_Guesses_CPP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Poisson regression, generates multiple starting guesses on c++ side — RunPoissonRegression_Guesses_CPP","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunPoissonRegression_Guesses_CPP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Poisson regression, generates multiple starting guesses on c++ side — RunPoissonRegression_Guesses_CPP","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   1,   0,   0,   0,   1)) # For the interval case pyr <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1) guesses_control <- list(\"maxiter\"=10,\"guesses\"=10,\"lin_min\"=0.001,\"lin_max\"=1,     \"loglin_min\"=-1,\"loglin_max\"=1, \"lin_method\"=\"uniform\",\"loglin_method\"=\"uniform\",strata=FALSE) strat_col <- 'e'  e <- RunPoissonRegression_Guesses_CPP(df, pyr, event, names, term_n,                               tform, keep_constant, a_n, modelform, fir,                               der_iden, control,guesses_control,strat_col) #> Warning: Warning: rmin and rmax lists not equal size, defaulting to lin and loglin min/max values"},{"path":"/reference/RunPoissonRegression_Joint_Omnibus.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs joint Poisson regression using the omnibus function — RunPoissonRegression_Joint_Omnibus","title":"Performs joint Poisson regression using the omnibus function — RunPoissonRegression_Joint_Omnibus","text":"RunPoissonRegression_Joint_Omnibus uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions. additional options starting several initial guesses, uses joint competing risks equation","code":""},{"path":"/reference/RunPoissonRegression_Joint_Omnibus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs joint Poisson regression using the omnibus function — RunPoissonRegression_Joint_Omnibus","text":"","code":"RunPoissonRegression_Joint_Omnibus(   df,   pyr0,   events,   name_list,   term_n_list = list(),   tform_list = list(),   keep_constant_list = list(),   a_n_list = list(),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list(),   strat_col = \"null\",   model_control = list(),   cons_mat = as.matrix(c(0)),   cons_vec = c(0) )"},{"path":"/reference/RunPoissonRegression_Joint_Omnibus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs joint Poisson regression using the omnibus function — RunPoissonRegression_Joint_Omnibus","text":"df data.table containing columns interest pyr0 column used person-years per row events vector event column names name_list list vectors columns event specific shared model elements, required term_n_list list vectors term numbers event specific shared model elements, defaults term 0 tform_list list vectors subterm types event specific shared model elements, defaults loglinear keep_constant_list list vectors constant elements event specific shared model elements, defaults free (0) a_n_list list vectors parameter values event specific shared model elements, defaults term 0 modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") strat_col column stratify needed model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details cons_mat Matrix containing coefficients system linear constraints, formatted matrix cons_vec Vector containing constants system linear constraints, formatted vector","code":""},{"path":"/reference/RunPoissonRegression_Joint_Omnibus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs joint Poisson regression using the omnibus function — RunPoissonRegression_Joint_Omnibus","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunPoissonRegression_Joint_Omnibus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs joint Poisson regression using the omnibus function — RunPoissonRegression_Joint_Omnibus","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  a <- c(0,0,0,1,1,1) b <- c(1,1,1,2,2,2) c <- c(0,1,2,2,1,0) d <- c(1,1,0,0,1,1) e <- c(0,1,1,1,0,0) f <- c(0,1,0,0,1,1) df <- data.table('t0'=a,'t1'=b,'e0'=c,'e1'=d,'fac'=e) time1 <- \"t0\" time2 <- \"t1\" df$pyr <- df$t1 - df$t0 pyr <- \"pyr\" events <- c('e0','e1') names_e0 <- c('fac') names_e1 <- c('fac') names_shared <- c('t0','t0') term_n_e0 <- c(0) term_n_e1 <- c(0) term_n_shared <- c(0,0) tform_e0 <- c(\"loglin\") tform_e1 <- c(\"loglin\") tform_shared <- c(\"quad_slope\",\"loglin_top\") keep_constant_e0 <- c(0) keep_constant_e1 <- c(0) keep_constant_shared <- c(0,0) a_n_e0 <- c(-0.1) a_n_e1 <- c(0.1) a_n_shared <- c(0.001, -0.02) name_list <- list('shared'=names_shared,'e0'=names_e0,'e1'=names_e1) term_n_list <- list('shared'=term_n_shared,'e0'=term_n_e0,'e1'=term_n_e1) tform_list <- list('shared'=tform_shared,'e0'=tform_e0,'e1'=tform_e1) keep_constant_list <- list('shared'=keep_constant_shared,                            'e0'=keep_constant_e0,'e1'=keep_constant_e1) a_n_list <- list('shared'=a_n_shared,'e0'=a_n_e0,'e1'=a_n_e1)  der_iden <- 0 modelform <- \"M\" fir <- 0 control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1) guesses_control <- list(\"maxiter\"=10,\"guesses\"=10,\"lin_min\"=0.001,\"lin_max\"=1,     \"loglin_min\"=-1,\"loglin_max\"=1, \"lin_method\"=\"uniform\",\"loglin_method\"=\"uniform\",      strata=FALSE) strat_col <- 'f' e <- RunPoissonRegression_Joint_Omnibus(df, pyr, events, name_list, term_n_list,                                         tform_list, keep_constant_list, a_n_list,                                         modelform, fir, der_iden, control,strat_col)"},{"path":"/reference/RunPoissonRegression_Omnibus.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic Poisson regression using the omnibus function — RunPoissonRegression_Omnibus","title":"Performs basic Poisson regression using the omnibus function — RunPoissonRegression_Omnibus","text":"RunPoissonRegression_Omnibus uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions. additional options starting several initial guesses","code":""},{"path":"/reference/RunPoissonRegression_Omnibus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic Poisson regression using the omnibus function — RunPoissonRegression_Omnibus","text":"","code":"RunPoissonRegression_Omnibus(   df,   pyr0 = \"pyr\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list(),   strat_col = \"null\",   model_control = list(),   cons_mat = as.matrix(c(0)),   cons_vec = c(0) )"},{"path":"/reference/RunPoissonRegression_Omnibus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic Poisson regression using the omnibus function — RunPoissonRegression_Omnibus","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") strat_col column stratify needed model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details cons_mat Matrix containing coefficients system linear constraints, formatted matrix cons_vec Vector containing constants system linear constraints, formatted vector","code":""},{"path":"/reference/RunPoissonRegression_Omnibus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic Poisson regression using the omnibus function — RunPoissonRegression_Omnibus","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunPoissonRegression_Omnibus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic Poisson regression using the omnibus function — RunPoissonRegression_Omnibus","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   1,   0,   0,   0,   1)) # For the interval case pyr <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1) guesses_control <- list(\"maxiter\"=10,\"guesses\"=10,\"lin_min\"=0.001,\"lin_max\"=1,     \"loglin_min\"=-1,\"loglin_max\"=1, \"lin_method\"=\"uniform\",\"loglin_method\"=\"uniform\",      strata=FALSE) strat_col <- 'e' e <- RunPoissonRegression_Omnibus(df, pyr, event, names, term_n, tform, keep_constant,                                   a_n, modelform, fir, der_iden, control,strat_col)"},{"path":"/reference/RunPoissonRegression_Residual.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates poisson residuals — RunPoissonRegression_Residual","title":"Calculates poisson residuals — RunPoissonRegression_Residual","text":"RunPoissonRegression_Residual uses user provided data, time/event columns, vectors specifying model, options. Calculates residuals sum residuals","code":""},{"path":"/reference/RunPoissonRegression_Residual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates poisson residuals — RunPoissonRegression_Residual","text":"","code":"RunPoissonRegression_Residual(   df,   pyr0 = \"pyr\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list(),   strat_col = \"null\",   model_control = list() )"},{"path":"/reference/RunPoissonRegression_Residual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates poisson residuals — RunPoissonRegression_Residual","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") strat_col column stratify needed model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details","code":""},{"path":"/reference/RunPoissonRegression_Residual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates poisson residuals — RunPoissonRegression_Residual","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunPoissonRegression_Residual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates poisson residuals — RunPoissonRegression_Residual","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   1,   0,   0,   0,   1)) # For the interval case pyr <- \"Ending_Age\" event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE, 'ties'='breslow','double_step'=1) guesses_control <- list(\"maxiter\"=10,\"guesses\"=10,\"lin_min\"=0.001,\"lin_max\"=1,     \"loglin_min\"=-1,\"loglin_max\"=1, \"lin_method\"=\"uniform\",\"loglin_method\"=\"uniform\",      strata=FALSE) strat_col <- 'e' e <- RunPoissonRegression_Residual(df, pyr, event, names, term_n, tform, keep_constant,                                   a_n, modelform, fir, der_iden, control,strat_col)"},{"path":"/reference/RunPoissonRegression_STRATA.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs poisson regression with strata effect — RunPoissonRegression_STRATA","title":"Performs poisson regression with strata effect — RunPoissonRegression_STRATA","text":"RunPoissonRegression_STRATA uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions","code":""},{"path":"/reference/RunPoissonRegression_STRATA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs poisson regression with strata effect — RunPoissonRegression_STRATA","text":"","code":"RunPoissonRegression_STRATA(   df,   pyr0 = \"pyr\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list(),   strat_col = \"null\" )"},{"path":"/reference/RunPoissonRegression_STRATA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs poisson regression with strata effect — RunPoissonRegression_STRATA","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") strat_col column stratify needed","code":""},{"path":"/reference/RunPoissonRegression_STRATA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs poisson regression with strata effect — RunPoissonRegression_STRATA","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunPoissonRegression_STRATA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs poisson regression with strata effect — RunPoissonRegression_STRATA","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   0,   0,   1,   0,   1)) # For the interval case df$pyr <- df$Ending_Age - df$Starting_Age pyr <- 'pyr' event <- \"Cancer_Status\" names <- c('a','b','c','d') term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(0.1, 0.1, 0.1, 0.1)  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,              'epsilon' = 1e-3, 'deriv_epsilon' = 1e-3,              'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,              'verbose'=FALSE, 'double_step'=1) strat_col <- c(\"e\") e <- RunPoissonRegression_STRATA(df, pyr, event, names, term_n, tform, keep_constant,      a_n, modelform, fir, der_iden, control, strat_col)"},{"path":"/reference/RunPoissonRegression_Single.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs poisson regression with no derivative calculations — RunPoissonRegression_Single","title":"Performs poisson regression with no derivative calculations — RunPoissonRegression_Single","text":"RunPoissonRegression_Single uses user provided data, person-year/event columns, vectors specifying model, returns results","code":""},{"path":"/reference/RunPoissonRegression_Single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs poisson regression with no derivative calculations — RunPoissonRegression_Single","text":"","code":"RunPoissonRegression_Single(   df,   pyr0 = \"pyr\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   a_n = c(0),   modelform = \"M\",   fir = 0,   control = list(),   keep_constant = rep(0, length(names)) )"},{"path":"/reference/RunPoissonRegression_Single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs poisson regression with no derivative calculations — RunPoissonRegression_Single","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") keep_constant binary values denote parameters change","code":""},{"path":"/reference/RunPoissonRegression_Single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs poisson regression with no derivative calculations — RunPoissonRegression_Single","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunPoissonRegression_Single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs poisson regression with no derivative calculations — RunPoissonRegression_Single","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1)) # For the interval case df$pyr <- df$Ending_Age - df$Starting_Age pyr <- 'pyr' event <- \"Cancer_Status\" names <- c('a','b','c','d') term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0 a_n <- c(0.1, 0.1, 0.1, 0.1)  keep_constant <- c(0,0,0,0)  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,              'epsilon' = 1e-3, 'deriv_epsilon' = 1e-3,              'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,              'verbose'=FALSE, 'double_step'=1)  e <- RunPoissonRegression_Single(df, pyr, event, names, term_n, tform, a_n, modelform, fir, control)"},{"path":"/reference/RunPoissonRegression_Tier_Guesses.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs basic poisson regression, with multiple guesses, starts with a single term — RunPoissonRegression_Tier_Guesses","title":"Performs basic poisson regression, with multiple guesses, starts with a single term — RunPoissonRegression_Tier_Guesses","text":"RunPoissonRegression_Tier_Guesses uses user provided data, time/event columns, vectors specifying model, options control convergence starting positions, additional guesses","code":""},{"path":"/reference/RunPoissonRegression_Tier_Guesses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs basic poisson regression, with multiple guesses, starts with a single term — RunPoissonRegression_Tier_Guesses","text":"","code":"RunPoissonRegression_Tier_Guesses(   df,   pyr0 = \"pyr\",   event0 = \"event\",   names = c(\"CONST\"),   term_n = c(0),   tform = \"loglin\",   keep_constant = c(0),   a_n = c(0),   modelform = \"M\",   fir = 0,   der_iden = 0,   control = list(),   guesses_control = list(),   strat_col = \"null\",   model_control = list() )"},{"path":"/reference/RunPoissonRegression_Tier_Guesses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs basic poisson regression, with multiple guesses, starts with a single term — RunPoissonRegression_Tier_Guesses","text":"df data.table containing columns interest pyr0 column used person-years per row event0 column used event status names columns elements model, used identify data columns term_n term numbers element model tform list string function identifiers, used linear/step keep_constant binary values denote parameters change a_n list initial parameter values, used determine number parameters. May either list vectors single vector. modelform string specifying model type: M, , , PA, PAE, GMIX, GMIX-R, GMIX-E fir term number initial term, used models form T0*f(Ti) order matters der_iden number subterm test derivative , used testing runs single varying parameter, smaller total number parameters. indexed starting 0 control list parameters controlling convergence, see Def_Control() options vignette(\"Control_Options\") guesses_control list parameters control guessing works, see Def_Control_Guess() options vignette(\"Control_Options\") strat_col column stratify needed model_control controls alternative model options used, see Def_model_control() options vignette(\"Control_Options\") details","code":""},{"path":"/reference/RunPoissonRegression_Tier_Guesses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs basic poisson regression, with multiple guesses, starts with a single term — RunPoissonRegression_Tier_Guesses","text":"returns list final results","code":""},{"path":[]},{"path":"/reference/RunPoissonRegression_Tier_Guesses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs basic poisson regression, with multiple guesses, starts with a single term — RunPoissonRegression_Tier_Guesses","text":"","code":"library(data.table) ## basic example code reproduced from the starting-description vignette  df <- data.table::data.table(\"UserID\"=c(112, 114, 213, 214, 115, 116, 117),            \"Starting_Age\"=c(18,  20,  18,  19,  21,  20,  18),              \"Ending_Age\"=c(30,  45,  57,  47,  36,  60,  55),           \"Cancer_Status\"=c(0,   0,   1,   0,   1,   0,   0),                       \"a\"=c(0,   1,   1,   0,   1,   0,   1),                       \"b\"=c(1,   1.1, 2.1, 2,   0.1, 1,   0.2),                       \"c\"=c(10,  11,  10,  11,  12,  9,   11),                       \"d\"=c(0,   0,   0,   1,   1,   1,   1),                       \"e\"=c(0,   0,   0,   0,   1,   0,   1)) # For the interval case df$pyr <- df$Ending_Age - df$Starting_Age pyr <- 'pyr' event <- \"Cancer_Status\" names <- c('a','b','c','d') a_n <- c(1.1, -0.1, 0.2, 0.5) #used to test at a specific point term_n <- c(0,1,1,2) tform <- c(\"loglin\",\"lin\",\"lin\",\"plin\") modelform <- \"M\" fir <- 0  keep_constant <- c(0,0,0,0) der_iden <- 0  control <- list(\"ncores\"=2,'lr' = 0.75,'maxiter' = 5,'halfmax' = 5,'epsilon' = 1e-3,    'deriv_epsilon' = 1e-3, 'abs_max'=1.0,'change_all'=TRUE,    'dose_abs_max'=100.0,'verbose'=FALSE,'double_step'=1) guesses_control <- list(\"iterations\"=10,\"guesses\"=10,\"lin_min\"=0.001,\"lin_max\"=1,   \"loglin_min\"=-1,\"loglin_max\"=1,\"lin_method\"=\"uniform\",   \"loglin_method\"=\"uniform\",strata=TRUE,term_initial = c(0,1)) strat_col=c('e')  e <- RunPoissonRegression_Tier_Guesses(df, pyr, event, names,      term_n, tform, keep_constant, a_n, modelform,      fir, der_iden, control, guesses_control, strat_col) #> Warning: Warning: rmin and rmax lists not equal size, defaulting to lin and loglin min/max values #> Warning: Warning: rmin and rmax lists not equal size, defaulting to lin and loglin min/max values #> Warning: Warning: rmin and rmax lists not equal size, defaulting to lin and loglin min/max values"},{"path":"/reference/System_Version.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks OS, compilers, and OMP — System_Version","title":"Checks OS, compilers, and OMP — System_Version","text":"System_Version checks OS, default R c++ compiler, OMP enabled","code":""},{"path":"/reference/System_Version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks OS, compilers, and OMP — System_Version","text":"","code":"System_Version()"},{"path":"/reference/System_Version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks OS, compilers, and OMP — System_Version","text":"returns list results","code":""},{"path":"/reference/Time_Since.html","id":null,"dir":"Reference","previous_headings":"","what":"Automates creating a date since a reference column — Time_Since","title":"Automates creating a date since a reference column — Time_Since","text":"Time_Since generates new dataframe column containing time since reference given unit","code":""},{"path":"/reference/Time_Since.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automates creating a date since a reference column — Time_Since","text":"","code":"Time_Since(df, dcol0, tref, col_name, units = \"days\")"},{"path":"/reference/Time_Since.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automates creating a date since a reference column — Time_Since","text":"df data.table containing columns interest dcol0 list ending month, day, year tref reference time date format col_name vector new column names units time unit use","code":""},{"path":"/reference/Time_Since.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automates creating a date since a reference column — Time_Since","text":"returns updated dataframe","code":""},{"path":[]},{"path":"/reference/Time_Since.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automates creating a date since a reference column — Time_Since","text":"","code":"library(data.table) m0 <- c(1,1,2,2) m1 <- c(2,2,3,3) d0 <- c(1,2,3,4) d1 <- c(6,7,8,9) y0 <- c(1990,1991,1997,1998) y1 <- c(2001,2003,2005,2006) df <- data.table::data.table(\"m0\"=m0,\"m1\"=m1,\"d0\"=d0,\"d1\"=d1,\"y0\"=y0,\"y1\"=y1) tref <- strptime( \"3-22-1997\", format = \"%m-%d-%Y\",tz = 'UTC') df <- Time_Since(df,c(\"m1\",\"d1\",\"y1\"),tref,\"date_since\")"},{"path":"/reference/factorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits a parameter into factors — factorize","title":"Splits a parameter into factors — factorize","text":"factorize uses user provided list columns define new parameter unique value update data.table. interaction terms","code":""},{"path":"/reference/factorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits a parameter into factors — factorize","text":"","code":"factorize(df, col_list, verbose = 0)"},{"path":"/reference/factorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits a parameter into factors — factorize","text":"df data.table containing columns interest col_list array column names factor terms defined verbose integer valued 0-4 controlling information printed terminal. level includes lower levels. 0: silent, 1: errors printed, 2: warnings printed, 3: notes printed, 4: debug information printed. Errors situations stop regression, warnings situations assume default values user might intended, notes provide information regression progress, debug prints C++ progress intermediate results. default level 2 True/False converted 3/0.","code":""},{"path":"/reference/factorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits a parameter into factors — factorize","text":"returns list two named fields. df updated dataframe, cols new column names","code":""},{"path":[]},{"path":"/reference/factorize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Splits a parameter into factors — factorize","text":"","code":"library(data.table) a <- c(0,1,2,3,4,5,6) b <- c(1,2,3,4,5,6,7) c <- c(0,1,2,1,0,1,0) df <- data.table::data.table(\"a\"=a,\"b\"=b,\"c\"=c) col_list <- c(\"c\") val <- factorize(df,col_list) df <- val$df new_col <- val$cols"},{"path":"/reference/factorize_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits a parameter into factors in parallel — factorize_par","title":"Splits a parameter into factors in parallel — factorize_par","text":"factorize_par uses user provided list columns define new parameter unique value update data.table. interaction terms","code":""},{"path":"/reference/factorize_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits a parameter into factors in parallel — factorize_par","text":"","code":"factorize_par(df, col_list, verbose = 0, nthreads = as.numeric(detectCores()))"},{"path":"/reference/factorize_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits a parameter into factors in parallel — factorize_par","text":"df data.table containing columns interest col_list array column names factor terms defined verbose integer valued 0-4 controlling information printed terminal. level includes lower levels. 0: silent, 1: errors printed, 2: warnings printed, 3: notes printed, 4: debug information printed. Errors situations stop regression, warnings situations assume default values user might intended, notes provide information regression progress, debug prints C++ progress intermediate results. default level 2 True/False converted 3/0. nthreads number threads use, use threads available machine","code":""},{"path":"/reference/factorize_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits a parameter into factors in parallel — factorize_par","text":"returns list two named fields. df updated dataframe, cols new column names","code":""},{"path":[]},{"path":"/reference/factorize_par.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Splits a parameter into factors in parallel — factorize_par","text":"","code":"library(data.table) a <- c(0,1,2,3,4,5,6) b <- c(1,2,3,4,5,6,7) c <- c(0,1,2,1,0,1,0) df <- data.table::data.table(\"a\"=a,\"b\"=b,\"c\"=c) col_list <- c(\"c\") val <- factorize_par(df,col_list,FALSE,2) df <- val$df new_col <- val$cols"},{"path":"/reference/gcc_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks default c++ compiler — gcc_version","title":"Checks default c++ compiler — gcc_version","text":"gcc_version Checks default c++ compiler, part configuration script","code":""},{"path":"/reference/gcc_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks default c++ compiler — gcc_version","text":"","code":"gcc_version()"},{"path":"/reference/gcc_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks default c++ compiler — gcc_version","text":"returns string representation gcc, clang, c++ output","code":""},{"path":"/reference/gen_time_dep.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies time dependence to parameters — gen_time_dep","title":"Applies time dependence to parameters — gen_time_dep","text":"gen_time_dep generates new dataframe time dependent covariates applying grid time","code":""},{"path":"/reference/gen_time_dep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies time dependence to parameters — gen_time_dep","text":"","code":"gen_time_dep(   df,   time1,   time2,   event0,   iscox,   dt,   new_names,   dep_cols,   func_form,   fname,   tform,   nthreads = as.numeric(detectCores()) )"},{"path":"/reference/gen_time_dep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies time dependence to parameters — gen_time_dep","text":"df data.table containing columns interest time1 column used time period starts time2 column used time period end event0 column used event status iscox boolean rows event times kept, rows removed true. Cox proportional hazards model use rows intervals containing event times dt spacing time new rows new_names list new names use instead default, default used entry ” dep_cols columns needed new dataframe func_form vector functions apply time-dependent covariate. form func(df, time) returning vector new column value fname filename used new dataframe tform list string function identifiers, used linear/step nthreads number threads use, use threads available machine","code":""},{"path":"/reference/gen_time_dep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies time dependence to parameters — gen_time_dep","text":"returns updated dataframe","code":""},{"path":[]},{"path":"/reference/gen_time_dep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Applies time dependence to parameters — gen_time_dep","text":"","code":"library(data.table) #Adapted from the tests a <- c(20,20,5,10,15) b <- c(1,2,1,1,2) c <- c(0,0,1,1,1) df <- data.table::data.table(\"a\"=a,\"b\"=b,\"c\"=c) time1 <- \"%trunc%\" time2 <- \"a\" event <- \"c\" control <- list('lr' = 0.75,'maxiter' = -1,'halfmax' = 5,'epsilon' = 1e-9,            'deriv_epsilon' = 1e-9, 'abs_max'=1.0,'change_all'=TRUE,'dose_abs_max'=100.0,            'verbose'=FALSE, 'ties'='breslow','double_step'=1) grt_f <- function(df,time_col){     return ((df[,\"b\"] * df[,get(time_col)])[[1]]) } func_form <- c(\"lin\") df_new <- gen_time_dep(df,time1,time2,event,TRUE,0.01,c(\"grt\"),c(),        c(grt_f),paste(\"test\",\"_new.csv\",sep=\"\"), func_form,2) file.remove('test_new.csv') #> [1] TRUE"},{"path":"/reference/get_os.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks system OS — get_os","title":"Checks system OS — get_os","text":"get_os checks system OS, part configuration script","code":""},{"path":"/reference/get_os.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks system OS — get_os","text":"","code":"get_os()"},{"path":"/reference/get_os.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks system OS — get_os","text":"returns string representation OS","code":""},{"path":"/reference/interact_them.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines Interactions — interact_them","title":"Defines Interactions — interact_them","text":"interact_them uses user provided interactions define interaction terms update data.table. assumes interaction \"+\" \"*\" applies basic anti-aliasing avoid duplicates","code":""},{"path":"/reference/interact_them.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines Interactions — interact_them","text":"","code":"interact_them(df, interactions, new_names, verbose = 0)"},{"path":"/reference/interact_them.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines Interactions — interact_them","text":"df data.table containing columns interest interactions array strings, one form term1?*?term2\" term1 interaction type * + term2, \"?\" dlimits new_names list new names use instead default, default used entry ” verbose integer valued 0-4 controlling information printed terminal. level includes lower levels. 0: silent, 1: errors printed, 2: warnings printed, 3: notes printed, 4: debug information printed. Errors situations stop regression, warnings situations assume default values user might intended, notes provide information regression progress, debug prints C++ progress intermediate results. default level 2 True/False converted 3/0.","code":""},{"path":"/reference/interact_them.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines Interactions — interact_them","text":"returns list two named fields. df updated dataframe, cols new column names","code":""},{"path":[]},{"path":"/reference/interact_them.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defines Interactions — interact_them","text":"","code":"library(data.table) a <- c(0,1,2,3,4,5,6) b <- c(1,2,3,4,5,6,7) c <- c(0,1,2,1,0,1,0) df <- data.table::data.table(\"a\"=a,\"b\"=b,\"c\"=c) interactions <- c(\"a?+?b\",\"a?*?c\") new_names <- c(\"ab\",\"ac\") vals <- interact_them(df, interactions, new_names) df <- vals$df new_col <- vals$cols"},{"path":"/news/index.html","id":"colossus-09","dir":"Changelog","previous_headings":"","what":"Colossus 0.9","title":"Colossus 0.9","text":"Added NEWS.md file track changes package.","code":""},{"path":"/news/index.html","id":"colossus-100","dir":"Changelog","previous_headings":"","what":"Colossus 1.0.0","title":"Colossus 1.0.0","text":"CRAN release: 2024-02-20 Initial submission C++ code modified apply OpenMP code OpenMP isn’t detected, resolve MacOS installation failures","code":""},{"path":"/news/index.html","id":"colossus-101","dir":"Changelog","previous_headings":"","what":"Colossus 1.0.1","title":"Colossus 1.0.1","text":"CRAN release: 2024-02-26 Configuration improved detect compiler information Linux configuration depends system wide c++ default compiler used compile R OpenMP support used c++ default R compiler clang","code":""},{"path":"/news/index.html","id":"colossus-102","dir":"Changelog","previous_headings":"","what":"Colossus 1.0.2","title":"Colossus 1.0.2","text":"utility checks updated check keep_constant 0/1 values code fail keep_constant integer valued 0/1, explanation ","code":""},{"path":"/news/index.html","id":"colossus-103","dir":"Changelog","previous_headings":"","what":"Colossus 1.0.3","title":"Colossus 1.0.3","text":"configuration script libraries moved Suggested: Imports: configuration script functions moved non-exported functions Colossus, circumvents note imported libraries used may later used provide user function informs OpenMP /isn’t supported","code":""},{"path":"/news/index.html","id":"colossus-104","dir":"Changelog","previous_headings":"","what":"Colossus 1.0.4","title":"Colossus 1.0.4","text":"utility checks updated check term numbers subterm types R side code fail term numbers integers, term numbers missing, subterm types ","code":""},{"path":"/news/index.html","id":"colossus-105","dir":"Changelog","previous_headings":"","what":"Colossus 1.0.5","title":"Colossus 1.0.5","text":"compilation flags changed macros","code":""},{"path":"/news/index.html","id":"colossus-110","dir":"Changelog","previous_headings":"","what":"Colossus 1.1.0","title":"Colossus 1.1.0","text":"CRAN release: 2024-04-03 Default Makevars now fully portable default windows uses OpenMP now GitHub version include instructions activating configuration use OpenMP gcc Linux","code":""},{"path":"/news/index.html","id":"colossus-111","dir":"Changelog","previous_headings":"","what":"Colossus 1.1.1","title":"Colossus 1.1.1","text":"CRAN release: 2024-04-30 ggplot2 longer required, now optional additional testing added coverage default Makevars added via bash script","code":""},{"path":"/news/index.html","id":"colossus-112","dir":"Changelog","previous_headings":"","what":"Colossus 1.1.2","title":"Colossus 1.1.2","text":"Log-likelihood bound functionality added subject usual convergence issues, manual search option","code":""},{"path":"/news/index.html","id":"colossus-113","dir":"Changelog","previous_headings":"","what":"Colossus 1.1.3","title":"Colossus 1.1.3","text":"CRAN release: 2024-09-06 Cox regression now removes rows end first event start last event Cox regression now sets constant rows constant, helps aliasing Tests now use sink() avoid printing much excessive output console. Tests now consolidated .","code":""},{"path":"/news/index.html","id":"colossus-1141","dir":"Changelog","previous_headings":"","what":"Colossus 1.1.4.1","title":"Colossus 1.1.4.1","text":"CRAN release: 2024-09-20 Cox plotting functions now return tables used plots (last plot table returned) Plotting vignette updated include details plots survival package listed suggested plotting vignette","code":""},{"path":"/news/index.html","id":"colossus-1142","dir":"Changelog","previous_headings":"","what":"Colossus 1.1.4.2","title":"Colossus 1.1.4.2","text":"R errors warnings sent stop() warning(). C++ errors warnings still controlled verbosity arguement ggsave defaults width/height = 7 Updates started fix possible OpenMP issues fedora 36 running clang 18 Unable debug printing option cover c++ files testing, still test output readable. debug output removed.","code":""}]
